
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	00 4b 00 20 bd 52 00 00 c1 c4 00 00 91 52 00 00     .K. .R.......R..
    1010:	91 52 00 00 91 52 00 00 91 52 00 00 00 00 00 00     .R...R...R......
	...
    102c:	f9 4e 00 00 91 52 00 00 00 00 00 00 a5 4e 00 00     .N...R.......N..
    103c:	91 52 00 00                                         .R..

00001040 <_irq_vector_table>:
    1040:	a9 4f 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     .O...O...O...O..
    1050:	a9 4f 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     .O...O...O...O..
    1060:	a9 4f 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     .O...O...O...O..
    1070:	a9 4f 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     .O...O...O...O..
    1080:	a9 4f 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     .O...O...O...O..
    1090:	a9 4f 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     .O...O...O...O..
    10a0:	a9 4f 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     .O...O...O...O..
    10b0:	a9 4f 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     .O...O...O...O..
    10c0:	a9 4f 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     .O...O...O...O..
    10d0:	61 2b 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     a+...O...O...O..
    10e0:	a9 4f 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     .O...O...O...O..
    10f0:	a9 4f 00 00 a9 4f 00 00 a9 4f 00 00 a9 4f 00 00     .O...O...O...O..

Disassembly of section text:

00001100 <__aeabi_drsub>:
    1100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    1104:	e002      	b.n	110c <__adddf3>
    1106:	bf00      	nop

00001108 <__aeabi_dsub>:
    1108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000110c <__adddf3>:
    110c:	b530      	push	{r4, r5, lr}
    110e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    1112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    1116:	ea94 0f05 	teq	r4, r5
    111a:	bf08      	it	eq
    111c:	ea90 0f02 	teqeq	r0, r2
    1120:	bf1f      	itttt	ne
    1122:	ea54 0c00 	orrsne.w	ip, r4, r0
    1126:	ea55 0c02 	orrsne.w	ip, r5, r2
    112a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    112e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1132:	f000 80e2 	beq.w	12fa <__adddf3+0x1ee>
    1136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    113a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    113e:	bfb8      	it	lt
    1140:	426d      	neglt	r5, r5
    1142:	dd0c      	ble.n	115e <__adddf3+0x52>
    1144:	442c      	add	r4, r5
    1146:	ea80 0202 	eor.w	r2, r0, r2
    114a:	ea81 0303 	eor.w	r3, r1, r3
    114e:	ea82 0000 	eor.w	r0, r2, r0
    1152:	ea83 0101 	eor.w	r1, r3, r1
    1156:	ea80 0202 	eor.w	r2, r0, r2
    115a:	ea81 0303 	eor.w	r3, r1, r3
    115e:	2d36      	cmp	r5, #54	; 0x36
    1160:	bf88      	it	hi
    1162:	bd30      	pophi	{r4, r5, pc}
    1164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    116c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1174:	d002      	beq.n	117c <__adddf3+0x70>
    1176:	4240      	negs	r0, r0
    1178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    117c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    1188:	d002      	beq.n	1190 <__adddf3+0x84>
    118a:	4252      	negs	r2, r2
    118c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1190:	ea94 0f05 	teq	r4, r5
    1194:	f000 80a7 	beq.w	12e6 <__adddf3+0x1da>
    1198:	f1a4 0401 	sub.w	r4, r4, #1
    119c:	f1d5 0e20 	rsbs	lr, r5, #32
    11a0:	db0d      	blt.n	11be <__adddf3+0xb2>
    11a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    11a6:	fa22 f205 	lsr.w	r2, r2, r5
    11aa:	1880      	adds	r0, r0, r2
    11ac:	f141 0100 	adc.w	r1, r1, #0
    11b0:	fa03 f20e 	lsl.w	r2, r3, lr
    11b4:	1880      	adds	r0, r0, r2
    11b6:	fa43 f305 	asr.w	r3, r3, r5
    11ba:	4159      	adcs	r1, r3
    11bc:	e00e      	b.n	11dc <__adddf3+0xd0>
    11be:	f1a5 0520 	sub.w	r5, r5, #32
    11c2:	f10e 0e20 	add.w	lr, lr, #32
    11c6:	2a01      	cmp	r2, #1
    11c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    11cc:	bf28      	it	cs
    11ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    11d2:	fa43 f305 	asr.w	r3, r3, r5
    11d6:	18c0      	adds	r0, r0, r3
    11d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    11dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    11e0:	d507      	bpl.n	11f2 <__adddf3+0xe6>
    11e2:	f04f 0e00 	mov.w	lr, #0
    11e6:	f1dc 0c00 	rsbs	ip, ip, #0
    11ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    11ee:	eb6e 0101 	sbc.w	r1, lr, r1
    11f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    11f6:	d31b      	bcc.n	1230 <__adddf3+0x124>
    11f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    11fc:	d30c      	bcc.n	1218 <__adddf3+0x10c>
    11fe:	0849      	lsrs	r1, r1, #1
    1200:	ea5f 0030 	movs.w	r0, r0, rrx
    1204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    1208:	f104 0401 	add.w	r4, r4, #1
    120c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    1210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    1214:	f080 809a 	bcs.w	134c <__adddf3+0x240>
    1218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    121c:	bf08      	it	eq
    121e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1222:	f150 0000 	adcs.w	r0, r0, #0
    1226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    122a:	ea41 0105 	orr.w	r1, r1, r5
    122e:	bd30      	pop	{r4, r5, pc}
    1230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    1234:	4140      	adcs	r0, r0
    1236:	eb41 0101 	adc.w	r1, r1, r1
    123a:	3c01      	subs	r4, #1
    123c:	bf28      	it	cs
    123e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    1242:	d2e9      	bcs.n	1218 <__adddf3+0x10c>
    1244:	f091 0f00 	teq	r1, #0
    1248:	bf04      	itt	eq
    124a:	4601      	moveq	r1, r0
    124c:	2000      	moveq	r0, #0
    124e:	fab1 f381 	clz	r3, r1
    1252:	bf08      	it	eq
    1254:	3320      	addeq	r3, #32
    1256:	f1a3 030b 	sub.w	r3, r3, #11
    125a:	f1b3 0220 	subs.w	r2, r3, #32
    125e:	da0c      	bge.n	127a <__adddf3+0x16e>
    1260:	320c      	adds	r2, #12
    1262:	dd08      	ble.n	1276 <__adddf3+0x16a>
    1264:	f102 0c14 	add.w	ip, r2, #20
    1268:	f1c2 020c 	rsb	r2, r2, #12
    126c:	fa01 f00c 	lsl.w	r0, r1, ip
    1270:	fa21 f102 	lsr.w	r1, r1, r2
    1274:	e00c      	b.n	1290 <__adddf3+0x184>
    1276:	f102 0214 	add.w	r2, r2, #20
    127a:	bfd8      	it	le
    127c:	f1c2 0c20 	rsble	ip, r2, #32
    1280:	fa01 f102 	lsl.w	r1, r1, r2
    1284:	fa20 fc0c 	lsr.w	ip, r0, ip
    1288:	bfdc      	itt	le
    128a:	ea41 010c 	orrle.w	r1, r1, ip
    128e:	4090      	lslle	r0, r2
    1290:	1ae4      	subs	r4, r4, r3
    1292:	bfa2      	ittt	ge
    1294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1298:	4329      	orrge	r1, r5
    129a:	bd30      	popge	{r4, r5, pc}
    129c:	ea6f 0404 	mvn.w	r4, r4
    12a0:	3c1f      	subs	r4, #31
    12a2:	da1c      	bge.n	12de <__adddf3+0x1d2>
    12a4:	340c      	adds	r4, #12
    12a6:	dc0e      	bgt.n	12c6 <__adddf3+0x1ba>
    12a8:	f104 0414 	add.w	r4, r4, #20
    12ac:	f1c4 0220 	rsb	r2, r4, #32
    12b0:	fa20 f004 	lsr.w	r0, r0, r4
    12b4:	fa01 f302 	lsl.w	r3, r1, r2
    12b8:	ea40 0003 	orr.w	r0, r0, r3
    12bc:	fa21 f304 	lsr.w	r3, r1, r4
    12c0:	ea45 0103 	orr.w	r1, r5, r3
    12c4:	bd30      	pop	{r4, r5, pc}
    12c6:	f1c4 040c 	rsb	r4, r4, #12
    12ca:	f1c4 0220 	rsb	r2, r4, #32
    12ce:	fa20 f002 	lsr.w	r0, r0, r2
    12d2:	fa01 f304 	lsl.w	r3, r1, r4
    12d6:	ea40 0003 	orr.w	r0, r0, r3
    12da:	4629      	mov	r1, r5
    12dc:	bd30      	pop	{r4, r5, pc}
    12de:	fa21 f004 	lsr.w	r0, r1, r4
    12e2:	4629      	mov	r1, r5
    12e4:	bd30      	pop	{r4, r5, pc}
    12e6:	f094 0f00 	teq	r4, #0
    12ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    12ee:	bf06      	itte	eq
    12f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    12f4:	3401      	addeq	r4, #1
    12f6:	3d01      	subne	r5, #1
    12f8:	e74e      	b.n	1198 <__adddf3+0x8c>
    12fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    12fe:	bf18      	it	ne
    1300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1304:	d029      	beq.n	135a <__adddf3+0x24e>
    1306:	ea94 0f05 	teq	r4, r5
    130a:	bf08      	it	eq
    130c:	ea90 0f02 	teqeq	r0, r2
    1310:	d005      	beq.n	131e <__adddf3+0x212>
    1312:	ea54 0c00 	orrs.w	ip, r4, r0
    1316:	bf04      	itt	eq
    1318:	4619      	moveq	r1, r3
    131a:	4610      	moveq	r0, r2
    131c:	bd30      	pop	{r4, r5, pc}
    131e:	ea91 0f03 	teq	r1, r3
    1322:	bf1e      	ittt	ne
    1324:	2100      	movne	r1, #0
    1326:	2000      	movne	r0, #0
    1328:	bd30      	popne	{r4, r5, pc}
    132a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    132e:	d105      	bne.n	133c <__adddf3+0x230>
    1330:	0040      	lsls	r0, r0, #1
    1332:	4149      	adcs	r1, r1
    1334:	bf28      	it	cs
    1336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    133a:	bd30      	pop	{r4, r5, pc}
    133c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    1340:	bf3c      	itt	cc
    1342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    1346:	bd30      	popcc	{r4, r5, pc}
    1348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    134c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    1350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1354:	f04f 0000 	mov.w	r0, #0
    1358:	bd30      	pop	{r4, r5, pc}
    135a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    135e:	bf1a      	itte	ne
    1360:	4619      	movne	r1, r3
    1362:	4610      	movne	r0, r2
    1364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    1368:	bf1c      	itt	ne
    136a:	460b      	movne	r3, r1
    136c:	4602      	movne	r2, r0
    136e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1372:	bf06      	itte	eq
    1374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    1378:	ea91 0f03 	teqeq	r1, r3
    137c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    1380:	bd30      	pop	{r4, r5, pc}
    1382:	bf00      	nop

00001384 <__aeabi_ui2d>:
    1384:	f090 0f00 	teq	r0, #0
    1388:	bf04      	itt	eq
    138a:	2100      	moveq	r1, #0
    138c:	4770      	bxeq	lr
    138e:	b530      	push	{r4, r5, lr}
    1390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1398:	f04f 0500 	mov.w	r5, #0
    139c:	f04f 0100 	mov.w	r1, #0
    13a0:	e750      	b.n	1244 <__adddf3+0x138>
    13a2:	bf00      	nop

000013a4 <__aeabi_i2d>:
    13a4:	f090 0f00 	teq	r0, #0
    13a8:	bf04      	itt	eq
    13aa:	2100      	moveq	r1, #0
    13ac:	4770      	bxeq	lr
    13ae:	b530      	push	{r4, r5, lr}
    13b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    13b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    13b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    13bc:	bf48      	it	mi
    13be:	4240      	negmi	r0, r0
    13c0:	f04f 0100 	mov.w	r1, #0
    13c4:	e73e      	b.n	1244 <__adddf3+0x138>
    13c6:	bf00      	nop

000013c8 <__aeabi_f2d>:
    13c8:	0042      	lsls	r2, r0, #1
    13ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    13ce:	ea4f 0131 	mov.w	r1, r1, rrx
    13d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    13d6:	bf1f      	itttt	ne
    13d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    13dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    13e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    13e4:	4770      	bxne	lr
    13e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    13ea:	bf08      	it	eq
    13ec:	4770      	bxeq	lr
    13ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    13f2:	bf04      	itt	eq
    13f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    13f8:	4770      	bxeq	lr
    13fa:	b530      	push	{r4, r5, lr}
    13fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    1400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1408:	e71c      	b.n	1244 <__adddf3+0x138>
    140a:	bf00      	nop

0000140c <__aeabi_ul2d>:
    140c:	ea50 0201 	orrs.w	r2, r0, r1
    1410:	bf08      	it	eq
    1412:	4770      	bxeq	lr
    1414:	b530      	push	{r4, r5, lr}
    1416:	f04f 0500 	mov.w	r5, #0
    141a:	e00a      	b.n	1432 <__aeabi_l2d+0x16>

0000141c <__aeabi_l2d>:
    141c:	ea50 0201 	orrs.w	r2, r0, r1
    1420:	bf08      	it	eq
    1422:	4770      	bxeq	lr
    1424:	b530      	push	{r4, r5, lr}
    1426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    142a:	d502      	bpl.n	1432 <__aeabi_l2d+0x16>
    142c:	4240      	negs	r0, r0
    142e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    143a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    143e:	f43f aed8 	beq.w	11f2 <__adddf3+0xe6>
    1442:	f04f 0203 	mov.w	r2, #3
    1446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    144a:	bf18      	it	ne
    144c:	3203      	addne	r2, #3
    144e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1452:	bf18      	it	ne
    1454:	3203      	addne	r2, #3
    1456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    145a:	f1c2 0320 	rsb	r3, r2, #32
    145e:	fa00 fc03 	lsl.w	ip, r0, r3
    1462:	fa20 f002 	lsr.w	r0, r0, r2
    1466:	fa01 fe03 	lsl.w	lr, r1, r3
    146a:	ea40 000e 	orr.w	r0, r0, lr
    146e:	fa21 f102 	lsr.w	r1, r1, r2
    1472:	4414      	add	r4, r2
    1474:	e6bd      	b.n	11f2 <__adddf3+0xe6>
    1476:	bf00      	nop

00001478 <__aeabi_dmul>:
    1478:	b570      	push	{r4, r5, r6, lr}
    147a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    147e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1486:	bf1d      	ittte	ne
    1488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    148c:	ea94 0f0c 	teqne	r4, ip
    1490:	ea95 0f0c 	teqne	r5, ip
    1494:	f000 f8de 	bleq	1654 <__aeabi_dmul+0x1dc>
    1498:	442c      	add	r4, r5
    149a:	ea81 0603 	eor.w	r6, r1, r3
    149e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    14a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    14a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    14aa:	bf18      	it	ne
    14ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    14b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    14b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    14b8:	d038      	beq.n	152c <__aeabi_dmul+0xb4>
    14ba:	fba0 ce02 	umull	ip, lr, r0, r2
    14be:	f04f 0500 	mov.w	r5, #0
    14c2:	fbe1 e502 	umlal	lr, r5, r1, r2
    14c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    14ca:	fbe0 e503 	umlal	lr, r5, r0, r3
    14ce:	f04f 0600 	mov.w	r6, #0
    14d2:	fbe1 5603 	umlal	r5, r6, r1, r3
    14d6:	f09c 0f00 	teq	ip, #0
    14da:	bf18      	it	ne
    14dc:	f04e 0e01 	orrne.w	lr, lr, #1
    14e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    14e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    14e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    14ec:	d204      	bcs.n	14f8 <__aeabi_dmul+0x80>
    14ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    14f2:	416d      	adcs	r5, r5
    14f4:	eb46 0606 	adc.w	r6, r6, r6
    14f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    14fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    1500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    1504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    1508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    150c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    1510:	bf88      	it	hi
    1512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1516:	d81e      	bhi.n	1556 <__aeabi_dmul+0xde>
    1518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    151c:	bf08      	it	eq
    151e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    1522:	f150 0000 	adcs.w	r0, r0, #0
    1526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    152a:	bd70      	pop	{r4, r5, r6, pc}
    152c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    1530:	ea46 0101 	orr.w	r1, r6, r1
    1534:	ea40 0002 	orr.w	r0, r0, r2
    1538:	ea81 0103 	eor.w	r1, r1, r3
    153c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    1540:	bfc2      	ittt	gt
    1542:	ebd4 050c 	rsbsgt	r5, r4, ip
    1546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    154a:	bd70      	popgt	{r4, r5, r6, pc}
    154c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1550:	f04f 0e00 	mov.w	lr, #0
    1554:	3c01      	subs	r4, #1
    1556:	f300 80ab 	bgt.w	16b0 <__aeabi_dmul+0x238>
    155a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    155e:	bfde      	ittt	le
    1560:	2000      	movle	r0, #0
    1562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    1566:	bd70      	pople	{r4, r5, r6, pc}
    1568:	f1c4 0400 	rsb	r4, r4, #0
    156c:	3c20      	subs	r4, #32
    156e:	da35      	bge.n	15dc <__aeabi_dmul+0x164>
    1570:	340c      	adds	r4, #12
    1572:	dc1b      	bgt.n	15ac <__aeabi_dmul+0x134>
    1574:	f104 0414 	add.w	r4, r4, #20
    1578:	f1c4 0520 	rsb	r5, r4, #32
    157c:	fa00 f305 	lsl.w	r3, r0, r5
    1580:	fa20 f004 	lsr.w	r0, r0, r4
    1584:	fa01 f205 	lsl.w	r2, r1, r5
    1588:	ea40 0002 	orr.w	r0, r0, r2
    158c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    1590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1598:	fa21 f604 	lsr.w	r6, r1, r4
    159c:	eb42 0106 	adc.w	r1, r2, r6
    15a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    15a4:	bf08      	it	eq
    15a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    15aa:	bd70      	pop	{r4, r5, r6, pc}
    15ac:	f1c4 040c 	rsb	r4, r4, #12
    15b0:	f1c4 0520 	rsb	r5, r4, #32
    15b4:	fa00 f304 	lsl.w	r3, r0, r4
    15b8:	fa20 f005 	lsr.w	r0, r0, r5
    15bc:	fa01 f204 	lsl.w	r2, r1, r4
    15c0:	ea40 0002 	orr.w	r0, r0, r2
    15c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    15c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    15cc:	f141 0100 	adc.w	r1, r1, #0
    15d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    15d4:	bf08      	it	eq
    15d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    15da:	bd70      	pop	{r4, r5, r6, pc}
    15dc:	f1c4 0520 	rsb	r5, r4, #32
    15e0:	fa00 f205 	lsl.w	r2, r0, r5
    15e4:	ea4e 0e02 	orr.w	lr, lr, r2
    15e8:	fa20 f304 	lsr.w	r3, r0, r4
    15ec:	fa01 f205 	lsl.w	r2, r1, r5
    15f0:	ea43 0302 	orr.w	r3, r3, r2
    15f4:	fa21 f004 	lsr.w	r0, r1, r4
    15f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    15fc:	fa21 f204 	lsr.w	r2, r1, r4
    1600:	ea20 0002 	bic.w	r0, r0, r2
    1604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    1608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    160c:	bf08      	it	eq
    160e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1612:	bd70      	pop	{r4, r5, r6, pc}
    1614:	f094 0f00 	teq	r4, #0
    1618:	d10f      	bne.n	163a <__aeabi_dmul+0x1c2>
    161a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    161e:	0040      	lsls	r0, r0, #1
    1620:	eb41 0101 	adc.w	r1, r1, r1
    1624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1628:	bf08      	it	eq
    162a:	3c01      	subeq	r4, #1
    162c:	d0f7      	beq.n	161e <__aeabi_dmul+0x1a6>
    162e:	ea41 0106 	orr.w	r1, r1, r6
    1632:	f095 0f00 	teq	r5, #0
    1636:	bf18      	it	ne
    1638:	4770      	bxne	lr
    163a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    163e:	0052      	lsls	r2, r2, #1
    1640:	eb43 0303 	adc.w	r3, r3, r3
    1644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    1648:	bf08      	it	eq
    164a:	3d01      	subeq	r5, #1
    164c:	d0f7      	beq.n	163e <__aeabi_dmul+0x1c6>
    164e:	ea43 0306 	orr.w	r3, r3, r6
    1652:	4770      	bx	lr
    1654:	ea94 0f0c 	teq	r4, ip
    1658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    165c:	bf18      	it	ne
    165e:	ea95 0f0c 	teqne	r5, ip
    1662:	d00c      	beq.n	167e <__aeabi_dmul+0x206>
    1664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1668:	bf18      	it	ne
    166a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    166e:	d1d1      	bne.n	1614 <__aeabi_dmul+0x19c>
    1670:	ea81 0103 	eor.w	r1, r1, r3
    1674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1678:	f04f 0000 	mov.w	r0, #0
    167c:	bd70      	pop	{r4, r5, r6, pc}
    167e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1682:	bf06      	itte	eq
    1684:	4610      	moveq	r0, r2
    1686:	4619      	moveq	r1, r3
    1688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    168c:	d019      	beq.n	16c2 <__aeabi_dmul+0x24a>
    168e:	ea94 0f0c 	teq	r4, ip
    1692:	d102      	bne.n	169a <__aeabi_dmul+0x222>
    1694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    1698:	d113      	bne.n	16c2 <__aeabi_dmul+0x24a>
    169a:	ea95 0f0c 	teq	r5, ip
    169e:	d105      	bne.n	16ac <__aeabi_dmul+0x234>
    16a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    16a4:	bf1c      	itt	ne
    16a6:	4610      	movne	r0, r2
    16a8:	4619      	movne	r1, r3
    16aa:	d10a      	bne.n	16c2 <__aeabi_dmul+0x24a>
    16ac:	ea81 0103 	eor.w	r1, r1, r3
    16b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    16b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    16b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    16bc:	f04f 0000 	mov.w	r0, #0
    16c0:	bd70      	pop	{r4, r5, r6, pc}
    16c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    16c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    16ca:	bd70      	pop	{r4, r5, r6, pc}

000016cc <__aeabi_ddiv>:
    16cc:	b570      	push	{r4, r5, r6, lr}
    16ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
    16d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    16d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    16da:	bf1d      	ittte	ne
    16dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    16e0:	ea94 0f0c 	teqne	r4, ip
    16e4:	ea95 0f0c 	teqne	r5, ip
    16e8:	f000 f8a7 	bleq	183a <__aeabi_ddiv+0x16e>
    16ec:	eba4 0405 	sub.w	r4, r4, r5
    16f0:	ea81 0e03 	eor.w	lr, r1, r3
    16f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    16f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    16fc:	f000 8088 	beq.w	1810 <__aeabi_ddiv+0x144>
    1700:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    1708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    170c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    1710:	ea4f 2202 	mov.w	r2, r2, lsl #8
    1714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    1718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    171c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    1720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    1724:	429d      	cmp	r5, r3
    1726:	bf08      	it	eq
    1728:	4296      	cmpeq	r6, r2
    172a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    172e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    1732:	d202      	bcs.n	173a <__aeabi_ddiv+0x6e>
    1734:	085b      	lsrs	r3, r3, #1
    1736:	ea4f 0232 	mov.w	r2, r2, rrx
    173a:	1ab6      	subs	r6, r6, r2
    173c:	eb65 0503 	sbc.w	r5, r5, r3
    1740:	085b      	lsrs	r3, r3, #1
    1742:	ea4f 0232 	mov.w	r2, r2, rrx
    1746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    174a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    174e:	ebb6 0e02 	subs.w	lr, r6, r2
    1752:	eb75 0e03 	sbcs.w	lr, r5, r3
    1756:	bf22      	ittt	cs
    1758:	1ab6      	subcs	r6, r6, r2
    175a:	4675      	movcs	r5, lr
    175c:	ea40 000c 	orrcs.w	r0, r0, ip
    1760:	085b      	lsrs	r3, r3, #1
    1762:	ea4f 0232 	mov.w	r2, r2, rrx
    1766:	ebb6 0e02 	subs.w	lr, r6, r2
    176a:	eb75 0e03 	sbcs.w	lr, r5, r3
    176e:	bf22      	ittt	cs
    1770:	1ab6      	subcs	r6, r6, r2
    1772:	4675      	movcs	r5, lr
    1774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1778:	085b      	lsrs	r3, r3, #1
    177a:	ea4f 0232 	mov.w	r2, r2, rrx
    177e:	ebb6 0e02 	subs.w	lr, r6, r2
    1782:	eb75 0e03 	sbcs.w	lr, r5, r3
    1786:	bf22      	ittt	cs
    1788:	1ab6      	subcs	r6, r6, r2
    178a:	4675      	movcs	r5, lr
    178c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1790:	085b      	lsrs	r3, r3, #1
    1792:	ea4f 0232 	mov.w	r2, r2, rrx
    1796:	ebb6 0e02 	subs.w	lr, r6, r2
    179a:	eb75 0e03 	sbcs.w	lr, r5, r3
    179e:	bf22      	ittt	cs
    17a0:	1ab6      	subcs	r6, r6, r2
    17a2:	4675      	movcs	r5, lr
    17a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    17a8:	ea55 0e06 	orrs.w	lr, r5, r6
    17ac:	d018      	beq.n	17e0 <__aeabi_ddiv+0x114>
    17ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
    17b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    17b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    17ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    17be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    17c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    17c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    17ca:	d1c0      	bne.n	174e <__aeabi_ddiv+0x82>
    17cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    17d0:	d10b      	bne.n	17ea <__aeabi_ddiv+0x11e>
    17d2:	ea41 0100 	orr.w	r1, r1, r0
    17d6:	f04f 0000 	mov.w	r0, #0
    17da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    17de:	e7b6      	b.n	174e <__aeabi_ddiv+0x82>
    17e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    17e4:	bf04      	itt	eq
    17e6:	4301      	orreq	r1, r0
    17e8:	2000      	moveq	r0, #0
    17ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    17ee:	bf88      	it	hi
    17f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    17f4:	f63f aeaf 	bhi.w	1556 <__aeabi_dmul+0xde>
    17f8:	ebb5 0c03 	subs.w	ip, r5, r3
    17fc:	bf04      	itt	eq
    17fe:	ebb6 0c02 	subseq.w	ip, r6, r2
    1802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1806:	f150 0000 	adcs.w	r0, r0, #0
    180a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    180e:	bd70      	pop	{r4, r5, r6, pc}
    1810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    1814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    1818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    181c:	bfc2      	ittt	gt
    181e:	ebd4 050c 	rsbsgt	r5, r4, ip
    1822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    1826:	bd70      	popgt	{r4, r5, r6, pc}
    1828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    182c:	f04f 0e00 	mov.w	lr, #0
    1830:	3c01      	subs	r4, #1
    1832:	e690      	b.n	1556 <__aeabi_dmul+0xde>
    1834:	ea45 0e06 	orr.w	lr, r5, r6
    1838:	e68d      	b.n	1556 <__aeabi_dmul+0xde>
    183a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    183e:	ea94 0f0c 	teq	r4, ip
    1842:	bf08      	it	eq
    1844:	ea95 0f0c 	teqeq	r5, ip
    1848:	f43f af3b 	beq.w	16c2 <__aeabi_dmul+0x24a>
    184c:	ea94 0f0c 	teq	r4, ip
    1850:	d10a      	bne.n	1868 <__aeabi_ddiv+0x19c>
    1852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1856:	f47f af34 	bne.w	16c2 <__aeabi_dmul+0x24a>
    185a:	ea95 0f0c 	teq	r5, ip
    185e:	f47f af25 	bne.w	16ac <__aeabi_dmul+0x234>
    1862:	4610      	mov	r0, r2
    1864:	4619      	mov	r1, r3
    1866:	e72c      	b.n	16c2 <__aeabi_dmul+0x24a>
    1868:	ea95 0f0c 	teq	r5, ip
    186c:	d106      	bne.n	187c <__aeabi_ddiv+0x1b0>
    186e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1872:	f43f aefd 	beq.w	1670 <__aeabi_dmul+0x1f8>
    1876:	4610      	mov	r0, r2
    1878:	4619      	mov	r1, r3
    187a:	e722      	b.n	16c2 <__aeabi_dmul+0x24a>
    187c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1880:	bf18      	it	ne
    1882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1886:	f47f aec5 	bne.w	1614 <__aeabi_dmul+0x19c>
    188a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    188e:	f47f af0d 	bne.w	16ac <__aeabi_dmul+0x234>
    1892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    1896:	f47f aeeb 	bne.w	1670 <__aeabi_dmul+0x1f8>
    189a:	e712      	b.n	16c2 <__aeabi_dmul+0x24a>

0000189c <__aeabi_d2f>:
    189c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    18a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    18a4:	bf24      	itt	cs
    18a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    18aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    18ae:	d90d      	bls.n	18cc <__aeabi_d2f+0x30>
    18b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    18b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    18b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    18bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    18c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    18c4:	bf08      	it	eq
    18c6:	f020 0001 	biceq.w	r0, r0, #1
    18ca:	4770      	bx	lr
    18cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    18d0:	d121      	bne.n	1916 <__aeabi_d2f+0x7a>
    18d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    18d6:	bfbc      	itt	lt
    18d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    18dc:	4770      	bxlt	lr
    18de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    18e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    18e6:	f1c2 0218 	rsb	r2, r2, #24
    18ea:	f1c2 0c20 	rsb	ip, r2, #32
    18ee:	fa10 f30c 	lsls.w	r3, r0, ip
    18f2:	fa20 f002 	lsr.w	r0, r0, r2
    18f6:	bf18      	it	ne
    18f8:	f040 0001 	orrne.w	r0, r0, #1
    18fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    1904:	fa03 fc0c 	lsl.w	ip, r3, ip
    1908:	ea40 000c 	orr.w	r0, r0, ip
    190c:	fa23 f302 	lsr.w	r3, r3, r2
    1910:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1914:	e7cc      	b.n	18b0 <__aeabi_d2f+0x14>
    1916:	ea7f 5362 	mvns.w	r3, r2, asr #21
    191a:	d107      	bne.n	192c <__aeabi_d2f+0x90>
    191c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    1920:	bf1e      	ittt	ne
    1922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    1926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    192a:	4770      	bxne	lr
    192c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    1930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    1934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1938:	4770      	bx	lr
    193a:	bf00      	nop

0000193c <__aeabi_frsub>:
    193c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    1940:	e002      	b.n	1948 <__addsf3>
    1942:	bf00      	nop

00001944 <__aeabi_fsub>:
    1944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00001948 <__addsf3>:
    1948:	0042      	lsls	r2, r0, #1
    194a:	bf1f      	itttt	ne
    194c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    1950:	ea92 0f03 	teqne	r2, r3
    1954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    1958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    195c:	d06a      	beq.n	1a34 <__addsf3+0xec>
    195e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    1962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    1966:	bfc1      	itttt	gt
    1968:	18d2      	addgt	r2, r2, r3
    196a:	4041      	eorgt	r1, r0
    196c:	4048      	eorgt	r0, r1
    196e:	4041      	eorgt	r1, r0
    1970:	bfb8      	it	lt
    1972:	425b      	neglt	r3, r3
    1974:	2b19      	cmp	r3, #25
    1976:	bf88      	it	hi
    1978:	4770      	bxhi	lr
    197a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    197e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1986:	bf18      	it	ne
    1988:	4240      	negne	r0, r0
    198a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    198e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    1992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1996:	bf18      	it	ne
    1998:	4249      	negne	r1, r1
    199a:	ea92 0f03 	teq	r2, r3
    199e:	d03f      	beq.n	1a20 <__addsf3+0xd8>
    19a0:	f1a2 0201 	sub.w	r2, r2, #1
    19a4:	fa41 fc03 	asr.w	ip, r1, r3
    19a8:	eb10 000c 	adds.w	r0, r0, ip
    19ac:	f1c3 0320 	rsb	r3, r3, #32
    19b0:	fa01 f103 	lsl.w	r1, r1, r3
    19b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    19b8:	d502      	bpl.n	19c0 <__addsf3+0x78>
    19ba:	4249      	negs	r1, r1
    19bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    19c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    19c4:	d313      	bcc.n	19ee <__addsf3+0xa6>
    19c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    19ca:	d306      	bcc.n	19da <__addsf3+0x92>
    19cc:	0840      	lsrs	r0, r0, #1
    19ce:	ea4f 0131 	mov.w	r1, r1, rrx
    19d2:	f102 0201 	add.w	r2, r2, #1
    19d6:	2afe      	cmp	r2, #254	; 0xfe
    19d8:	d251      	bcs.n	1a7e <__addsf3+0x136>
    19da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    19de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    19e2:	bf08      	it	eq
    19e4:	f020 0001 	biceq.w	r0, r0, #1
    19e8:	ea40 0003 	orr.w	r0, r0, r3
    19ec:	4770      	bx	lr
    19ee:	0049      	lsls	r1, r1, #1
    19f0:	eb40 0000 	adc.w	r0, r0, r0
    19f4:	3a01      	subs	r2, #1
    19f6:	bf28      	it	cs
    19f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    19fc:	d2ed      	bcs.n	19da <__addsf3+0x92>
    19fe:	fab0 fc80 	clz	ip, r0
    1a02:	f1ac 0c08 	sub.w	ip, ip, #8
    1a06:	ebb2 020c 	subs.w	r2, r2, ip
    1a0a:	fa00 f00c 	lsl.w	r0, r0, ip
    1a0e:	bfaa      	itet	ge
    1a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    1a14:	4252      	neglt	r2, r2
    1a16:	4318      	orrge	r0, r3
    1a18:	bfbc      	itt	lt
    1a1a:	40d0      	lsrlt	r0, r2
    1a1c:	4318      	orrlt	r0, r3
    1a1e:	4770      	bx	lr
    1a20:	f092 0f00 	teq	r2, #0
    1a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    1a28:	bf06      	itte	eq
    1a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    1a2e:	3201      	addeq	r2, #1
    1a30:	3b01      	subne	r3, #1
    1a32:	e7b5      	b.n	19a0 <__addsf3+0x58>
    1a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
    1a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    1a3c:	bf18      	it	ne
    1a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    1a42:	d021      	beq.n	1a88 <__addsf3+0x140>
    1a44:	ea92 0f03 	teq	r2, r3
    1a48:	d004      	beq.n	1a54 <__addsf3+0x10c>
    1a4a:	f092 0f00 	teq	r2, #0
    1a4e:	bf08      	it	eq
    1a50:	4608      	moveq	r0, r1
    1a52:	4770      	bx	lr
    1a54:	ea90 0f01 	teq	r0, r1
    1a58:	bf1c      	itt	ne
    1a5a:	2000      	movne	r0, #0
    1a5c:	4770      	bxne	lr
    1a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    1a62:	d104      	bne.n	1a6e <__addsf3+0x126>
    1a64:	0040      	lsls	r0, r0, #1
    1a66:	bf28      	it	cs
    1a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    1a6c:	4770      	bx	lr
    1a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    1a72:	bf3c      	itt	cc
    1a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    1a78:	4770      	bxcc	lr
    1a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    1a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    1a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1a86:	4770      	bx	lr
    1a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
    1a8c:	bf16      	itet	ne
    1a8e:	4608      	movne	r0, r1
    1a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    1a94:	4601      	movne	r1, r0
    1a96:	0242      	lsls	r2, r0, #9
    1a98:	bf06      	itte	eq
    1a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    1a9e:	ea90 0f01 	teqeq	r0, r1
    1aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    1aa6:	4770      	bx	lr

00001aa8 <__aeabi_ui2f>:
    1aa8:	f04f 0300 	mov.w	r3, #0
    1aac:	e004      	b.n	1ab8 <__aeabi_i2f+0x8>
    1aae:	bf00      	nop

00001ab0 <__aeabi_i2f>:
    1ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    1ab4:	bf48      	it	mi
    1ab6:	4240      	negmi	r0, r0
    1ab8:	ea5f 0c00 	movs.w	ip, r0
    1abc:	bf08      	it	eq
    1abe:	4770      	bxeq	lr
    1ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    1ac4:	4601      	mov	r1, r0
    1ac6:	f04f 0000 	mov.w	r0, #0
    1aca:	e01c      	b.n	1b06 <__aeabi_l2f+0x2a>

00001acc <__aeabi_ul2f>:
    1acc:	ea50 0201 	orrs.w	r2, r0, r1
    1ad0:	bf08      	it	eq
    1ad2:	4770      	bxeq	lr
    1ad4:	f04f 0300 	mov.w	r3, #0
    1ad8:	e00a      	b.n	1af0 <__aeabi_l2f+0x14>
    1ada:	bf00      	nop

00001adc <__aeabi_l2f>:
    1adc:	ea50 0201 	orrs.w	r2, r0, r1
    1ae0:	bf08      	it	eq
    1ae2:	4770      	bxeq	lr
    1ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    1ae8:	d502      	bpl.n	1af0 <__aeabi_l2f+0x14>
    1aea:	4240      	negs	r0, r0
    1aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1af0:	ea5f 0c01 	movs.w	ip, r1
    1af4:	bf02      	ittt	eq
    1af6:	4684      	moveq	ip, r0
    1af8:	4601      	moveq	r1, r0
    1afa:	2000      	moveq	r0, #0
    1afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    1b00:	bf08      	it	eq
    1b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    1b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    1b0a:	fabc f28c 	clz	r2, ip
    1b0e:	3a08      	subs	r2, #8
    1b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    1b14:	db10      	blt.n	1b38 <__aeabi_l2f+0x5c>
    1b16:	fa01 fc02 	lsl.w	ip, r1, r2
    1b1a:	4463      	add	r3, ip
    1b1c:	fa00 fc02 	lsl.w	ip, r0, r2
    1b20:	f1c2 0220 	rsb	r2, r2, #32
    1b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    1b28:	fa20 f202 	lsr.w	r2, r0, r2
    1b2c:	eb43 0002 	adc.w	r0, r3, r2
    1b30:	bf08      	it	eq
    1b32:	f020 0001 	biceq.w	r0, r0, #1
    1b36:	4770      	bx	lr
    1b38:	f102 0220 	add.w	r2, r2, #32
    1b3c:	fa01 fc02 	lsl.w	ip, r1, r2
    1b40:	f1c2 0220 	rsb	r2, r2, #32
    1b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    1b48:	fa21 f202 	lsr.w	r2, r1, r2
    1b4c:	eb43 0002 	adc.w	r0, r3, r2
    1b50:	bf08      	it	eq
    1b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    1b56:	4770      	bx	lr

00001b58 <__aeabi_fmul>:
    1b58:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    1b60:	bf1e      	ittt	ne
    1b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    1b66:	ea92 0f0c 	teqne	r2, ip
    1b6a:	ea93 0f0c 	teqne	r3, ip
    1b6e:	d06f      	beq.n	1c50 <__aeabi_fmul+0xf8>
    1b70:	441a      	add	r2, r3
    1b72:	ea80 0c01 	eor.w	ip, r0, r1
    1b76:	0240      	lsls	r0, r0, #9
    1b78:	bf18      	it	ne
    1b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    1b7e:	d01e      	beq.n	1bbe <__aeabi_fmul+0x66>
    1b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    1b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    1b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    1b8c:	fba0 3101 	umull	r3, r1, r0, r1
    1b90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    1b94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    1b98:	bf3e      	ittt	cc
    1b9a:	0049      	lslcc	r1, r1, #1
    1b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    1ba0:	005b      	lslcc	r3, r3, #1
    1ba2:	ea40 0001 	orr.w	r0, r0, r1
    1ba6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    1baa:	2afd      	cmp	r2, #253	; 0xfd
    1bac:	d81d      	bhi.n	1bea <__aeabi_fmul+0x92>
    1bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    1bb6:	bf08      	it	eq
    1bb8:	f020 0001 	biceq.w	r0, r0, #1
    1bbc:	4770      	bx	lr
    1bbe:	f090 0f00 	teq	r0, #0
    1bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    1bc6:	bf08      	it	eq
    1bc8:	0249      	lsleq	r1, r1, #9
    1bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    1bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    1bd2:	3a7f      	subs	r2, #127	; 0x7f
    1bd4:	bfc2      	ittt	gt
    1bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    1bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    1bde:	4770      	bxgt	lr
    1be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1be4:	f04f 0300 	mov.w	r3, #0
    1be8:	3a01      	subs	r2, #1
    1bea:	dc5d      	bgt.n	1ca8 <__aeabi_fmul+0x150>
    1bec:	f112 0f19 	cmn.w	r2, #25
    1bf0:	bfdc      	itt	le
    1bf2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    1bf6:	4770      	bxle	lr
    1bf8:	f1c2 0200 	rsb	r2, r2, #0
    1bfc:	0041      	lsls	r1, r0, #1
    1bfe:	fa21 f102 	lsr.w	r1, r1, r2
    1c02:	f1c2 0220 	rsb	r2, r2, #32
    1c06:	fa00 fc02 	lsl.w	ip, r0, r2
    1c0a:	ea5f 0031 	movs.w	r0, r1, rrx
    1c0e:	f140 0000 	adc.w	r0, r0, #0
    1c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    1c16:	bf08      	it	eq
    1c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    1c1c:	4770      	bx	lr
    1c1e:	f092 0f00 	teq	r2, #0
    1c22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    1c26:	bf02      	ittt	eq
    1c28:	0040      	lsleq	r0, r0, #1
    1c2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    1c2e:	3a01      	subeq	r2, #1
    1c30:	d0f9      	beq.n	1c26 <__aeabi_fmul+0xce>
    1c32:	ea40 000c 	orr.w	r0, r0, ip
    1c36:	f093 0f00 	teq	r3, #0
    1c3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    1c3e:	bf02      	ittt	eq
    1c40:	0049      	lsleq	r1, r1, #1
    1c42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    1c46:	3b01      	subeq	r3, #1
    1c48:	d0f9      	beq.n	1c3e <__aeabi_fmul+0xe6>
    1c4a:	ea41 010c 	orr.w	r1, r1, ip
    1c4e:	e78f      	b.n	1b70 <__aeabi_fmul+0x18>
    1c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    1c54:	ea92 0f0c 	teq	r2, ip
    1c58:	bf18      	it	ne
    1c5a:	ea93 0f0c 	teqne	r3, ip
    1c5e:	d00a      	beq.n	1c76 <__aeabi_fmul+0x11e>
    1c60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    1c64:	bf18      	it	ne
    1c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    1c6a:	d1d8      	bne.n	1c1e <__aeabi_fmul+0xc6>
    1c6c:	ea80 0001 	eor.w	r0, r0, r1
    1c70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    1c74:	4770      	bx	lr
    1c76:	f090 0f00 	teq	r0, #0
    1c7a:	bf17      	itett	ne
    1c7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    1c80:	4608      	moveq	r0, r1
    1c82:	f091 0f00 	teqne	r1, #0
    1c86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    1c8a:	d014      	beq.n	1cb6 <__aeabi_fmul+0x15e>
    1c8c:	ea92 0f0c 	teq	r2, ip
    1c90:	d101      	bne.n	1c96 <__aeabi_fmul+0x13e>
    1c92:	0242      	lsls	r2, r0, #9
    1c94:	d10f      	bne.n	1cb6 <__aeabi_fmul+0x15e>
    1c96:	ea93 0f0c 	teq	r3, ip
    1c9a:	d103      	bne.n	1ca4 <__aeabi_fmul+0x14c>
    1c9c:	024b      	lsls	r3, r1, #9
    1c9e:	bf18      	it	ne
    1ca0:	4608      	movne	r0, r1
    1ca2:	d108      	bne.n	1cb6 <__aeabi_fmul+0x15e>
    1ca4:	ea80 0001 	eor.w	r0, r0, r1
    1ca8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    1cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    1cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1cb4:	4770      	bx	lr
    1cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    1cba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    1cbe:	4770      	bx	lr

00001cc0 <__aeabi_fdiv>:
    1cc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    1cc8:	bf1e      	ittt	ne
    1cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    1cce:	ea92 0f0c 	teqne	r2, ip
    1cd2:	ea93 0f0c 	teqne	r3, ip
    1cd6:	d069      	beq.n	1dac <__aeabi_fdiv+0xec>
    1cd8:	eba2 0203 	sub.w	r2, r2, r3
    1cdc:	ea80 0c01 	eor.w	ip, r0, r1
    1ce0:	0249      	lsls	r1, r1, #9
    1ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
    1ce6:	d037      	beq.n	1d58 <__aeabi_fdiv+0x98>
    1ce8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    1cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    1cf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    1cf8:	428b      	cmp	r3, r1
    1cfa:	bf38      	it	cc
    1cfc:	005b      	lslcc	r3, r3, #1
    1cfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    1d02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    1d06:	428b      	cmp	r3, r1
    1d08:	bf24      	itt	cs
    1d0a:	1a5b      	subcs	r3, r3, r1
    1d0c:	ea40 000c 	orrcs.w	r0, r0, ip
    1d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    1d14:	bf24      	itt	cs
    1d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    1d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    1d22:	bf24      	itt	cs
    1d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    1d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    1d30:	bf24      	itt	cs
    1d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    1d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    1d3a:	011b      	lsls	r3, r3, #4
    1d3c:	bf18      	it	ne
    1d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    1d42:	d1e0      	bne.n	1d06 <__aeabi_fdiv+0x46>
    1d44:	2afd      	cmp	r2, #253	; 0xfd
    1d46:	f63f af50 	bhi.w	1bea <__aeabi_fmul+0x92>
    1d4a:	428b      	cmp	r3, r1
    1d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    1d50:	bf08      	it	eq
    1d52:	f020 0001 	biceq.w	r0, r0, #1
    1d56:	4770      	bx	lr
    1d58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    1d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    1d60:	327f      	adds	r2, #127	; 0x7f
    1d62:	bfc2      	ittt	gt
    1d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    1d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    1d6c:	4770      	bxgt	lr
    1d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1d72:	f04f 0300 	mov.w	r3, #0
    1d76:	3a01      	subs	r2, #1
    1d78:	e737      	b.n	1bea <__aeabi_fmul+0x92>
    1d7a:	f092 0f00 	teq	r2, #0
    1d7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    1d82:	bf02      	ittt	eq
    1d84:	0040      	lsleq	r0, r0, #1
    1d86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    1d8a:	3a01      	subeq	r2, #1
    1d8c:	d0f9      	beq.n	1d82 <__aeabi_fdiv+0xc2>
    1d8e:	ea40 000c 	orr.w	r0, r0, ip
    1d92:	f093 0f00 	teq	r3, #0
    1d96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    1d9a:	bf02      	ittt	eq
    1d9c:	0049      	lsleq	r1, r1, #1
    1d9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    1da2:	3b01      	subeq	r3, #1
    1da4:	d0f9      	beq.n	1d9a <__aeabi_fdiv+0xda>
    1da6:	ea41 010c 	orr.w	r1, r1, ip
    1daa:	e795      	b.n	1cd8 <__aeabi_fdiv+0x18>
    1dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    1db0:	ea92 0f0c 	teq	r2, ip
    1db4:	d108      	bne.n	1dc8 <__aeabi_fdiv+0x108>
    1db6:	0242      	lsls	r2, r0, #9
    1db8:	f47f af7d 	bne.w	1cb6 <__aeabi_fmul+0x15e>
    1dbc:	ea93 0f0c 	teq	r3, ip
    1dc0:	f47f af70 	bne.w	1ca4 <__aeabi_fmul+0x14c>
    1dc4:	4608      	mov	r0, r1
    1dc6:	e776      	b.n	1cb6 <__aeabi_fmul+0x15e>
    1dc8:	ea93 0f0c 	teq	r3, ip
    1dcc:	d104      	bne.n	1dd8 <__aeabi_fdiv+0x118>
    1dce:	024b      	lsls	r3, r1, #9
    1dd0:	f43f af4c 	beq.w	1c6c <__aeabi_fmul+0x114>
    1dd4:	4608      	mov	r0, r1
    1dd6:	e76e      	b.n	1cb6 <__aeabi_fmul+0x15e>
    1dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    1ddc:	bf18      	it	ne
    1dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    1de2:	d1ca      	bne.n	1d7a <__aeabi_fdiv+0xba>
    1de4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    1de8:	f47f af5c 	bne.w	1ca4 <__aeabi_fmul+0x14c>
    1dec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    1df0:	f47f af3c 	bne.w	1c6c <__aeabi_fmul+0x114>
    1df4:	e75f      	b.n	1cb6 <__aeabi_fmul+0x15e>
    1df6:	bf00      	nop

00001df8 <__aeabi_f2uiz>:
    1df8:	0042      	lsls	r2, r0, #1
    1dfa:	d20e      	bcs.n	1e1a <__aeabi_f2uiz+0x22>
    1dfc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    1e00:	d30b      	bcc.n	1e1a <__aeabi_f2uiz+0x22>
    1e02:	f04f 039e 	mov.w	r3, #158	; 0x9e
    1e06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    1e0a:	d409      	bmi.n	1e20 <__aeabi_f2uiz+0x28>
    1e0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
    1e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1e14:	fa23 f002 	lsr.w	r0, r3, r2
    1e18:	4770      	bx	lr
    1e1a:	f04f 0000 	mov.w	r0, #0
    1e1e:	4770      	bx	lr
    1e20:	f112 0f61 	cmn.w	r2, #97	; 0x61
    1e24:	d101      	bne.n	1e2a <__aeabi_f2uiz+0x32>
    1e26:	0242      	lsls	r2, r0, #9
    1e28:	d102      	bne.n	1e30 <__aeabi_f2uiz+0x38>
    1e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e2e:	4770      	bx	lr
    1e30:	f04f 0000 	mov.w	r0, #0
    1e34:	4770      	bx	lr
    1e36:	bf00      	nop

00001e38 <__aeabi_uldivmod>:
    1e38:	b953      	cbnz	r3, 1e50 <__aeabi_uldivmod+0x18>
    1e3a:	b94a      	cbnz	r2, 1e50 <__aeabi_uldivmod+0x18>
    1e3c:	2900      	cmp	r1, #0
    1e3e:	bf08      	it	eq
    1e40:	2800      	cmpeq	r0, #0
    1e42:	bf1c      	itt	ne
    1e44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1e48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1e4c:	f000 b80c 	b.w	1e68 <__aeabi_idiv0>
    1e50:	f1ad 0c08 	sub.w	ip, sp, #8
    1e54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1e58:	f000 f808 	bl	1e6c <__udivmoddi4>
    1e5c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1e64:	b004      	add	sp, #16
    1e66:	4770      	bx	lr

00001e68 <__aeabi_idiv0>:
    1e68:	4770      	bx	lr
    1e6a:	bf00      	nop

00001e6c <__udivmoddi4>:
    1e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e70:	4686      	mov	lr, r0
    1e72:	468c      	mov	ip, r1
    1e74:	4608      	mov	r0, r1
    1e76:	9e08      	ldr	r6, [sp, #32]
    1e78:	4615      	mov	r5, r2
    1e7a:	4674      	mov	r4, lr
    1e7c:	4619      	mov	r1, r3
    1e7e:	2b00      	cmp	r3, #0
    1e80:	f040 80c2 	bne.w	2008 <__udivmoddi4+0x19c>
    1e84:	4285      	cmp	r5, r0
    1e86:	fab2 f282 	clz	r2, r2
    1e8a:	d945      	bls.n	1f18 <__udivmoddi4+0xac>
    1e8c:	b14a      	cbz	r2, 1ea2 <__udivmoddi4+0x36>
    1e8e:	f1c2 0320 	rsb	r3, r2, #32
    1e92:	fa00 fc02 	lsl.w	ip, r0, r2
    1e96:	fa2e f303 	lsr.w	r3, lr, r3
    1e9a:	4095      	lsls	r5, r2
    1e9c:	ea43 0c0c 	orr.w	ip, r3, ip
    1ea0:	4094      	lsls	r4, r2
    1ea2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1ea6:	b2a8      	uxth	r0, r5
    1ea8:	fbbc f8fe 	udiv	r8, ip, lr
    1eac:	0c23      	lsrs	r3, r4, #16
    1eae:	fb0e cc18 	mls	ip, lr, r8, ip
    1eb2:	fb08 f900 	mul.w	r9, r8, r0
    1eb6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    1eba:	4599      	cmp	r9, r3
    1ebc:	d928      	bls.n	1f10 <__udivmoddi4+0xa4>
    1ebe:	18eb      	adds	r3, r5, r3
    1ec0:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    1ec4:	d204      	bcs.n	1ed0 <__udivmoddi4+0x64>
    1ec6:	4599      	cmp	r9, r3
    1ec8:	d902      	bls.n	1ed0 <__udivmoddi4+0x64>
    1eca:	f1a8 0702 	sub.w	r7, r8, #2
    1ece:	442b      	add	r3, r5
    1ed0:	eba3 0309 	sub.w	r3, r3, r9
    1ed4:	b2a4      	uxth	r4, r4
    1ed6:	fbb3 fcfe 	udiv	ip, r3, lr
    1eda:	fb0e 331c 	mls	r3, lr, ip, r3
    1ede:	fb0c f000 	mul.w	r0, ip, r0
    1ee2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1ee6:	42a0      	cmp	r0, r4
    1ee8:	d914      	bls.n	1f14 <__udivmoddi4+0xa8>
    1eea:	192c      	adds	r4, r5, r4
    1eec:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    1ef0:	d204      	bcs.n	1efc <__udivmoddi4+0x90>
    1ef2:	42a0      	cmp	r0, r4
    1ef4:	d902      	bls.n	1efc <__udivmoddi4+0x90>
    1ef6:	f1ac 0302 	sub.w	r3, ip, #2
    1efa:	442c      	add	r4, r5
    1efc:	1a24      	subs	r4, r4, r0
    1efe:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    1f02:	b11e      	cbz	r6, 1f0c <__udivmoddi4+0xa0>
    1f04:	40d4      	lsrs	r4, r2
    1f06:	2300      	movs	r3, #0
    1f08:	6034      	str	r4, [r6, #0]
    1f0a:	6073      	str	r3, [r6, #4]
    1f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f10:	4647      	mov	r7, r8
    1f12:	e7dd      	b.n	1ed0 <__udivmoddi4+0x64>
    1f14:	4663      	mov	r3, ip
    1f16:	e7f1      	b.n	1efc <__udivmoddi4+0x90>
    1f18:	bb92      	cbnz	r2, 1f80 <__udivmoddi4+0x114>
    1f1a:	1b43      	subs	r3, r0, r5
    1f1c:	2101      	movs	r1, #1
    1f1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1f22:	b2af      	uxth	r7, r5
    1f24:	fbb3 fcfe 	udiv	ip, r3, lr
    1f28:	0c20      	lsrs	r0, r4, #16
    1f2a:	fb0e 331c 	mls	r3, lr, ip, r3
    1f2e:	fb0c f807 	mul.w	r8, ip, r7
    1f32:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    1f36:	4598      	cmp	r8, r3
    1f38:	d962      	bls.n	2000 <__udivmoddi4+0x194>
    1f3a:	18eb      	adds	r3, r5, r3
    1f3c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1f40:	d204      	bcs.n	1f4c <__udivmoddi4+0xe0>
    1f42:	4598      	cmp	r8, r3
    1f44:	d902      	bls.n	1f4c <__udivmoddi4+0xe0>
    1f46:	f1ac 0002 	sub.w	r0, ip, #2
    1f4a:	442b      	add	r3, r5
    1f4c:	eba3 0308 	sub.w	r3, r3, r8
    1f50:	b2a4      	uxth	r4, r4
    1f52:	fbb3 fcfe 	udiv	ip, r3, lr
    1f56:	fb0e 331c 	mls	r3, lr, ip, r3
    1f5a:	fb0c f707 	mul.w	r7, ip, r7
    1f5e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1f62:	42a7      	cmp	r7, r4
    1f64:	d94e      	bls.n	2004 <__udivmoddi4+0x198>
    1f66:	192c      	adds	r4, r5, r4
    1f68:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    1f6c:	d204      	bcs.n	1f78 <__udivmoddi4+0x10c>
    1f6e:	42a7      	cmp	r7, r4
    1f70:	d902      	bls.n	1f78 <__udivmoddi4+0x10c>
    1f72:	f1ac 0302 	sub.w	r3, ip, #2
    1f76:	442c      	add	r4, r5
    1f78:	1be4      	subs	r4, r4, r7
    1f7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1f7e:	e7c0      	b.n	1f02 <__udivmoddi4+0x96>
    1f80:	f1c2 0320 	rsb	r3, r2, #32
    1f84:	fa20 f103 	lsr.w	r1, r0, r3
    1f88:	4095      	lsls	r5, r2
    1f8a:	4090      	lsls	r0, r2
    1f8c:	fa2e f303 	lsr.w	r3, lr, r3
    1f90:	4303      	orrs	r3, r0
    1f92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1f96:	b2af      	uxth	r7, r5
    1f98:	fbb1 fcfe 	udiv	ip, r1, lr
    1f9c:	fb0e 101c 	mls	r0, lr, ip, r1
    1fa0:	0c19      	lsrs	r1, r3, #16
    1fa2:	fb0c f807 	mul.w	r8, ip, r7
    1fa6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1faa:	4588      	cmp	r8, r1
    1fac:	fa04 f402 	lsl.w	r4, r4, r2
    1fb0:	d922      	bls.n	1ff8 <__udivmoddi4+0x18c>
    1fb2:	1869      	adds	r1, r5, r1
    1fb4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1fb8:	d204      	bcs.n	1fc4 <__udivmoddi4+0x158>
    1fba:	4588      	cmp	r8, r1
    1fbc:	d902      	bls.n	1fc4 <__udivmoddi4+0x158>
    1fbe:	f1ac 0002 	sub.w	r0, ip, #2
    1fc2:	4429      	add	r1, r5
    1fc4:	eba1 0108 	sub.w	r1, r1, r8
    1fc8:	b29b      	uxth	r3, r3
    1fca:	fbb1 fcfe 	udiv	ip, r1, lr
    1fce:	fb0e 111c 	mls	r1, lr, ip, r1
    1fd2:	fb0c f707 	mul.w	r7, ip, r7
    1fd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    1fda:	429f      	cmp	r7, r3
    1fdc:	d90e      	bls.n	1ffc <__udivmoddi4+0x190>
    1fde:	18eb      	adds	r3, r5, r3
    1fe0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    1fe4:	d204      	bcs.n	1ff0 <__udivmoddi4+0x184>
    1fe6:	429f      	cmp	r7, r3
    1fe8:	d902      	bls.n	1ff0 <__udivmoddi4+0x184>
    1fea:	f1ac 0102 	sub.w	r1, ip, #2
    1fee:	442b      	add	r3, r5
    1ff0:	1bdb      	subs	r3, r3, r7
    1ff2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1ff6:	e792      	b.n	1f1e <__udivmoddi4+0xb2>
    1ff8:	4660      	mov	r0, ip
    1ffa:	e7e3      	b.n	1fc4 <__udivmoddi4+0x158>
    1ffc:	4661      	mov	r1, ip
    1ffe:	e7f7      	b.n	1ff0 <__udivmoddi4+0x184>
    2000:	4660      	mov	r0, ip
    2002:	e7a3      	b.n	1f4c <__udivmoddi4+0xe0>
    2004:	4663      	mov	r3, ip
    2006:	e7b7      	b.n	1f78 <__udivmoddi4+0x10c>
    2008:	4283      	cmp	r3, r0
    200a:	d906      	bls.n	201a <__udivmoddi4+0x1ae>
    200c:	b916      	cbnz	r6, 2014 <__udivmoddi4+0x1a8>
    200e:	2100      	movs	r1, #0
    2010:	4608      	mov	r0, r1
    2012:	e77b      	b.n	1f0c <__udivmoddi4+0xa0>
    2014:	e9c6 e000 	strd	lr, r0, [r6]
    2018:	e7f9      	b.n	200e <__udivmoddi4+0x1a2>
    201a:	fab3 f783 	clz	r7, r3
    201e:	b98f      	cbnz	r7, 2044 <__udivmoddi4+0x1d8>
    2020:	4283      	cmp	r3, r0
    2022:	d301      	bcc.n	2028 <__udivmoddi4+0x1bc>
    2024:	4572      	cmp	r2, lr
    2026:	d808      	bhi.n	203a <__udivmoddi4+0x1ce>
    2028:	ebbe 0402 	subs.w	r4, lr, r2
    202c:	eb60 0303 	sbc.w	r3, r0, r3
    2030:	2001      	movs	r0, #1
    2032:	469c      	mov	ip, r3
    2034:	b91e      	cbnz	r6, 203e <__udivmoddi4+0x1d2>
    2036:	2100      	movs	r1, #0
    2038:	e768      	b.n	1f0c <__udivmoddi4+0xa0>
    203a:	4638      	mov	r0, r7
    203c:	e7fa      	b.n	2034 <__udivmoddi4+0x1c8>
    203e:	e9c6 4c00 	strd	r4, ip, [r6]
    2042:	e7f8      	b.n	2036 <__udivmoddi4+0x1ca>
    2044:	f1c7 0c20 	rsb	ip, r7, #32
    2048:	40bb      	lsls	r3, r7
    204a:	fa22 f40c 	lsr.w	r4, r2, ip
    204e:	431c      	orrs	r4, r3
    2050:	fa2e f10c 	lsr.w	r1, lr, ip
    2054:	fa20 f30c 	lsr.w	r3, r0, ip
    2058:	40b8      	lsls	r0, r7
    205a:	4301      	orrs	r1, r0
    205c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    2060:	fa0e f507 	lsl.w	r5, lr, r7
    2064:	fbb3 f8f9 	udiv	r8, r3, r9
    2068:	fa1f fe84 	uxth.w	lr, r4
    206c:	fb09 3018 	mls	r0, r9, r8, r3
    2070:	0c0b      	lsrs	r3, r1, #16
    2072:	fb08 fa0e 	mul.w	sl, r8, lr
    2076:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    207a:	459a      	cmp	sl, r3
    207c:	fa02 f207 	lsl.w	r2, r2, r7
    2080:	d940      	bls.n	2104 <__udivmoddi4+0x298>
    2082:	18e3      	adds	r3, r4, r3
    2084:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    2088:	d204      	bcs.n	2094 <__udivmoddi4+0x228>
    208a:	459a      	cmp	sl, r3
    208c:	d902      	bls.n	2094 <__udivmoddi4+0x228>
    208e:	f1a8 0002 	sub.w	r0, r8, #2
    2092:	4423      	add	r3, r4
    2094:	eba3 030a 	sub.w	r3, r3, sl
    2098:	b289      	uxth	r1, r1
    209a:	fbb3 f8f9 	udiv	r8, r3, r9
    209e:	fb09 3318 	mls	r3, r9, r8, r3
    20a2:	fb08 fe0e 	mul.w	lr, r8, lr
    20a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    20aa:	458e      	cmp	lr, r1
    20ac:	d92c      	bls.n	2108 <__udivmoddi4+0x29c>
    20ae:	1861      	adds	r1, r4, r1
    20b0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    20b4:	d204      	bcs.n	20c0 <__udivmoddi4+0x254>
    20b6:	458e      	cmp	lr, r1
    20b8:	d902      	bls.n	20c0 <__udivmoddi4+0x254>
    20ba:	f1a8 0302 	sub.w	r3, r8, #2
    20be:	4421      	add	r1, r4
    20c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    20c4:	fba0 9802 	umull	r9, r8, r0, r2
    20c8:	eba1 010e 	sub.w	r1, r1, lr
    20cc:	4541      	cmp	r1, r8
    20ce:	46ce      	mov	lr, r9
    20d0:	4643      	mov	r3, r8
    20d2:	d302      	bcc.n	20da <__udivmoddi4+0x26e>
    20d4:	d106      	bne.n	20e4 <__udivmoddi4+0x278>
    20d6:	454d      	cmp	r5, r9
    20d8:	d204      	bcs.n	20e4 <__udivmoddi4+0x278>
    20da:	ebb9 0e02 	subs.w	lr, r9, r2
    20de:	eb68 0304 	sbc.w	r3, r8, r4
    20e2:	3801      	subs	r0, #1
    20e4:	2e00      	cmp	r6, #0
    20e6:	d0a6      	beq.n	2036 <__udivmoddi4+0x1ca>
    20e8:	ebb5 020e 	subs.w	r2, r5, lr
    20ec:	eb61 0103 	sbc.w	r1, r1, r3
    20f0:	fa01 fc0c 	lsl.w	ip, r1, ip
    20f4:	fa22 f307 	lsr.w	r3, r2, r7
    20f8:	ea4c 0303 	orr.w	r3, ip, r3
    20fc:	40f9      	lsrs	r1, r7
    20fe:	e9c6 3100 	strd	r3, r1, [r6]
    2102:	e798      	b.n	2036 <__udivmoddi4+0x1ca>
    2104:	4640      	mov	r0, r8
    2106:	e7c5      	b.n	2094 <__udivmoddi4+0x228>
    2108:	4643      	mov	r3, r8
    210a:	e7d9      	b.n	20c0 <__udivmoddi4+0x254>

0000210c <myThread1>:

	return 0;
}

void myThread1(void *, void *, void *)
{
    210c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (!device_is_ready(sh1106))
    210e:	4c22      	ldr	r4, [pc, #136]	; (2198 <myThread1+0x8c>)
    2110:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    2112:	f00b fcca 	bl	daaa <z_device_is_ready>
    2116:	b918      	cbnz	r0, 2120 <myThread1+0x14>
	{
		printk("Failed to initialize sh1106 display\n");
    2118:	4820      	ldr	r0, [pc, #128]	; (219c <myThread1+0x90>)
    211a:	f009 fc7c 	bl	ba16 <printk>
		while (1)
    211e:	e7fe      	b.n	211e <myThread1+0x12>
			;
	}

	console_getline_init();
    2120:	f002 fdfc 	bl	4d1c <console_getline_init>

	oled_displayOn(sh1106);
    2124:	6820      	ldr	r0, [r4, #0]
    2126:	f00a f9ac 	bl	c482 <oled_displayOn>
	oled_clearDisplay(sh1106);
    212a:	6820      	ldr	r0, [r4, #0]
    212c:	f00a f9af 	bl	c48e <oled_clearDisplay>
	oled_printString(sh1106, "Powered by Zephyr OS.", 0, 0, 6, false);
    2130:	2300      	movs	r3, #0
    2132:	2206      	movs	r2, #6
    2134:	e9cd 2300 	strd	r2, r3, [sp]
    2138:	4919      	ldr	r1, [pc, #100]	; (21a0 <myThread1+0x94>)
    213a:	6820      	ldr	r0, [r4, #0]
    213c:	461a      	mov	r2, r3
    213e:	f002 fd3f 	bl	4bc0 <oled_printString>

	oled_display(sh1106);
    2142:	6820      	ldr	r0, [r4, #0]
    2144:	f00a f9a0 	bl	c488 <oled_display>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    2148:	2100      	movs	r1, #0
    214a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    214e:	f009 f997 	bl	b480 <z_impl_k_sleep>
	k_msleep(2000);
	oled_clearDisplay(sh1106);
    2152:	6820      	ldr	r0, [r4, #0]
    2154:	f00a f99b 	bl	c48e <oled_clearDisplay>
	oled_displayBmp(sh1106, logo);
    2158:	4912      	ldr	r1, [pc, #72]	; (21a4 <myThread1+0x98>)
    215a:	6820      	ldr	r0, [r4, #0]
    215c:	f002 fd62 	bl	4c24 <oled_displayBmp>
	oled_display(sh1106);
    2160:	6820      	ldr	r0, [r4, #0]
    2162:	f00a f991 	bl	c488 <oled_display>
	oled_clearDisplay(sh1106);
    2166:	6820      	ldr	r0, [r4, #0]
    2168:	f00a f991 	bl	c48e <oled_clearDisplay>
	if (!SdFat_init())
    216c:	f000 fb7e 	bl	286c <SdFat_init>
    2170:	b980      	cbnz	r0, 2194 <myThread1+0x88>
		printk("SdFat init failed\n");
    2172:	480d      	ldr	r0, [pc, #52]	; (21a8 <myThread1+0x9c>)
	else
		printk("SdFat init success\n");
    2174:	f009 fc4f 	bl	ba16 <printk>

	while (1)
	{
		char *s = "";
		s = console_getline();
    2178:	f002 fdb8 	bl	4cec <console_getline>

		oled_printLog(sh1106, s);
    217c:	4601      	mov	r1, r0
		s = console_getline();
    217e:	4605      	mov	r5, r0
		oled_printLog(sh1106, s);
    2180:	6820      	ldr	r0, [r4, #0]
    2182:	f002 fd7f 	bl	4c84 <oled_printLog>
		oled_display(sh1106);
    2186:	6820      	ldr	r0, [r4, #0]
    2188:	f00a f97e 	bl	c488 <oled_display>
		listDir(s);
    218c:	4628      	mov	r0, r5
    218e:	f000 fb21 	bl	27d4 <listDir>
	while (1)
    2192:	e7f1      	b.n	2178 <myThread1+0x6c>
		printk("SdFat init success\n");
    2194:	4805      	ldr	r0, [pc, #20]	; (21ac <myThread1+0xa0>)
    2196:	e7ed      	b.n	2174 <myThread1+0x68>
    2198:	200000b8 	.word	0x200000b8
    219c:	0000e804 	.word	0x0000e804
    21a0:	0000e829 	.word	0x0000e829
    21a4:	0000e876 	.word	0x0000e876
    21a8:	0000e83f 	.word	0x0000e83f
    21ac:	0000e852 	.word	0x0000e852

000021b0 <myThread0>:
	}
}

int myThread0(void *, void *, void *)
{
    21b0:	b538      	push	{r3, r4, r5, lr}
    21b2:	4c10      	ldr	r4, [pc, #64]	; (21f4 <myThread0+0x44>)
    21b4:	4620      	mov	r0, r4
    21b6:	f00b fc78 	bl	daaa <z_device_is_ready>
	int ret;
	if (!gpio_is_ready_dt(&led0))
    21ba:	b1c0      	cbz	r0, 21ee <myThread0+0x3e>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    21bc:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
    21be:	68a5      	ldr	r5, [r4, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    21c0:	6813      	ldr	r3, [r2, #0]
    21c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    21c6:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    21c8:	682b      	ldr	r3, [r5, #0]
    21ca:	4a0b      	ldr	r2, [pc, #44]	; (21f8 <myThread0+0x48>)
    21cc:	2106      	movs	r1, #6
    21ce:	4620      	mov	r0, r4
    21d0:	4798      	blx	r3
		return 0;
	ret = gpio_pin_configure_dt(&led0, GPIO_OUTPUT_INACTIVE);
	if (ret < 0)
    21d2:	2800      	cmp	r0, #0
    21d4:	db0b      	blt.n	21ee <myThread0+0x3e>
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
    21d6:	2140      	movs	r1, #64	; 0x40
    21d8:	696b      	ldr	r3, [r5, #20]
    21da:	4620      	mov	r0, r4
    21dc:	4798      	blx	r3

	while (1)
	{

		ret = gpio_pin_toggle_dt(&led0);
		if (ret < 0)
    21de:	2800      	cmp	r0, #0
    21e0:	db05      	blt.n	21ee <myThread0+0x3e>
    21e2:	2100      	movs	r1, #0
    21e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    21e8:	f009 f94a 	bl	b480 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    21ec:	e7f3      	b.n	21d6 <myThread0+0x26>
			return 0;
		k_msleep(SLEEP_TIME_MS);
		// k_sem_give(&sem);
	}
	return 0;
}
    21ee:	2000      	movs	r0, #0
    21f0:	bd38      	pop	{r3, r4, r5, pc}
    21f2:	bf00      	nop
    21f4:	0000e1ec 	.word	0x0000e1ec
    21f8:	000a0001 	.word	0x000a0001

000021fc <startSecOfClus>:
    SD_writeSector(fatEntLoc.fatSecNum, SD_buff);
}

static uint32_t startSecOfClus(uint32_t cluster_index)
{
    return (DataStartSector + (cluster_index - 2) * params.BPB_SecPerClus);
    21fc:	4a03      	ldr	r2, [pc, #12]	; (220c <startSecOfClus+0x10>)
    21fe:	1e83      	subs	r3, r0, #2
    2200:	7890      	ldrb	r0, [r2, #2]
    2202:	4a03      	ldr	r2, [pc, #12]	; (2210 <startSecOfClus+0x14>)
    2204:	6812      	ldr	r2, [r2, #0]
}
    2206:	fb00 2003 	mla	r0, r0, r3, r2
    220a:	4770      	bx	lr
    220c:	20000b2c 	.word	0x20000b2c
    2210:	20000924 	.word	0x20000924

00002214 <SD_readSector.constprop.0>:
static inline int SD_readSector(uint32_t address, uint8_t *rxbuf)
    2214:	4602      	mov	r2, r0
    return sdmmc_read_blocks(&sdcard, rxbuf, address, 1);
    2216:	4902      	ldr	r1, [pc, #8]	; (2220 <SD_readSector.constprop.0+0xc>)
    2218:	4802      	ldr	r0, [pc, #8]	; (2224 <SD_readSector.constprop.0+0x10>)
    221a:	2301      	movs	r3, #1
    221c:	f00a bbab 	b.w	c976 <sdmmc_read_blocks>
    2220:	2000092c 	.word	0x2000092c
    2224:	20000860 	.word	0x20000860

00002228 <dispFile.constprop.0.isra.0>:
    }

    return temp;
}

static void dispFile(myFile p_file, char *fileName, uint8_t tab)
    2228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{
    for (uint8_t i = 0; i < tab; i++)
        printk("    ");
    222c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 2318 <dispFile.constprop.0.isra.0+0xf0>
static void dispFile(myFile p_file, char *fileName, uint8_t tab)
    2230:	f89d 9020 	ldrb.w	r9, [sp, #32]
    2234:	4606      	mov	r6, r0
    2236:	460d      	mov	r5, r1
    2238:	4614      	mov	r4, r2
    223a:	461f      	mov	r7, r3
    for (uint8_t i = 0; i < tab; i++)
    223c:	f04f 0800 	mov.w	r8, #0
    2240:	45c1      	cmp	r9, r8
    2242:	d163      	bne.n	230c <dispFile.constprop.0.isra.0+0xe4>

    printk("%s", fileName);
    2244:	4935      	ldr	r1, [pc, #212]	; (231c <dispFile.constprop.0.isra.0+0xf4>)
    2246:	4836      	ldr	r0, [pc, #216]	; (2320 <dispFile.constprop.0.isra.0+0xf8>)
    2248:	f009 fbe5 	bl	ba16 <printk>

    if (isDirectory(p_file))
    224c:	f016 0f18 	tst.w	r6, #24
    2250:	d002      	beq.n	2258 <dispFile.constprop.0.isra.0+0x30>
        printk("/");
    2252:	4834      	ldr	r0, [pc, #208]	; (2324 <dispFile.constprop.0.isra.0+0xfc>)
    2254:	f009 fbdf 	bl	ba16 <printk>
    uint8_t month = (date & 0x01E0) >> 5;
    2258:	f3c4 1843 	ubfx	r8, r4, #5, #4
    uint8_t day = (date & 0x001F);
    225c:	f004 091f 	and.w	r9, r4, #31
    year += (date & 0xF700) >> 9;
    2260:	1264      	asrs	r4, r4, #9
    printk("     ");
    2262:	4831      	ldr	r0, [pc, #196]	; (2328 <dispFile.constprop.0.isra.0+0x100>)
    printk(month < 10 ? "0%d" : "%d", month);
    2264:	4e31      	ldr	r6, [pc, #196]	; (232c <dispFile.constprop.0.isra.0+0x104>)
    year += (date & 0xF700) >> 9;
    2266:	f004 047b 	and.w	r4, r4, #123	; 0x7b
    printk("     ");
    226a:	f009 fbd4 	bl	ba16 <printk>
    printk("%d", year);
    226e:	f204 71bc 	addw	r1, r4, #1980	; 0x7bc
    2272:	482e      	ldr	r0, [pc, #184]	; (232c <dispFile.constprop.0.isra.0+0x104>)
    printk(month < 10 ? "0%d" : "%d", month);
    2274:	4c2e      	ldr	r4, [pc, #184]	; (2330 <dispFile.constprop.0.isra.0+0x108>)
    printk("%d", year);
    2276:	f009 fbce 	bl	ba16 <printk>
    printk("-");
    227a:	482e      	ldr	r0, [pc, #184]	; (2334 <dispFile.constprop.0.isra.0+0x10c>)
    227c:	f009 fbcb 	bl	ba16 <printk>
    printk(month < 10 ? "0%d" : "%d", month);
    2280:	4641      	mov	r1, r8
    2282:	f1b8 0f09 	cmp.w	r8, #9
    2286:	bf94      	ite	ls
    2288:	4620      	movls	r0, r4
    228a:	4630      	movhi	r0, r6
    228c:	f009 fbc3 	bl	ba16 <printk>
    printk("-");
    2290:	4828      	ldr	r0, [pc, #160]	; (2334 <dispFile.constprop.0.isra.0+0x10c>)
    2292:	f009 fbc0 	bl	ba16 <printk>
    printk(day < 10 ? "0%d" : "%d", month);
    2296:	4641      	mov	r1, r8
    2298:	f1b9 0f09 	cmp.w	r9, #9
    229c:	bf8c      	ite	hi
    229e:	4630      	movhi	r0, r6
    22a0:	4620      	movls	r0, r4
    22a2:	f009 fbb8 	bl	ba16 <printk>

    displayDate(p_file.DIR_WrtDate);

    printk(" || ");
    22a6:	4824      	ldr	r0, [pc, #144]	; (2338 <dispFile.constprop.0.isra.0+0x110>)
    22a8:	f009 fbb5 	bl	ba16 <printk>
    printk(hours > 10 ? "%d" : "0%d", hours);
    22ac:	0ae9      	lsrs	r1, r5, #11
    22ae:	f5b5 4fb0 	cmp.w	r5, #22528	; 0x5800
    22b2:	bf2c      	ite	cs
    22b4:	4630      	movcs	r0, r6
    22b6:	4620      	movcc	r0, r4
    22b8:	f009 fbad 	bl	ba16 <printk>
    uint8_t minutes = (time & 0x07E0) >> 5;
    22bc:	f3c5 1945 	ubfx	r9, r5, #5, #6
    printk(":");
    22c0:	481e      	ldr	r0, [pc, #120]	; (233c <dispFile.constprop.0.isra.0+0x114>)
    22c2:	f009 fba8 	bl	ba16 <printk>
    uint8_t seconds = (time & 0x001F) * 2;
    22c6:	f005 081f 	and.w	r8, r5, #31
    printk(minutes > 10 ? "%d" : "0%d", minutes);
    22ca:	4649      	mov	r1, r9
    22cc:	f1b9 0f0a 	cmp.w	r9, #10
    22d0:	bf8c      	ite	hi
    22d2:	4630      	movhi	r0, r6
    22d4:	4620      	movls	r0, r4
    22d6:	f009 fb9e 	bl	ba16 <printk>
    uint8_t seconds = (time & 0x001F) * 2;
    22da:	ea4f 0848 	mov.w	r8, r8, lsl #1
    printk(":");
    22de:	4817      	ldr	r0, [pc, #92]	; (233c <dispFile.constprop.0.isra.0+0x114>)
    22e0:	f009 fb99 	bl	ba16 <printk>
    printk(seconds > 10 ? "%d" : "0%d", seconds);
    22e4:	4641      	mov	r1, r8
    22e6:	f1b8 0f0a 	cmp.w	r8, #10
    22ea:	bf8c      	ite	hi
    22ec:	4630      	movhi	r0, r6
    22ee:	4620      	movls	r0, r4
    22f0:	f009 fb91 	bl	ba16 <printk>
    displayTime(p_file.DIR_WrtTime);

    printk(" || ");
    22f4:	4810      	ldr	r0, [pc, #64]	; (2338 <dispFile.constprop.0.isra.0+0x110>)
    22f6:	f009 fb8e 	bl	ba16 <printk>

    printk("%d Bytes", p_file.DIR_FileSize);
    22fa:	4811      	ldr	r0, [pc, #68]	; (2340 <dispFile.constprop.0.isra.0+0x118>)
    22fc:	4639      	mov	r1, r7
    22fe:	f009 fb8a 	bl	ba16 <printk>
    printk(" || ");
    printk("startClus:");
    printk(startCluster(p_file));
    */
    printk("\n");
}
    2302:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printk("\n");
    2306:	480f      	ldr	r0, [pc, #60]	; (2344 <dispFile.constprop.0.isra.0+0x11c>)
    2308:	f009 bb85 	b.w	ba16 <printk>
        printk("    ");
    230c:	4650      	mov	r0, sl
    230e:	f009 fb82 	bl	ba16 <printk>
    for (uint8_t i = 0; i < tab; i++)
    2312:	f108 0801 	add.w	r8, r8, #1
    2316:	e793      	b.n	2240 <dispFile.constprop.0.isra.0+0x18>
    2318:	0000ec80 	.word	0x0000ec80
    231c:	20001ae5 	.word	0x20001ae5
    2320:	0000ec7a 	.word	0x0000ec7a
    2324:	0000ec7d 	.word	0x0000ec7d
    2328:	0000ec7f 	.word	0x0000ec7f
    232c:	0000ec77 	.word	0x0000ec77
    2330:	0000ec76 	.word	0x0000ec76
    2334:	0000ec85 	.word	0x0000ec85
    2338:	0000ec87 	.word	0x0000ec87
    233c:	0000ec8c 	.word	0x0000ec8c
    2340:	0000ec8e 	.word	0x0000ec8e
    2344:	0000ecb2 	.word	0x0000ecb2

00002348 <fatNextClus>:
{
    2348:	b510      	push	{r4, lr}
    fatEntLoc.fatSecNum = FatStartSector + (fat_entry_index * 4 / params.BPB_BytesPerSec);
    234a:	4a07      	ldr	r2, [pc, #28]	; (2368 <fatNextClus+0x20>)
    234c:	8811      	ldrh	r1, [r2, #0]
    234e:	0083      	lsls	r3, r0, #2
    fatEntLoc.fatEntOffset = (fat_entry_index * 4) % params.BPB_BytesPerSec;
    2350:	fbb3 f2f1 	udiv	r2, r3, r1
    2354:	fb01 3412 	mls	r4, r1, r2, r3
    fatEntLoc.fatSecNum = FatStartSector + (fat_entry_index * 4 / params.BPB_BytesPerSec);
    2358:	4b04      	ldr	r3, [pc, #16]	; (236c <fatNextClus+0x24>)
    235a:	6818      	ldr	r0, [r3, #0]
    SD_readSector(fatEntLoc.fatSecNum, SD_buff);
    235c:	4410      	add	r0, r2
    235e:	f7ff ff59 	bl	2214 <SD_readSector.constprop.0>
}
    2362:	4b03      	ldr	r3, [pc, #12]	; (2370 <fatNextClus+0x28>)
    2364:	5918      	ldr	r0, [r3, r4]
    2366:	bd10      	pop	{r4, pc}
    2368:	20000b2c 	.word	0x20000b2c
    236c:	20000928 	.word	0x20000928
    2370:	2000092c 	.word	0x2000092c

00002374 <printContent.isra.0>:
        tempFile.entryIndex = 2;
    }
    return tempFile;
}

static bool printContent(uint32_t startClus, uint32_t size)
    2374:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2378:	460e      	mov	r6, r1
{
    uint32_t charCnt = 0;

    if (startClus == 0 || size == 0)
    237a:	4604      	mov	r4, r0
    237c:	b1a8      	cbz	r0, 23aa <printContent.isra.0+0x36>
    237e:	b1a1      	cbz	r1, 23aa <printContent.isra.0+0x36>
        return 0;
    printk("\n");
    2380:	4818      	ldr	r0, [pc, #96]	; (23e4 <printContent.isra.0+0x70>)

    do
    {

        for (uint8_t i = 0; i < params.BPB_SecPerClus; i++)
    2382:	f8df 9064 	ldr.w	r9, [pc, #100]	; 23e8 <printContent.isra.0+0x74>
        {
            if (SD_readSector(startSecOfClus(startClus) + i, SD_buff) == SD_READ_SUCCESS)
            {
                for (uint16_t c = 0; c < 512; c++)
                {
                    printk("%c", SD_buff[c]);
    2386:	f8df a064 	ldr.w	sl, [pc, #100]	; 23ec <printContent.isra.0+0x78>
    printk("\n");
    238a:	f009 fb44 	bl	ba16 <printk>
    uint32_t charCnt = 0;
    238e:	2500      	movs	r5, #0
        for (uint8_t i = 0; i < params.BPB_SecPerClus; i++)
    2390:	2700      	movs	r7, #0
    2392:	f899 3002 	ldrb.w	r3, [r9, #2]
    2396:	b2f9      	uxtb	r1, r7
    2398:	428b      	cmp	r3, r1
            if (SD_readSector(startSecOfClus(startClus) + i, SD_buff) == SD_READ_SUCCESS)
    239a:	4620      	mov	r0, r4
        for (uint8_t i = 0; i < params.BPB_SecPerClus; i++)
    239c:	d807      	bhi.n	23ae <printContent.isra.0+0x3a>
            else
                return false;
            k_sleep(K_USEC(10));
        }

    } while ((startClus = fatNextClus(startClus)) < FAT_EOC);
    239e:	f7ff ffd3 	bl	2348 <fatNextClus>
    23a2:	4b13      	ldr	r3, [pc, #76]	; (23f0 <printContent.isra.0+0x7c>)
    23a4:	4298      	cmp	r0, r3
    23a6:	4604      	mov	r4, r0
    23a8:	d9f2      	bls.n	2390 <printContent.isra.0+0x1c>

    return true;
}
    23aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (SD_readSector(startSecOfClus(startClus) + i, SD_buff) == SD_READ_SUCCESS)
    23ae:	f7ff ff25 	bl	21fc <startSecOfClus>
    23b2:	4408      	add	r0, r1
    23b4:	f7ff ff2e 	bl	2214 <SD_readSector.constprop.0>
    23b8:	2800      	cmp	r0, #0
    23ba:	d1f6      	bne.n	23aa <printContent.isra.0+0x36>
    23bc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 23f4 <printContent.isra.0+0x80>
    23c0:	f505 7b00 	add.w	fp, r5, #512	; 0x200
                    printk("%c", SD_buff[c]);
    23c4:	f818 1b01 	ldrb.w	r1, [r8], #1
    23c8:	4650      	mov	r0, sl
                    charCnt++;
    23ca:	3501      	adds	r5, #1
                    printk("%c", SD_buff[c]);
    23cc:	f009 fb23 	bl	ba16 <printk>
                    if (charCnt == size)
    23d0:	42ae      	cmp	r6, r5
    23d2:	d0ea      	beq.n	23aa <printContent.isra.0+0x36>
                for (uint16_t c = 0; c < 512; c++)
    23d4:	45ab      	cmp	fp, r5
    23d6:	d1f5      	bne.n	23c4 <printContent.isra.0+0x50>
    23d8:	2001      	movs	r0, #1
    23da:	2100      	movs	r1, #0
    23dc:	f009 f850 	bl	b480 <z_impl_k_sleep>
        for (uint8_t i = 0; i < params.BPB_SecPerClus; i++)
    23e0:	3701      	adds	r7, #1
    23e2:	e7d6      	b.n	2392 <printContent.isra.0+0x1e>
    23e4:	0000ecb2 	.word	0x0000ecb2
    23e8:	20000b2c 	.word	0x20000b2c
    23ec:	0000ec97 	.word	0x0000ec97
    23f0:	0ffffff7 	.word	0x0ffffff7
    23f4:	2000092c 	.word	0x2000092c

000023f8 <rootDir>:
{
    23f8:	b570      	push	{r4, r5, r6, lr}
    SD_readSector(startSecOfClus(params.BPB_RootClus), SD_buff);
    23fa:	4b0c      	ldr	r3, [pc, #48]	; (242c <rootDir+0x34>)
    rootDirectory = *((myFile *)&SD_buff[0]);
    23fc:	4d0c      	ldr	r5, [pc, #48]	; (2430 <rootDir+0x38>)
{
    23fe:	4606      	mov	r6, r0
    SD_readSector(startSecOfClus(params.BPB_RootClus), SD_buff);
    2400:	6958      	ldr	r0, [r3, #20]
    2402:	f7ff fefb 	bl	21fc <startSecOfClus>
    2406:	f7ff ff05 	bl	2214 <SD_readSector.constprop.0>
    rootDirectory = *((myFile *)&SD_buff[0]);
    240a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    240c:	4634      	mov	r4, r6
    240e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    return rootDirectory;
    2418:	2300      	movs	r3, #0
    rootDirectory = *((myFile *)&SD_buff[0]);
    241a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return rootDirectory;
    241e:	82b3      	strh	r3, [r6, #20]
    2420:	2302      	movs	r3, #2
    2422:	8373      	strh	r3, [r6, #26]
    2424:	2301      	movs	r3, #1
    2426:	6233      	str	r3, [r6, #32]
}
    2428:	4630      	mov	r0, r6
    242a:	bd70      	pop	{r4, r5, r6, pc}
    242c:	20000b2c 	.word	0x20000b2c
    2430:	2000092c 	.word	0x2000092c

00002434 <nextFile>:
{
    2434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t sectorIndex = (p_file->entryIndex / 16) % params.BPB_SecPerClus;
    2438:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 2718 <CONFIG_SD_DATA_TIMEOUT+0x8>
    uint32_t startClus = (uint32_t)p_file.DIR_FstClusLO;
    243c:	8b4d      	ldrh	r5, [r1, #26]
    uint8_t sectorIndex = (p_file->entryIndex / 16) % params.BPB_SecPerClus;
    243e:	f899 a002 	ldrb.w	sl, [r9, #2]
    startClus |= ((uint32_t)(p_file.DIR_FstClusHI)) << 16;
    2442:	8a8b      	ldrh	r3, [r1, #20]
    uint8_t sectorIndex = (p_file->entryIndex / 16) % params.BPB_SecPerClus;
    2444:	6a0c      	ldr	r4, [r1, #32]
    uint32_t currentClusterIndex = (p_file->entryIndex / (16 * params.BPB_SecPerClus));
    2446:	4657      	mov	r7, sl
{
    2448:	b0a9      	sub	sp, #164	; 0xa4
    244a:	4680      	mov	r8, r0
    244c:	460e      	mov	r6, r1
    startClus |= ((uint32_t)(p_file.DIR_FstClusHI)) << 16;
    244e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    for (uint8_t i = 0; i < currentClusterIndex; i++)
    2452:	f04f 0b00 	mov.w	fp, #0
    uint32_t currentClusterIndex = (p_file->entryIndex / (16 * params.BPB_SecPerClus));
    2456:	013f      	lsls	r7, r7, #4
    2458:	fbb4 f7f7 	udiv	r7, r4, r7
    for (uint8_t i = 0; i < currentClusterIndex; i++)
    245c:	fa5f f38b 	uxtb.w	r3, fp
    2460:	429f      	cmp	r7, r3
    2462:	d819      	bhi.n	2498 <nextFile+0x64>
    if (!isDirectory(*p_file))
    2464:	7af1      	ldrb	r1, [r6, #11]
    2466:	f011 0718 	ands.w	r7, r1, #24
    246a:	d130      	bne.n	24ce <nextFile+0x9a>
        printk("Not a Dir\n");
    246c:	48ab      	ldr	r0, [pc, #684]	; (271c <CONFIG_SD_DATA_TIMEOUT+0xc>)
    246e:	f009 fad2 	bl	ba16 <printk>
        memset(&temp, 0, sizeof(myFile));
    2472:	222c      	movs	r2, #44	; 0x2c
    2474:	4639      	mov	r1, r7
                                memset(&temp, 0, sizeof(myFile));
    2476:	a803      	add	r0, sp, #12
                                return temp;
    2478:	ad03      	add	r5, sp, #12
                                memset(&temp, 0, sizeof(myFile));
    247a:	f00a f83a 	bl	c4f2 <memset>
                                return temp;
    247e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2480:	4644      	mov	r4, r8
    2482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2488:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    248c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
    2490:	4640      	mov	r0, r8
    2492:	b029      	add	sp, #164	; 0xa4
    2494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        currentClus = fatNextClus(currentClus);
    2498:	4628      	mov	r0, r5
    249a:	f7ff ff55 	bl	2348 <fatNextClus>
        if (currentClus >= FAT_EOC)
    249e:	4aa0      	ldr	r2, [pc, #640]	; (2720 <CONFIG_SD_DATA_TIMEOUT+0x10>)
    24a0:	4290      	cmp	r0, r2
        currentClus = fatNextClus(currentClus);
    24a2:	4605      	mov	r5, r0
        if (currentClus >= FAT_EOC)
    24a4:	f10b 0b01 	add.w	fp, fp, #1
    24a8:	d9d8      	bls.n	245c <nextFile+0x28>
            p_file->entryIndex = 2;
    24aa:	2302      	movs	r3, #2
    24ac:	6233      	str	r3, [r6, #32]
            memset(&temp, 0, sizeof(myFile));
    24ae:	222c      	movs	r2, #44	; 0x2c
    24b0:	2100      	movs	r1, #0
    24b2:	a803      	add	r0, sp, #12
    24b4:	f00a f81d 	bl	c4f2 <memset>
    return temp;
    24b8:	ac03      	add	r4, sp, #12
    24ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    24bc:	4645      	mov	r5, r8
    24be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    24c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    24c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    24c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    24c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    24cc:	e7e0      	b.n	2490 <nextFile+0x5c>
    uint8_t sectorIndex = (p_file->entryIndex / 16) % params.BPB_SecPerClus;
    24ce:	0924      	lsrs	r4, r4, #4
    24d0:	fbb4 f3fa 	udiv	r3, r4, sl
    24d4:	fb0a 4413 	mls	r4, sl, r3, r4
    24d8:	b2e4      	uxtb	r4, r4
        SD_readSector(startSecOfClus(currentClus) + sectorIndex, SD_buff);
    24da:	4628      	mov	r0, r5
    24dc:	f7ff fe8e 	bl	21fc <startSecOfClus>
    24e0:	4420      	add	r0, r4
    24e2:	f7ff fe97 	bl	2214 <SD_readSector.constprop.0>
        temp = *((myFile *)(SD_buff + (p_file->entryIndex % 16) * 32));
    24e6:	f8d6 e020 	ldr.w	lr, [r6, #32]
    24ea:	4b8e      	ldr	r3, [pc, #568]	; (2724 <CONFIG_SD_DATA_TIMEOUT+0x14>)
    24ec:	f00e 070f 	and.w	r7, lr, #15
    24f0:	eb03 1747 	add.w	r7, r3, r7, lsl #5
    24f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    24f6:	f10d 0c0c 	add.w	ip, sp, #12
    24fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    24fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2500:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2504:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    2508:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        if (!isFreeEntry(temp))
    250c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    2510:	29e5      	cmp	r1, #229	; 0xe5
    2512:	f000 80e8 	beq.w	26e6 <nextFile+0x2b2>
            if (isLastEntry(temp))
    2516:	b909      	cbnz	r1, 251c <nextFile+0xe8>
                                memset(&temp, 0, sizeof(myFile));
    2518:	222c      	movs	r2, #44	; 0x2c
    251a:	e7ac      	b.n	2476 <nextFile+0x42>
    if (((file.DIR_attr & ATTR_LONG_NAME_MASK) == ATTR_LONG_FILE_NAME) && (((uint8_t)file.DIR_Name[0] & 0xF0) == 0x40))
    251c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2524:	2b0f      	cmp	r3, #15
                memset(fileName, 0, 128);
    2526:	f04f 0280 	mov.w	r2, #128	; 0x80
    252a:	af0e      	add	r7, sp, #56	; 0x38
    if (((file.DIR_attr & ATTR_LONG_NAME_MASK) == ATTR_LONG_FILE_NAME) && (((uint8_t)file.DIR_Name[0] & 0xF0) == 0x40))
    252c:	f040 8084 	bne.w	2638 <nextFile+0x204>
    2530:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    2534:	2940      	cmp	r1, #64	; 0x40
    2536:	d17f      	bne.n	2638 <nextFile+0x204>
                memset(fileName, 0, 128);
    2538:	2100      	movs	r1, #0
    253a:	487b      	ldr	r0, [pc, #492]	; (2728 <CONFIG_SD_DATA_TIMEOUT+0x18>)
    253c:	f009 ffd9 	bl	c4f2 <memset>
                uint8_t LFN_entryCnt = ((((LFN_entry_t *)&temp)->LDIR_Ord) & 0x0F);
    2540:	f89d a00c 	ldrb.w	sl, [sp, #12]
                char tempName[8][13] = {0};
    2544:	2268      	movs	r2, #104	; 0x68
                uint8_t LFN_entryCnt = ((((LFN_entry_t *)&temp)->LDIR_Ord) & 0x0F);
    2546:	f00a 0a0f 	and.w	sl, sl, #15
                char tempName[8][13] = {0};
    254a:	2100      	movs	r1, #0
    254c:	4638      	mov	r0, r7
    254e:	f009 ffd0 	bl	c4f2 <memset>
                while (LFN_entryCnt)
    2552:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    2556:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    255a:	443b      	add	r3, r7
    255c:	46ba      	mov	sl, r7
    255e:	42bb      	cmp	r3, r7
    2560:	d122      	bne.n	25a8 <nextFile+0x174>
    2562:	4972      	ldr	r1, [pc, #456]	; (272c <CONFIG_SD_DATA_TIMEOUT+0x1c>)
                    fileName[fileNameIndex++] = *(p_name++);
    2564:	4870      	ldr	r0, [pc, #448]	; (2728 <CONFIG_SD_DATA_TIMEOUT+0x18>)
    2566:	780a      	ldrb	r2, [r1, #0]
                while ((*p_name) != '\0')
    2568:	f81a 3b01 	ldrb.w	r3, [sl], #1
    256c:	2b00      	cmp	r3, #0
    256e:	d15f      	bne.n	2630 <nextFile+0x1fc>
                temp = *((myFile *)(SD_buff + (p_file->entryIndex % 16) * 32));
    2570:	f8d6 e020 	ldr.w	lr, [r6, #32]
                fileNameIndex = 0;
    2574:	700b      	strb	r3, [r1, #0]
                temp = *((myFile *)(SD_buff + (p_file->entryIndex % 16) * 32));
    2576:	4b6b      	ldr	r3, [pc, #428]	; (2724 <CONFIG_SD_DATA_TIMEOUT+0x14>)
    2578:	f00e 090f 	and.w	r9, lr, #15
    257c:	eb03 1c49 	add.w	ip, r3, r9, lsl #5
    2580:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    2584:	af03      	add	r7, sp, #12
    2586:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    2588:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    258c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    258e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
                p_file->entryIndex++;
    2592:	f10e 0301 	add.w	r3, lr, #1
                temp = *((myFile *)(SD_buff + (p_file->entryIndex % 16) * 32));
    2596:	e887 0007 	stmia.w	r7, {r0, r1, r2}
                temp.fileEntInf.Cluster = currentClus;
    259a:	950c      	str	r5, [sp, #48]	; 0x30
                temp.fileEntInf.sectorIndex = sectorIndex;
    259c:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
                temp.fileEntInf.entryIndex = p_file->entryIndex % 16;
    25a0:	f88d 9035 	strb.w	r9, [sp, #53]	; 0x35
                p_file->entryIndex++;
    25a4:	6233      	str	r3, [r6, #32]
                if (p_file->entryIndex % 16 == 0)
    25a6:	e787      	b.n	24b8 <nextFile+0x84>
                    LFN_entry_t *entry = (LFN_entry_t *)(SD_buff + (p_file->entryIndex % 16) * 32);
    25a8:	6a31      	ldr	r1, [r6, #32]
    25aa:	485e      	ldr	r0, [pc, #376]	; (2724 <CONFIG_SD_DATA_TIMEOUT+0x14>)
    25ac:	f001 020f 	and.w	r2, r1, #15
    25b0:	eb00 1242 	add.w	r2, r0, r2, lsl #5
                    for (uint8_t i = 0; i < 10; i += 2)
    25b4:	4610      	mov	r0, r2
    25b6:	f1a3 0c0e 	sub.w	ip, r3, #14
    25ba:	f102 0e0a 	add.w	lr, r2, #10
                        tempName[LFN_entryCnt - 1][tempNameIndex++] = entry->LDIR_Name1[i];
    25be:	f890 b001 	ldrb.w	fp, [r0, #1]
    25c2:	f80c bf01 	strb.w	fp, [ip, #1]!
                    for (uint8_t i = 0; i < 10; i += 2)
    25c6:	3002      	adds	r0, #2
    25c8:	4586      	cmp	lr, r0
    25ca:	d1f8      	bne.n	25be <nextFile+0x18a>
    25cc:	2005      	movs	r0, #5
    25ce:	f1a3 0b0d 	sub.w	fp, r3, #13
                        tempName[LFN_entryCnt - 1][tempNameIndex++] = entry->LDIR_Name2[i];
    25d2:	f102 0e04 	add.w	lr, r2, #4
    25d6:	f81e c010 	ldrb.w	ip, [lr, r0, lsl #1]
    25da:	f80b c000 	strb.w	ip, [fp, r0]
                    for (uint8_t i = 0; i < 12; i += 2)
    25de:	3001      	adds	r0, #1
    25e0:	280b      	cmp	r0, #11
    25e2:	d1f8      	bne.n	25d6 <nextFile+0x1a2>
                    p_file->entryIndex++;
    25e4:	3101      	adds	r1, #1
                        tempName[LFN_entryCnt - 1][tempNameIndex++] = entry->LDIR_Name3[i];
    25e6:	7f10      	ldrb	r0, [r2, #28]
    25e8:	7f92      	ldrb	r2, [r2, #30]
                    p_file->entryIndex++;
    25ea:	6231      	str	r1, [r6, #32]
                    if ((p_file->entryIndex % 16) == 0)
    25ec:	f011 010f 	ands.w	r1, r1, #15
                        tempName[LFN_entryCnt - 1][tempNameIndex++] = entry->LDIR_Name3[i];
    25f0:	f803 0c02 	strb.w	r0, [r3, #-2]
    25f4:	f803 2c01 	strb.w	r2, [r3, #-1]
                    if ((p_file->entryIndex % 16) == 0)
    25f8:	d118      	bne.n	262c <nextFile+0x1f8>
                        if (sectorIndex == params.BPB_SecPerClus)
    25fa:	f899 3002 	ldrb.w	r3, [r9, #2]
                        sectorIndex++;
    25fe:	3401      	adds	r4, #1
    2600:	b2e4      	uxtb	r4, r4
                        if (sectorIndex == params.BPB_SecPerClus)
    2602:	42a3      	cmp	r3, r4
    2604:	d10c      	bne.n	2620 <nextFile+0x1ec>
                            currentClus = fatNextClus(currentClus);
    2606:	4628      	mov	r0, r5
    2608:	9101      	str	r1, [sp, #4]
    260a:	f7ff fe9d 	bl	2348 <fatNextClus>
                            if (currentClus > FAT_EOC)
    260e:	4b48      	ldr	r3, [pc, #288]	; (2730 <CONFIG_SD_DATA_TIMEOUT+0x20>)
    2610:	9901      	ldr	r1, [sp, #4]
    2612:	4298      	cmp	r0, r3
                            currentClus = fatNextClus(currentClus);
    2614:	4605      	mov	r5, r0
                            if (currentClus > FAT_EOC)
    2616:	d902      	bls.n	261e <nextFile+0x1ea>
                                p_file->entryIndex = 2;
    2618:	2302      	movs	r3, #2
    261a:	6233      	str	r3, [r6, #32]
    261c:	e77c      	b.n	2518 <nextFile+0xe4>
                            sectorIndex = 0;
    261e:	460c      	mov	r4, r1
                        SD_readSector(startSecOfClus(currentClus) + sectorIndex, SD_buff);
    2620:	4628      	mov	r0, r5
    2622:	f7ff fdeb 	bl	21fc <startSecOfClus>
    2626:	4420      	add	r0, r4
    2628:	f7ff fdf4 	bl	2214 <SD_readSector.constprop.0>
                            sectorIndex = 0;
    262c:	465b      	mov	r3, fp
    262e:	e796      	b.n	255e <nextFile+0x12a>
                    fileName[fileNameIndex++] = *(p_name++);
    2630:	1c57      	adds	r7, r2, #1
    2632:	5483      	strb	r3, [r0, r2]
    2634:	b2fa      	uxtb	r2, r7
    2636:	e797      	b.n	2568 <nextFile+0x134>
                memset(fileName, 0, sizeof(fileName));
    2638:	2100      	movs	r1, #0
    263a:	483b      	ldr	r0, [pc, #236]	; (2728 <CONFIG_SD_DATA_TIMEOUT+0x18>)
    263c:	f009 ff59 	bl	c4f2 <memset>
                getShortFileName(temp);
    2640:	f10d 0e0c 	add.w	lr, sp, #12
    2644:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2648:	46bc      	mov	ip, r7
    264a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    264e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2652:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2656:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    265a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    265e:	f89d c018 	ldrb.w	ip, [sp, #24]
    2662:	4931      	ldr	r1, [pc, #196]	; (2728 <CONFIG_SD_DATA_TIMEOUT+0x18>)
    2664:	f89d e017 	ldrb.w	lr, [sp, #23]
                memset(fileName, 0, sizeof(fileName));
    2668:	2200      	movs	r2, #0
    266a:	4608      	mov	r0, r1
        if (p_file.DIR_NTRes & 0x08)
    266c:	f00c 0c08 	and.w	ip, ip, #8
        if (p_file.DIR_Name[index] == ' ')
    2670:	f817 3b01 	ldrb.w	r3, [r7], #1
    2674:	2b20      	cmp	r3, #32
    2676:	d01b      	beq.n	26b0 <nextFile+0x27c>
        if (p_file.DIR_NTRes & 0x08)
    2678:	f1bc 0f00 	cmp.w	ip, #0
    267c:	d006      	beq.n	268c <nextFile+0x258>
            if ((p_file.DIR_Name[index] > 64) && (p_file.DIR_Name[index] < 91))
    267e:	f1a3 0941 	sub.w	r9, r3, #65	; 0x41
    2682:	f1b9 0f19 	cmp.w	r9, #25
                fileName[nameIndx++] = p_file.DIR_Name[index] + 32;
    2686:	bf9c      	itt	ls
    2688:	3320      	addls	r3, #32
    268a:	b2db      	uxtbls	r3, r3
    for (uint8_t index = 0; index < 8; index++)
    268c:	3201      	adds	r2, #1
    268e:	2a08      	cmp	r2, #8
                fileName[nameIndx++] = p_file.DIR_Name[index];
    2690:	f801 3b01 	strb.w	r3, [r1], #1
    for (uint8_t index = 0; index < 8; index++)
    2694:	d1ec      	bne.n	2670 <nextFile+0x23c>
    if ((p_file.DIR_attr & ATTR_DIRECTORY) == 0)
    2696:	f01e 0f10 	tst.w	lr, #16
    269a:	d00b      	beq.n	26b4 <nextFile+0x280>
                temp.fileEntInf.entryIndex = p_file->entryIndex % 16;
    269c:	6a33      	ldr	r3, [r6, #32]
                temp.fileEntInf.Cluster = currentClus;
    269e:	950c      	str	r5, [sp, #48]	; 0x30
                temp.fileEntInf.entryIndex = p_file->entryIndex % 16;
    26a0:	f003 020f 	and.w	r2, r3, #15
                temp.fileEntInf.sectorIndex = sectorIndex;
    26a4:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
                temp.fileEntInf.entryIndex = p_file->entryIndex % 16;
    26a8:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
                p_file->entryIndex++;
    26ac:	3301      	adds	r3, #1
    26ae:	e779      	b.n	25a4 <nextFile+0x170>
    26b0:	b2d2      	uxtb	r2, r2
    26b2:	e7f0      	b.n	2696 <nextFile+0x262>
        if (p_file.DIR_ext[0] != ' ')
    26b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    26b8:	2b20      	cmp	r3, #32
    26ba:	d0ef      	beq.n	269c <nextFile+0x268>
            fileName[nameIndx++] = '.';
    26bc:	232e      	movs	r3, #46	; 0x2e
    26be:	5483      	strb	r3, [r0, r2]
            for (uint8_t index = 0; index < 3; index++)
    26c0:	f10d 0c3f 	add.w	ip, sp, #63	; 0x3f
            fileName[nameIndx++] = '.';
    26c4:	2101      	movs	r1, #1
                fileName[nameIndx++] = (p_file.DIR_ext[index] == ' ') ? '\0' : p_file.DIR_ext[index] + 32;
    26c6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    26ca:	1857      	adds	r7, r2, r1
    26cc:	2b20      	cmp	r3, #32
    26ce:	bf18      	it	ne
    26d0:	3320      	addne	r3, #32
    26d2:	b2ff      	uxtb	r7, r7
            for (uint8_t index = 0; index < 3; index++)
    26d4:	f101 0101 	add.w	r1, r1, #1
                fileName[nameIndx++] = (p_file.DIR_ext[index] == ' ') ? '\0' : p_file.DIR_ext[index] + 32;
    26d8:	bf14      	ite	ne
    26da:	b2db      	uxtbne	r3, r3
    26dc:	2300      	moveq	r3, #0
            for (uint8_t index = 0; index < 3; index++)
    26de:	2904      	cmp	r1, #4
                fileName[nameIndx++] = (p_file.DIR_ext[index] == ' ') ? '\0' : p_file.DIR_ext[index] + 32;
    26e0:	55c3      	strb	r3, [r0, r7]
            for (uint8_t index = 0; index < 3; index++)
    26e2:	d1f0      	bne.n	26c6 <nextFile+0x292>
    26e4:	e7da      	b.n	269c <nextFile+0x268>
            p_file->entryIndex++;
    26e6:	f10e 0301 	add.w	r3, lr, #1
    26ea:	6233      	str	r3, [r6, #32]
            if (p_file->entryIndex % 16 == 0)
    26ec:	071b      	lsls	r3, r3, #28
                sectorIndex++;
    26ee:	bf08      	it	eq
    26f0:	3401      	addeq	r4, #1
        if (sectorIndex == params.BPB_SecPerClus)
    26f2:	f899 3002 	ldrb.w	r3, [r9, #2]
                sectorIndex++;
    26f6:	bf08      	it	eq
    26f8:	b2e4      	uxtbeq	r4, r4
        if (sectorIndex == params.BPB_SecPerClus)
    26fa:	42a3      	cmp	r3, r4
    26fc:	f47f aeed 	bne.w	24da <nextFile+0xa6>
            currentClus = fatNextClus(currentClus);
    2700:	4628      	mov	r0, r5
    2702:	f7ff fe21 	bl	2348 <fatNextClus>
            if (currentClus > FAT_EOC)
    2706:	4b0a      	ldr	r3, [pc, #40]	; (2730 <CONFIG_SD_DATA_TIMEOUT+0x20>)
    2708:	4298      	cmp	r0, r3
            currentClus = fatNextClus(currentClus);
    270a:	4605      	mov	r5, r0
            sectorIndex = 0;
    270c:	f04f 0400 	mov.w	r4, #0
            if (currentClus > FAT_EOC)
    2710:	f67f aee3 	bls.w	24da <nextFile+0xa6>
    2714:	e6c9      	b.n	24aa <nextFile+0x76>
    2716:	bf00      	nop
    2718:	20000b2c 	.word	0x20000b2c
    271c:	0000ec9a 	.word	0x0000ec9a
    2720:	0ffffff7 	.word	0x0ffffff7
    2724:	2000092c 	.word	0x2000092c
    2728:	20001ae5 	.word	0x20001ae5
    272c:	20001ae4 	.word	0x20001ae4
    2730:	0ffffff8 	.word	0x0ffffff8

00002734 <fileExists>:
{
    2734:	b082      	sub	sp, #8
    2736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    273a:	b098      	sub	sp, #96	; 0x60
    273c:	460e      	mov	r6, r1
    273e:	a91e      	add	r1, sp, #120	; 0x78
    2740:	e881 000c 	stmia.w	r1, {r2, r3}
    2744:	4607      	mov	r7, r0
    myFile tempFile = {0};
    2746:	222c      	movs	r2, #44	; 0x2c
    2748:	2100      	movs	r1, #0
    274a:	a80d      	add	r0, sp, #52	; 0x34
    274c:	f009 fed1 	bl	c4f2 <memset>
            if (file[nameIndx] != fileName[nameIndx])
    2750:	f8df 807c 	ldr.w	r8, [pc, #124]	; 27d0 <fileExists+0x9c>
    while (isValidFile(tempFile = nextFile(&folder)))
    2754:	a91e      	add	r1, sp, #120	; 0x78
    2756:	4668      	mov	r0, sp
    2758:	466d      	mov	r5, sp
    275a:	f7ff fe6b 	bl	2434 <nextFile>
    275e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2760:	ac0d      	add	r4, sp, #52	; 0x34
    2762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    276c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if ((uint8_t)(file.DIR_Name[0]) == 0)
    2770:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    2774:	b921      	cbnz	r1, 2780 <fileExists+0x4c>
    memset(&tempFile, 0, sizeof(myFile));
    2776:	222c      	movs	r2, #44	; 0x2c
    2778:	a80d      	add	r0, sp, #52	; 0x34
    277a:	f009 feba 	bl	c4f2 <memset>
    return tempFile;
    277e:	e017      	b.n	27b0 <fileExists+0x7c>
    2780:	2500      	movs	r5, #0
        for (nameIndx = 0; nameIndx < strlen(file); nameIndx++)
    2782:	4630      	mov	r0, r6
    2784:	f009 fea3 	bl	c4ce <strlen>
    2788:	b2ec      	uxtb	r4, r5
    278a:	42a0      	cmp	r0, r4
    278c:	d906      	bls.n	279c <fileExists+0x68>
            if (file[nameIndx] != fileName[nameIndx])
    278e:	5d32      	ldrb	r2, [r6, r4]
    2790:	f818 3004 	ldrb.w	r3, [r8, r4]
    2794:	429a      	cmp	r2, r3
    2796:	f105 0501 	add.w	r5, r5, #1
    279a:	d0f2      	beq.n	2782 <fileExists+0x4e>
        if (nameIndx == strlen(file) && nameIndx == strlen(fileName))
    279c:	4630      	mov	r0, r6
    279e:	f009 fe96 	bl	c4ce <strlen>
    27a2:	42a0      	cmp	r0, r4
    27a4:	d1d6      	bne.n	2754 <fileExists+0x20>
    27a6:	480a      	ldr	r0, [pc, #40]	; (27d0 <fileExists+0x9c>)
    27a8:	f009 fe91 	bl	c4ce <strlen>
    27ac:	42a0      	cmp	r0, r4
    27ae:	d1d1      	bne.n	2754 <fileExists+0x20>
            return tempFile;
    27b0:	ac0d      	add	r4, sp, #52	; 0x34
    27b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    27b4:	463d      	mov	r5, r7
    27b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    27b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    27ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    27bc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    27c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
    27c4:	4638      	mov	r0, r7
    27c6:	b018      	add	sp, #96	; 0x60
    27c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    27cc:	b002      	add	sp, #8
    27ce:	4770      	bx	lr
    27d0:	20001ae5 	.word	0x20001ae5

000027d4 <listDir>:

    return true;
}

bool listDir(const char *path)
{
    27d4:	b530      	push	{r4, r5, lr}
    27d6:	b099      	sub	sp, #100	; 0x64
    27d8:	4601      	mov	r1, r0
    myFile tempFile = pathExists(path);
    27da:	a802      	add	r0, sp, #8
    27dc:	f009 f8b7 	bl	b94e <pathExists>
    uint32_t startClus = (uint32_t)p_file.DIR_FstClusLO;
    27e0:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
    startClus |= ((uint32_t)(p_file.DIR_FstClusHI)) << 16;
    27e4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    myFile tempFile = pathExists(path);
    27e8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    27ec:	9909      	ldr	r1, [sp, #36]	; 0x24
    if (startCluster(tempFile) == 0)
    27ee:	ea54 4403 	orrs.w	r4, r4, r3, lsl #16
    27f2:	d105      	bne.n	2800 <listDir+0x2c>
    {
        printk("Invalid Path!\n");
    27f4:	481a      	ldr	r0, [pc, #104]	; (2860 <listDir+0x8c>)
    27f6:	f009 f90e 	bl	ba16 <printk>
        return false;
    27fa:	4620      	mov	r0, r4
        if (!((fileName[0] == '.') && (fileName[1] == '_')))
            dispFile(tempFile, fileName, 0);
    }
    printk("\n");
    return 1;
}
    27fc:	b019      	add	sp, #100	; 0x64
    27fe:	bd30      	pop	{r4, r5, pc}
    if (!isDirectory(tempFile))
    2800:	f012 0f18 	tst.w	r2, #24
    2804:	d107      	bne.n	2816 <listDir+0x42>
        printContent(startCluster(tempFile), tempFile.DIR_FileSize);
    2806:	4620      	mov	r0, r4
    2808:	f7ff fdb4 	bl	2374 <printContent.isra.0>
    printk("\n");
    280c:	4815      	ldr	r0, [pc, #84]	; (2864 <listDir+0x90>)
    280e:	f009 f902 	bl	ba16 <printk>
        return true;
    2812:	2001      	movs	r0, #1
    2814:	e7f2      	b.n	27fc <listDir+0x28>
    myFile folder = tempFile;
    2816:	ad02      	add	r5, sp, #8
    2818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    281a:	ac0d      	add	r4, sp, #52	; 0x34
    281c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    281e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2822:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    2826:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        if (!((fileName[0] == '.') && (fileName[1] == '_')))
    282a:	4c0f      	ldr	r4, [pc, #60]	; (2868 <listDir+0x94>)
            dispFile(tempFile, fileName, 0);
    282c:	2500      	movs	r5, #0
    while (isValidFile(tempFile = nextFile(&folder)))
    282e:	a802      	add	r0, sp, #8
    2830:	a90d      	add	r1, sp, #52	; 0x34
    2832:	f7ff fdff 	bl	2434 <nextFile>
    if ((uint8_t)(file.DIR_Name[0]) == 0)
    2836:	f89d 2008 	ldrb.w	r2, [sp, #8]
    while (isValidFile(tempFile = nextFile(&folder)))
    283a:	f89d 0013 	ldrb.w	r0, [sp, #19]
    283e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if ((uint8_t)(file.DIR_Name[0]) == 0)
    2840:	2a00      	cmp	r2, #0
    2842:	d0e3      	beq.n	280c <listDir+0x38>
        if (!((fileName[0] == '.') && (fileName[1] == '_')))
    2844:	7822      	ldrb	r2, [r4, #0]
    2846:	2a2e      	cmp	r2, #46	; 0x2e
    2848:	d102      	bne.n	2850 <listDir+0x7c>
    284a:	7862      	ldrb	r2, [r4, #1]
    284c:	2a5f      	cmp	r2, #95	; 0x5f
    284e:	d0ee      	beq.n	282e <listDir+0x5a>
            dispFile(tempFile, fileName, 0);
    2850:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    2854:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    2858:	9500      	str	r5, [sp, #0]
    285a:	f7ff fce5 	bl	2228 <dispFile.constprop.0.isra.0>
    285e:	e7e6      	b.n	282e <listDir+0x5a>
    2860:	0000eca5 	.word	0x0000eca5
    2864:	0000ecb2 	.word	0x0000ecb2
    2868:	20001ae5 	.word	0x20001ae5

0000286c <SdFat_init>:
    }
    return false;
}

bool SdFat_init()
{
    286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    printk("Using zephyr official SDHC driver\n");
    286e:	4842      	ldr	r0, [pc, #264]	; (2978 <SdFat_init+0x10c>)
    2870:	f009 f8d1 	bl	ba16 <printk>
    if (sd_init(sd_dev, &sdcard) != 0)
    2874:	4941      	ldr	r1, [pc, #260]	; (297c <SdFat_init+0x110>)
    2876:	4842      	ldr	r0, [pc, #264]	; (2980 <SdFat_init+0x114>)
    2878:	f009 feec 	bl	c654 <sd_init>
    287c:	b108      	cbz	r0, 2882 <SdFat_init+0x16>
        return false;
    287e:	2000      	movs	r0, #0
        }
        printk("Volume Label: %s\n", params.BS_VolLab);
        return true;
    }
    return false;
}
    2880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (SD_readSector(BOOT_SEC_START, SD_buff) == SD_READ_SUCCESS)
    2882:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    2886:	f7ff fcc5 	bl	2214 <SD_readSector.constprop.0>
    288a:	4605      	mov	r5, r0
    288c:	2800      	cmp	r0, #0
    288e:	d1f6      	bne.n	287e <SdFat_init+0x12>
        params.BPB_BytesPerSec |= (uint16_t)(SD_buff[12] << 8);
    2890:	493c      	ldr	r1, [pc, #240]	; (2984 <SdFat_init+0x118>)
    2892:	4c3d      	ldr	r4, [pc, #244]	; (2988 <SdFat_init+0x11c>)
    2894:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    2898:	8023      	strh	r3, [r4, #0]
        params.BPB_SecPerClus = SD_buff[13];
    289a:	7b4b      	ldrb	r3, [r1, #13]
    289c:	70a3      	strb	r3, [r4, #2]
        params.BPB_RsvdSecCnt |= ((uint16_t)SD_buff[15]) << 8;
    289e:	89cb      	ldrh	r3, [r1, #14]
    28a0:	80a3      	strh	r3, [r4, #4]
        params.BPB_TotSec32 |= ((uint32_t)SD_buff[35]) << 24;
    28a2:	6a0b      	ldr	r3, [r1, #32]
    28a4:	60e3      	str	r3, [r4, #12]
        params.BPB_FATSz32 |= ((uint32_t)SD_buff[39]) << 24;
    28a6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    28a8:	6123      	str	r3, [r4, #16]
        params.BPB_RootEntCnt |= ((uint16_t)SD_buff[18]) << 8;
    28aa:	f8b1 3011 	ldrh.w	r3, [r1, #17]
    28ae:	8123      	strh	r3, [r4, #8]
        params.BPB_NumFATs = SD_buff[16];
    28b0:	7c0b      	ldrb	r3, [r1, #16]
    28b2:	71a3      	strb	r3, [r4, #6]
        params.BPB_RootClus |= ((uint32_t)SD_buff[47]) << 24;
    28b4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    28b6:	6163      	str	r3, [r4, #20]
        memcpy(params.BS_VolLab, &SD_buff[71], 11);
    28b8:	220b      	movs	r2, #11
        params.BPB_FSInfo |= ((uint16_t)(SD_buff[49])) << 8;
    28ba:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
    28bc:	8323      	strh	r3, [r4, #24]
        memcpy(params.BS_VolLab, &SD_buff[71], 11);
    28be:	3147      	adds	r1, #71	; 0x47
    28c0:	f104 001a 	add.w	r0, r4, #26
    28c4:	f009 fe0a 	bl	c4dc <memcpy>
        FatStartSector = BOOT_SEC_START + params.BPB_RsvdSecCnt; // 0X2020
    28c8:	88a2      	ldrh	r2, [r4, #4]
    28ca:	4b30      	ldr	r3, [pc, #192]	; (298c <SdFat_init+0x120>)
        RootDirSectors = (32 * params.BPB_RootEntCnt + params.BPB_BytesPerSec - 1) / params.BPB_BytesPerSec; // 0 for FAT32
    28cc:	8821      	ldrh	r1, [r4, #0]
        FatSectorsCnt = params.BPB_FATSz32 * params.BPB_NumFATs;
    28ce:	6920      	ldr	r0, [r4, #16]
        DataSectorsCnt = params.BPB_TotSec32 - DataStartSector;
    28d0:	4f2f      	ldr	r7, [pc, #188]	; (2990 <SdFat_init+0x124>)
        params.BS_VolLab[8] = '\0';
    28d2:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
        FatStartSector = BOOT_SEC_START + params.BPB_RsvdSecCnt; // 0X2020
    28d6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    28da:	601a      	str	r2, [r3, #0]
        RootDirSectors = (32 * params.BPB_RootEntCnt + params.BPB_BytesPerSec - 1) / params.BPB_BytesPerSec; // 0 for FAT32
    28dc:	8923      	ldrh	r3, [r4, #8]
    28de:	eb01 1343 	add.w	r3, r1, r3, lsl #5
    28e2:	3b01      	subs	r3, #1
    28e4:	fb93 f3f1 	sdiv	r3, r3, r1
        FatSectorsCnt = params.BPB_FATSz32 * params.BPB_NumFATs;
    28e8:	79a1      	ldrb	r1, [r4, #6]
        RootDirStartSector = FatStartSector + FatSectorsCnt;
    28ea:	fb00 2201 	mla	r2, r0, r1, r2
        DataStartSector = RootDirStartSector + RootDirSectors; // 0X96AE
    28ee:	4413      	add	r3, r2
        DataSectorsCnt = params.BPB_TotSec32 - DataStartSector;
    28f0:	68e0      	ldr	r0, [r4, #12]
        DataStartSector = RootDirStartSector + RootDirSectors; // 0X96AE
    28f2:	4a28      	ldr	r2, [pc, #160]	; (2994 <SdFat_init+0x128>)
    28f4:	6013      	str	r3, [r2, #0]
        DataSectorsCnt = params.BPB_TotSec32 - DataStartSector;
    28f6:	1ac3      	subs	r3, r0, r3
    28f8:	603b      	str	r3, [r7, #0]
        float size = (params.BPB_TotSec32 * 512.0) / (1024.0 * 1024.0 * 1024.0);
    28fa:	f7fe fd43 	bl	1384 <__aeabi_ui2d>
    28fe:	2200      	movs	r2, #0
    2900:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
    2904:	f7fe fdb8 	bl	1478 <__aeabi_dmul>
    2908:	4b23      	ldr	r3, [pc, #140]	; (2998 <SdFat_init+0x12c>)
    290a:	2200      	movs	r2, #0
    290c:	f7fe fdb4 	bl	1478 <__aeabi_dmul>
    2910:	f7fe ffc4 	bl	189c <__aeabi_d2f>
    2914:	4606      	mov	r6, r0
        uint16_t sizeInt = size;
    2916:	f7ff fa6f 	bl	1df8 <__aeabi_f2uiz>
        float tmpFrac = size - sizeInt;
    291a:	b285      	uxth	r5, r0
    291c:	4628      	mov	r0, r5
    291e:	f7ff f8c7 	bl	1ab0 <__aeabi_i2f>
    2922:	4601      	mov	r1, r0
    2924:	4630      	mov	r0, r6
    2926:	f7ff f80d 	bl	1944 <__aeabi_fsub>
        uint16_t tmpInt = tmpFrac * 100;
    292a:	491c      	ldr	r1, [pc, #112]	; (299c <SdFat_init+0x130>)
    292c:	f7ff f914 	bl	1b58 <__aeabi_fmul>
    2930:	f7ff fa62 	bl	1df8 <__aeabi_f2uiz>
        printk("Card Size=%d.%d GB\n", sizeInt, tmpInt);
    2934:	4629      	mov	r1, r5
    2936:	b282      	uxth	r2, r0
    2938:	4819      	ldr	r0, [pc, #100]	; (29a0 <SdFat_init+0x134>)
    293a:	f009 f86c 	bl	ba16 <printk>
        printk("FAT type is: ");
    293e:	4819      	ldr	r0, [pc, #100]	; (29a4 <SdFat_init+0x138>)
    2940:	f009 f869 	bl	ba16 <printk>
    uint32_t clusterCnt = DataSectorsCnt / params.BPB_SecPerClus;
    2944:	78a2      	ldrb	r2, [r4, #2]
    2946:	683b      	ldr	r3, [r7, #0]
    2948:	fbb3 f3f2 	udiv	r3, r3, r2
    if (clusterCnt <= 4085)
    294c:	f640 72f5 	movw	r2, #4085	; 0xff5
    2950:	4293      	cmp	r3, r2
    2952:	d90e      	bls.n	2972 <SdFat_init+0x106>
    else if (clusterCnt >= 4086 && clusterCnt <= 65525)
    2954:	f6a3 73f6 	subw	r3, r3, #4086	; 0xff6
    2958:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
            printk("FAT32\n");
    295c:	bf2c      	ite	cs
    295e:	4812      	ldrcs	r0, [pc, #72]	; (29a8 <SdFat_init+0x13c>)
            printk("FAT16\n");
    2960:	4812      	ldrcc	r0, [pc, #72]	; (29ac <SdFat_init+0x140>)
            printk("FAT12\n");
    2962:	f009 f858 	bl	ba16 <printk>
        printk("Volume Label: %s\n", params.BS_VolLab);
    2966:	4812      	ldr	r0, [pc, #72]	; (29b0 <SdFat_init+0x144>)
    2968:	4912      	ldr	r1, [pc, #72]	; (29b4 <SdFat_init+0x148>)
    296a:	f009 f854 	bl	ba16 <printk>
        return true;
    296e:	2001      	movs	r0, #1
    2970:	e786      	b.n	2880 <SdFat_init+0x14>
            printk("FAT12\n");
    2972:	4811      	ldr	r0, [pc, #68]	; (29b8 <SdFat_init+0x14c>)
    2974:	e7f5      	b.n	2962 <SdFat_init+0xf6>
    2976:	bf00      	nop
    2978:	0000ecb4 	.word	0x0000ecb4
    297c:	20000860 	.word	0x20000860
    2980:	0000e264 	.word	0x0000e264
    2984:	2000092c 	.word	0x2000092c
    2988:	20000b2c 	.word	0x20000b2c
    298c:	20000928 	.word	0x20000928
    2990:	20000920 	.word	0x20000920
    2994:	20000924 	.word	0x20000924
    2998:	3e100000 	.word	0x3e100000
    299c:	42c80000 	.word	0x42c80000
    29a0:	0000ecd7 	.word	0x0000ecd7
    29a4:	0000eceb 	.word	0x0000eceb
    29a8:	0000ecf9 	.word	0x0000ecf9
    29ac:	0000ed00 	.word	0x0000ed00
    29b0:	0000ed0e 	.word	0x0000ed0e
    29b4:	20000b46 	.word	0x20000b46
    29b8:	0000ed07 	.word	0x0000ed07

000029bc <set_trig_flag>:
}

/*Function to set trig flag of timer nodes to be triggered next.
 */
static inline void set_trig_flag()
{
    29bc:	b510      	push	{r4, lr}
	mytimer_node_t *current_node = head_node;
    29be:	4b08      	ldr	r3, [pc, #32]	; (29e0 <set_trig_flag+0x24>)

	while (current_node != NULL)
	{
		if (current_node->trig_ticks == next_trig_ticks)
    29c0:	4c08      	ldr	r4, [pc, #32]	; (29e4 <set_trig_flag+0x28>)
	mytimer_node_t *current_node = head_node;
    29c2:	681b      	ldr	r3, [r3, #0]
			//The nRF52 Series User Specification states that if the COUNTER value is N,
			// writing N or N + 1 to a CC register may not trigger a COMPARE event.
			//In this case, the timer can be made to trigger by setting its trig flag manually
		*/
		else if ((current_node->trig_ticks - next_trig_ticks) < RTC_CC_OFFSET_MIN)
			current_node->trig = true;
    29c4:	2101      	movs	r1, #1
	while (current_node != NULL)
    29c6:	b903      	cbnz	r3, 29ca <set_trig_flag+0xe>

		current_node = current_node->next_node;
	}
}
    29c8:	bd10      	pop	{r4, pc}
		if (current_node->trig_ticks == next_trig_ticks)
    29ca:	68da      	ldr	r2, [r3, #12]
    29cc:	6820      	ldr	r0, [r4, #0]
    29ce:	4282      	cmp	r2, r0
    29d0:	d101      	bne.n	29d6 <set_trig_flag+0x1a>
			current_node->trig = true;
    29d2:	7019      	strb	r1, [r3, #0]
    29d4:	e002      	b.n	29dc <set_trig_flag+0x20>
		else if ((current_node->trig_ticks - next_trig_ticks) < RTC_CC_OFFSET_MIN)
    29d6:	1a12      	subs	r2, r2, r0
    29d8:	2a02      	cmp	r2, #2
    29da:	d9fa      	bls.n	29d2 <set_trig_flag+0x16>
		current_node = current_node->next_node;
    29dc:	691b      	ldr	r3, [r3, #16]
    29de:	e7f2      	b.n	29c6 <set_trig_flag+0xa>
    29e0:	20000b54 	.word	0x20000b54
    29e4:	20000b58 	.word	0x20000b58

000029e8 <get_next_trig_ticks>:

/* Function to get the next RTC ticks of the timer node to be triggered.
 * Corresponds to the next RTC ticks to be loaded into CC register.
 */
void get_next_trig_ticks()
{
    29e8:	b510      	push	{r4, lr}
	// return if no timers are running
	if (head_node == NULL)
    29ea:	4b0a      	ldr	r3, [pc, #40]	; (2a14 <get_next_trig_ticks+0x2c>)
    29ec:	681a      	ldr	r2, [r3, #0]
    29ee:	b13a      	cbz	r2, 2a00 <get_next_trig_ticks+0x18>
		return;
	next_trig_ticks = head_node->trig_ticks;
    29f0:	4809      	ldr	r0, [pc, #36]	; (2a18 <get_next_trig_ticks+0x30>)
    29f2:	68d3      	ldr	r3, [r2, #12]
	mytimer_node_t *current_node = head_node->next_node;
    29f4:	6912      	ldr	r2, [r2, #16]
	next_trig_ticks = head_node->trig_ticks;
    29f6:	6003      	str	r3, [r0, #0]

	// Determine the minimum number of RTC ticks from the list of timers that corresponds to the next trigger RTC ticks.
	while (current_node != NULL)
    29f8:	2400      	movs	r4, #0
    29fa:	b912      	cbnz	r2, 2a02 <get_next_trig_ticks+0x1a>
    29fc:	b104      	cbz	r4, 2a00 <get_next_trig_ticks+0x18>
    29fe:	6003      	str	r3, [r0, #0]
		if (current_node->trig_ticks < next_trig_ticks)
			next_trig_ticks = current_node->trig_ticks;

		current_node = current_node->next_node;
	}
}
    2a00:	bd10      	pop	{r4, pc}
		if (current_node->trig_ticks < next_trig_ticks)
    2a02:	68d1      	ldr	r1, [r2, #12]
		current_node = current_node->next_node;
    2a04:	6912      	ldr	r2, [r2, #16]
		if (current_node->trig_ticks < next_trig_ticks)
    2a06:	4299      	cmp	r1, r3
    2a08:	bf2c      	ite	cs
    2a0a:	4619      	movcs	r1, r3
    2a0c:	2401      	movcc	r4, #1
		current_node = current_node->next_node;
    2a0e:	460b      	mov	r3, r1
    2a10:	e7f3      	b.n	29fa <get_next_trig_ticks+0x12>
    2a12:	bf00      	nop
    2a14:	20000b54 	.word	0x20000b54
    2a18:	20000b58 	.word	0x20000b58

00002a1c <myTimer_start>:

/* Function to start the timer instances
 * This stores the timer instances in a running timer queue and loads CC register with next minimum RTC ticks.
 */
void myTimer_start(mytimer_node_t *instance, uint32_t interval)
{
    2a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// check if the timer is already in running state. If true, abort.
	if (instance->is_running)
    2a1e:	7843      	ldrb	r3, [r0, #1]
    2a20:	bb63      	cbnz	r3, 2a7c <myTimer_start+0x60>
		return;
	}

	instance->interval = interval;
	// Check for maximum number of allowed instance to run and generate an error accordingly.
	if (timers_count == MAX_TIMERS_CNT)
    2a22:	4f1b      	ldr	r7, [pc, #108]	; (2a90 <myTimer_start+0x74>)
	instance->interval = interval;
    2a24:	6081      	str	r1, [r0, #8]
	if (timers_count == MAX_TIMERS_CNT)
    2a26:	783b      	ldrb	r3, [r7, #0]
    2a28:	2b10      	cmp	r3, #16
    2a2a:	d104      	bne.n	2a36 <myTimer_start+0x1a>
	if (!rtc_started)
	{
		NRF_RTC2->TASKS_START = 1;
		rtc_started = true;
	}
}
    2a2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("ERROR:Maximum allowed running timer instances reached\n");
    2a30:	4818      	ldr	r0, [pc, #96]	; (2a94 <myTimer_start+0x78>)
    2a32:	f008 bff0 	b.w	ba16 <printk>
	if (!rtc_started)
    2a36:	4c18      	ldr	r4, [pc, #96]	; (2a98 <myTimer_start+0x7c>)
    2a38:	7822      	ldrb	r2, [r4, #0]
    2a3a:	b11a      	cbz	r2, 2a44 <myTimer_start+0x28>
		instance->trig_ticks = NRF_RTC2->COUNTER + instance->interval;
    2a3c:	4a17      	ldr	r2, [pc, #92]	; (2a9c <myTimer_start+0x80>)
    2a3e:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    2a42:	4411      	add	r1, r2
	instance->is_running = true;
    2a44:	2201      	movs	r2, #1
	if (head_node == NULL)
    2a46:	4d16      	ldr	r5, [pc, #88]	; (2aa0 <myTimer_start+0x84>)
	instance->is_running = true;
    2a48:	7042      	strb	r2, [r0, #1]
	if (head_node == NULL)
    2a4a:	682a      	ldr	r2, [r5, #0]
    2a4c:	60c1      	str	r1, [r0, #12]
		timers_count++;
    2a4e:	3301      	adds	r3, #1
    2a50:	b2db      	uxtb	r3, r3
	if (head_node == NULL)
    2a52:	b9a2      	cbnz	r2, 2a7e <myTimer_start+0x62>
		head_node = instance;
    2a54:	6028      	str	r0, [r5, #0]
		head_node->next_node = NULL;
    2a56:	2600      	movs	r6, #0
    2a58:	6106      	str	r6, [r0, #16]
		timers_count++;
    2a5a:	703b      	strb	r3, [r7, #0]
	get_next_trig_ticks();
    2a5c:	f7ff ffc4 	bl	29e8 <get_next_trig_ticks>
	mytimer_node_t *current_node = head_node;
    2a60:	682b      	ldr	r3, [r5, #0]
	while (current_node != NULL)
    2a62:	b993      	cbnz	r3, 2a8a <myTimer_start+0x6e>
	set_trig_flag();
    2a64:	f7ff ffaa 	bl	29bc <set_trig_flag>
	NRF_RTC2->CC[1] = next_trig_ticks;
    2a68:	4b0e      	ldr	r3, [pc, #56]	; (2aa4 <myTimer_start+0x88>)
    2a6a:	4a0c      	ldr	r2, [pc, #48]	; (2a9c <myTimer_start+0x80>)
    2a6c:	681b      	ldr	r3, [r3, #0]
    2a6e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
	if (!rtc_started)
    2a72:	7823      	ldrb	r3, [r4, #0]
    2a74:	b913      	cbnz	r3, 2a7c <myTimer_start+0x60>
		NRF_RTC2->TASKS_START = 1;
    2a76:	2301      	movs	r3, #1
    2a78:	6013      	str	r3, [r2, #0]
		rtc_started = true;
    2a7a:	7023      	strb	r3, [r4, #0]
}
    2a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while (current_node->next_node != NULL)
    2a7e:	4611      	mov	r1, r2
    2a80:	6912      	ldr	r2, [r2, #16]
    2a82:	2a00      	cmp	r2, #0
    2a84:	d1fb      	bne.n	2a7e <myTimer_start+0x62>
	current_node->next_node = instance;
    2a86:	6108      	str	r0, [r1, #16]
	timers_count++;
    2a88:	e7e5      	b.n	2a56 <myTimer_start+0x3a>
		current_node->trig = false;
    2a8a:	701e      	strb	r6, [r3, #0]
		current_node = current_node->next_node;
    2a8c:	691b      	ldr	r3, [r3, #16]
    2a8e:	e7e8      	b.n	2a62 <myTimer_start+0x46>
    2a90:	20001b66 	.word	0x20001b66
    2a94:	0000ed20 	.word	0x0000ed20
    2a98:	20001b65 	.word	0x20001b65
    2a9c:	40024000 	.word	0x40024000
    2aa0:	20000b54 	.word	0x20000b54
    2aa4:	20000b58 	.word	0x20000b58

00002aa8 <myTimer_stop>:
/* Function to stop the corresponding timer instance.
 * This sets is_running flag to false to prevent subsequent events from this timer.
 */
void myTimer_stop(mytimer_node_t *instance)
{
	if (instance->is_running)
    2aa8:	7843      	ldrb	r3, [r0, #1]
    2aaa:	b16b      	cbz	r3, 2ac8 <myTimer_stop+0x20>
	mytimer_node_t *current_node = head_node;
    2aac:	4a0b      	ldr	r2, [pc, #44]	; (2adc <myTimer_stop+0x34>)
	{
		instance->is_running = false;
    2aae:	2100      	movs	r1, #0
    2ab0:	7041      	strb	r1, [r0, #1]
	mytimer_node_t *current_node = head_node;
    2ab2:	6813      	ldr	r3, [r2, #0]
	if (instance == head_node && head_node->next_node != NULL)
    2ab4:	4298      	cmp	r0, r3
    2ab6:	d108      	bne.n	2aca <myTimer_stop+0x22>
    2ab8:	6903      	ldr	r3, [r0, #16]
    2aba:	b103      	cbz	r3, 2abe <myTimer_stop+0x16>
	(*head_node)->next_node = NULL;
    2abc:	6101      	str	r1, [r0, #16]
		head_node = NULL;
    2abe:	6013      	str	r3, [r2, #0]
	timers_count--;
    2ac0:	4a07      	ldr	r2, [pc, #28]	; (2ae0 <myTimer_stop+0x38>)
    2ac2:	7813      	ldrb	r3, [r2, #0]
    2ac4:	3b01      	subs	r3, #1
    2ac6:	7013      	strb	r3, [r2, #0]
		timer_list_node_delete(instance);
	}
}
    2ac8:	4770      	bx	lr
		while (current_node->next_node != instance)
    2aca:	461a      	mov	r2, r3
    2acc:	691b      	ldr	r3, [r3, #16]
    2ace:	4298      	cmp	r0, r3
    2ad0:	d1fb      	bne.n	2aca <myTimer_stop+0x22>
		current_node->next_node = instance->next_node;
    2ad2:	6903      	ldr	r3, [r0, #16]
    2ad4:	6113      	str	r3, [r2, #16]
		instance->next_node = NULL;
    2ad6:	2300      	movs	r3, #0
    2ad8:	6103      	str	r3, [r0, #16]
    2ada:	e7f1      	b.n	2ac0 <myTimer_stop+0x18>
    2adc:	20000b54 	.word	0x20000b54
    2ae0:	20001b66 	.word	0x20001b66

00002ae4 <handle_timers>:

/*
 * Function to handle the timer event generated in RTC1_IRQHandler
 */
void handle_timers()
{
    2ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mytimer_node_t *current_node = head_node;
    2ae8:	4d1a      	ldr	r5, [pc, #104]	; (2b54 <handle_timers+0x70>)
			current_node->trig_ticks = NRF_RTC2->COUNTER + current_node->interval;
    2aea:	4f1b      	ldr	r7, [pc, #108]	; (2b58 <handle_timers+0x74>)
	mytimer_node_t *current_node = head_node;
    2aec:	682c      	ldr	r4, [r5, #0]
			current_node->trig = false;
    2aee:	2600      	movs	r6, #0
	while (current_node != NULL)
    2af0:	b994      	cbnz	r4, 2b18 <handle_timers+0x34>

	// check for trig flag and trigger corresponding timers
	trigger_timers();

	// get  RTC ticks corresponding to next timers to be triggered.
	get_next_trig_ticks();
    2af2:	f7ff ff79 	bl	29e8 <get_next_trig_ticks>
	if (next_trig_ticks > NRF_RTC_MAX_CNT)
    2af6:	4a19      	ldr	r2, [pc, #100]	; (2b5c <handle_timers+0x78>)
    2af8:	6813      	ldr	r3, [r2, #0]
    2afa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2afe:	d304      	bcc.n	2b0a <handle_timers+0x26>
		next_trig_ticks = next_trig_ticks - NRF_RTC_MAX_CNT - 1;
    2b00:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
    2b04:	6013      	str	r3, [r2, #0]
		mytimer_node_t *current_node = head_node;
    2b06:	682a      	ldr	r2, [r5, #0]
		while (current_node != NULL)
    2b08:	b9ea      	cbnz	r2, 2b46 <handle_timers+0x62>
		NRF_RTC2->CC[1] = next_trig_ticks;
    2b0a:	4a13      	ldr	r2, [pc, #76]	; (2b58 <handle_timers+0x74>)
    2b0c:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
	// update the CC register
	update_cc_register();

	// set the trig flag of all the timers to be triggerd next.
	set_trig_flag();
}
    2b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	set_trig_flag();
    2b14:	f7ff bf52 	b.w	29bc <set_trig_flag>
		if (current_node->trig)
    2b18:	7823      	ldrb	r3, [r4, #0]
		mytimer_node_t *temp = current_node->next_node;
    2b1a:	f8d4 8010 	ldr.w	r8, [r4, #16]
		if (current_node->trig)
    2b1e:	b183      	cbz	r3, 2b42 <handle_timers+0x5e>
			current_node->timeout_handler();
    2b20:	6863      	ldr	r3, [r4, #4]
			current_node->trig = false;
    2b22:	7026      	strb	r6, [r4, #0]
			current_node->timeout_handler();
    2b24:	4798      	blx	r3
			if (!current_node->is_running)
    2b26:	7863      	ldrb	r3, [r4, #1]
    2b28:	b123      	cbz	r3, 2b34 <handle_timers+0x50>
			if (current_node->mode == MY_TIMER_MODE_SINGLE_SHOT)
    2b2a:	78a3      	ldrb	r3, [r4, #2]
    2b2c:	b923      	cbnz	r3, 2b38 <handle_timers+0x54>
				myTimer_stop(current_node);
    2b2e:	4620      	mov	r0, r4
    2b30:	f7ff ffba 	bl	2aa8 <myTimer_stop>
				current_node = temp;
    2b34:	4644      	mov	r4, r8
    2b36:	e7db      	b.n	2af0 <handle_timers+0xc>
			current_node->trig_ticks = NRF_RTC2->COUNTER + current_node->interval;
    2b38:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
    2b3c:	68a3      	ldr	r3, [r4, #8]
    2b3e:	4413      	add	r3, r2
    2b40:	60e3      	str	r3, [r4, #12]
		current_node = current_node->next_node;
    2b42:	6924      	ldr	r4, [r4, #16]
    2b44:	e7d4      	b.n	2af0 <handle_timers+0xc>
			current_node->trig_ticks = current_node->trig_ticks - NRF_RTC_MAX_CNT - 1;
    2b46:	68d1      	ldr	r1, [r2, #12]
    2b48:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2b4c:	60d1      	str	r1, [r2, #12]
			current_node = current_node->next_node;
    2b4e:	6912      	ldr	r2, [r2, #16]
    2b50:	e7da      	b.n	2b08 <handle_timers+0x24>
    2b52:	bf00      	nop
    2b54:	20000b54 	.word	0x20000b54
    2b58:	40024000 	.word	0x40024000
    2b5c:	20000b58 	.word	0x20000b58

00002b60 <rtc2_irq_handler>:

ISR_DIRECT_DECLARE(rtc2_irq_handler)
    2b60:	4668      	mov	r0, sp
    2b62:	f020 0107 	bic.w	r1, r0, #7
    2b66:	468d      	mov	sp, r1
    2b68:	b501      	push	{r0, lr}
{
	NRF_RTC2->EVENTS_COMPARE[1] = 0;
    2b6a:	4b05      	ldr	r3, [pc, #20]	; (2b80 <rtc2_irq_handler+0x20>)
    2b6c:	2200      	movs	r2, #0
    2b6e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	handle_timers();
    2b72:	f7ff ffb7 	bl	2ae4 <handle_timers>
ISR_DIRECT_DECLARE(rtc2_irq_handler)
    2b76:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    2b7a:	4685      	mov	sp, r0
    2b7c:	4770      	bx	lr
    2b7e:	bf00      	nop
    2b80:	40024000 	.word	0x40024000

00002b84 <myTimer_init>:

/* Function to initialize the timer module.
 * This initializes the RTC peripheral
 */
void myTimer_init()
{
    2b84:	b508      	push	{r3, lr}
	NRF_RTC2->INTENSET = CC1_INT_MASK;
    2b86:	4b08      	ldr	r3, [pc, #32]	; (2ba8 <myTimer_init+0x24>)
    2b88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2b8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RTC2->PRESCALER = RTC_PRESCALER;
    2b90:	2200      	movs	r2, #0
    2b92:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	IRQ_DIRECT_CONNECT(RTC2_IRQn, 6, rtc2_irq_handler, 0);
    2b96:	2024      	movs	r0, #36	; 0x24
    2b98:	2106      	movs	r1, #6
    2b9a:	f002 f929 	bl	4df0 <z_arm_irq_priority_set>
	irq_enable(RTC2_IRQn);
}
    2b9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(RTC2_IRQn);
    2ba2:	2024      	movs	r0, #36	; 0x24
    2ba4:	f002 b8f4 	b.w	4d90 <arch_irq_enable>
    2ba8:	40024000 	.word	0x40024000

00002bac <fast_blink_timer_base_handler>:
{
	gpio_pin_toggle_dt(&led1);
}
void fast_blink_timer_base_handler()
{
	myTimer_start(&fast_blink_timer_core, FAST_BLINK_CORE_INTERVAL);
    2bac:	4802      	ldr	r0, [pc, #8]	; (2bb8 <fast_blink_timer_base_handler+0xc>)
    2bae:	f640 213d 	movw	r1, #2621	; 0xa3d
    2bb2:	f7ff bf33 	b.w	2a1c <myTimer_start>
    2bb6:	bf00      	nop
    2bb8:	20000b5c 	.word	0x20000b5c

00002bbc <gpio_pin_toggle_dt.constprop.0.isra.0>:
    2bbc:	4802      	ldr	r0, [pc, #8]	; (2bc8 <gpio_pin_toggle_dt.constprop.0.isra.0+0xc>)
    2bbe:	6883      	ldr	r3, [r0, #8]
    2bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2bc4:	695b      	ldr	r3, [r3, #20]
    2bc6:	4718      	bx	r3
    2bc8:	0000e1ec 	.word	0x0000e1ec

00002bcc <fast_blink_timer_core_handler>:
}

void fast_blink_timer_core_handler()
{
    2bcc:	b510      	push	{r4, lr}
	gpio_pin_toggle_dt(&led1);
	static uint8_t blink_count = 0;
	blink_count++;
    2bce:	4c07      	ldr	r4, [pc, #28]	; (2bec <fast_blink_timer_core_handler+0x20>)
	gpio_pin_toggle_dt(&led1);
    2bd0:	f7ff fff4 	bl	2bbc <gpio_pin_toggle_dt.constprop.0.isra.0>
	blink_count++;
    2bd4:	7823      	ldrb	r3, [r4, #0]
    2bd6:	3301      	adds	r3, #1
    2bd8:	b2db      	uxtb	r3, r3
	if (blink_count == 4)
    2bda:	2b04      	cmp	r3, #4
	blink_count++;
    2bdc:	7023      	strb	r3, [r4, #0]
	if (blink_count == 4)
    2bde:	d104      	bne.n	2bea <fast_blink_timer_core_handler+0x1e>
	{
		myTimer_stop(&fast_blink_timer_core);
    2be0:	4803      	ldr	r0, [pc, #12]	; (2bf0 <fast_blink_timer_core_handler+0x24>)
    2be2:	f7ff ff61 	bl	2aa8 <myTimer_stop>
		blink_count = 0;
    2be6:	2300      	movs	r3, #0
    2be8:	7023      	strb	r3, [r4, #0]
	}
}
    2bea:	bd10      	pop	{r4, pc}
    2bec:	20001b67 	.word	0x20001b67
    2bf0:	20000b5c 	.word	0x20000b5c

00002bf4 <led_indication_set>:

void led_indication_set(led_indication_t indication_type)
{
    2bf4:	b510      	push	{r4, lr}
	switch (indication_type)
    2bf6:	4604      	mov	r4, r0
    2bf8:	b110      	cbz	r0, 2c00 <led_indication_set+0xc>
    2bfa:	2801      	cmp	r0, #1
    2bfc:	d00c      	beq.n	2c18 <led_indication_set+0x24>
		break;

	default:
		break;
	}
}
    2bfe:	bd10      	pop	{r4, pc}
		myTimer_create(&normal_blink_timer, normal_blink_timer_handler, MY_TIMER_MODE_REPEATED);
    2c00:	490c      	ldr	r1, [pc, #48]	; (2c34 <led_indication_set+0x40>)
    2c02:	480d      	ldr	r0, [pc, #52]	; (2c38 <led_indication_set+0x44>)
    2c04:	2201      	movs	r2, #1
    2c06:	f008 fefc 	bl	ba02 <myTimer_create>
		myTimer_start(&normal_blink_timer, NORMAL_BLINK_INTERVAL);
    2c0a:	480b      	ldr	r0, [pc, #44]	; (2c38 <led_indication_set+0x44>)
    2c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
    2c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		myTimer_start(&fast_blink_timer_base, FAST_BLINK_BASE_INTERVAL);
    2c14:	f7ff bf02 	b.w	2a1c <myTimer_start>
		myTimer_create(&fast_blink_timer_base, fast_blink_timer_base_handler, MY_TIMER_MODE_REPEATED);
    2c18:	4602      	mov	r2, r0
    2c1a:	4908      	ldr	r1, [pc, #32]	; (2c3c <led_indication_set+0x48>)
    2c1c:	4808      	ldr	r0, [pc, #32]	; (2c40 <led_indication_set+0x4c>)
    2c1e:	f008 fef0 	bl	ba02 <myTimer_create>
		myTimer_create(&fast_blink_timer_core, fast_blink_timer_core_handler, MY_TIMER_MODE_REPEATED);
    2c22:	4908      	ldr	r1, [pc, #32]	; (2c44 <led_indication_set+0x50>)
    2c24:	4808      	ldr	r0, [pc, #32]	; (2c48 <led_indication_set+0x54>)
    2c26:	4622      	mov	r2, r4
    2c28:	f008 feeb 	bl	ba02 <myTimer_create>
		myTimer_start(&fast_blink_timer_base, FAST_BLINK_BASE_INTERVAL);
    2c2c:	4804      	ldr	r0, [pc, #16]	; (2c40 <led_indication_set+0x4c>)
    2c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2c32:	e7ed      	b.n	2c10 <led_indication_set+0x1c>
    2c34:	0000ba0f 	.word	0x0000ba0f
    2c38:	20000b84 	.word	0x20000b84
    2c3c:	00002bad 	.word	0x00002bad
    2c40:	20000b70 	.word	0x20000b70
    2c44:	00002bcd 	.word	0x00002bcd
    2c48:	20000b5c 	.word	0x20000b5c

00002c4c <led_indication_init>:
		break;
	}
}

int led_indication_init()
{
    2c4c:	b510      	push	{r4, lr}
    2c4e:	4c0a      	ldr	r4, [pc, #40]	; (2c78 <led_indication_init+0x2c>)
    2c50:	4620      	mov	r0, r4
    2c52:	f00a ff2a 	bl	daaa <z_device_is_ready>
	if (!gpio_is_ready_dt(&led1))
    2c56:	b160      	cbz	r0, 2c72 <led_indication_init+0x26>
	struct gpio_driver_data *data =
    2c58:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
    2c5a:	68a1      	ldr	r1, [r4, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    2c5c:	6813      	ldr	r3, [r2, #0]
    2c5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2c62:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    2c64:	680b      	ldr	r3, [r1, #0]
    2c66:	4a05      	ldr	r2, [pc, #20]	; (2c7c <led_indication_init+0x30>)
    2c68:	4620      	mov	r0, r4
    2c6a:	210c      	movs	r1, #12
		return -1;

	return gpio_pin_configure_dt(&led1, GPIO_OUTPUT_INACTIVE);
}
    2c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2c70:	4718      	bx	r3
    2c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c76:	bd10      	pop	{r4, pc}
    2c78:	0000e1ec 	.word	0x0000e1ec
    2c7c:	000a0001 	.word	0x000a0001

00002c80 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    2c80:	4b01      	ldr	r3, [pc, #4]	; (2c88 <char_out+0x8>)
    2c82:	681b      	ldr	r3, [r3, #0]
    2c84:	4718      	bx	r3
    2c86:	bf00      	nop
    2c88:	200000bc 	.word	0x200000bc

00002c8c <__printk_hook_install>:
	_char_out = fn;
    2c8c:	4b01      	ldr	r3, [pc, #4]	; (2c94 <__printk_hook_install+0x8>)
    2c8e:	6018      	str	r0, [r3, #0]
}
    2c90:	4770      	bx	lr
    2c92:	bf00      	nop
    2c94:	200000bc 	.word	0x200000bc

00002c98 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    2c98:	b507      	push	{r0, r1, r2, lr}
    2c9a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    2c9c:	2100      	movs	r1, #0
    2c9e:	4602      	mov	r2, r0
    2ca0:	9100      	str	r1, [sp, #0]
    2ca2:	4803      	ldr	r0, [pc, #12]	; (2cb0 <vprintk+0x18>)
    2ca4:	f000 f914 	bl	2ed0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    2ca8:	b003      	add	sp, #12
    2caa:	f85d fb04 	ldr.w	pc, [sp], #4
    2cae:	bf00      	nop
    2cb0:	00002c81 	.word	0x00002c81

00002cb4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2cb8:	8b05      	ldrh	r5, [r0, #24]
{
    2cba:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2cbc:	0728      	lsls	r0, r5, #28
{
    2cbe:	4690      	mov	r8, r2
	if (processing) {
    2cc0:	d411      	bmi.n	2ce6 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    2cc2:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2cc4:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    2cc8:	f040 80cd 	bne.w	2e66 <process_event+0x1b2>
			evt = process_recheck(mgr);
    2ccc:	4620      	mov	r0, r4
    2cce:	f009 f899 	bl	be04 <process_recheck>
		}

		if (evt == EVT_NOP) {
    2cd2:	b178      	cbz	r0, 2cf4 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    2cd4:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2cd6:	8b21      	ldrh	r1, [r4, #24]
    2cd8:	2804      	cmp	r0, #4
    2cda:	d811      	bhi.n	2d00 <process_event+0x4c>
    2cdc:	e8df f000 	tbb	[pc, r0]
    2ce0:	856d10c3 	.word	0x856d10c3
    2ce4:	95          	.byte	0x95
    2ce5:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    2ce6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2ce8:	bf0c      	ite	eq
    2cea:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2cee:	f045 0520 	orrne.w	r5, r5, #32
    2cf2:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2cf4:	f388 8811 	msr	BASEPRI, r8
    2cf8:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2d00:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2d04:	45aa      	cmp	sl, r5
    2d06:	f000 80a6 	beq.w	2e56 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    2d0a:	2700      	movs	r7, #0
    2d0c:	46b9      	mov	r9, r7
    2d0e:	463e      	mov	r6, r7
    2d10:	68a3      	ldr	r3, [r4, #8]
    2d12:	2b00      	cmp	r3, #0
    2d14:	f000 80bd 	beq.w	2e92 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2d18:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2d1c:	8321      	strh	r1, [r4, #24]
    2d1e:	f388 8811 	msr	BASEPRI, r8
    2d22:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2d26:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2d28:	2900      	cmp	r1, #0
    2d2a:	f000 80bb 	beq.w	2ea4 <process_event+0x1f0>
	return node->next;
    2d2e:	680d      	ldr	r5, [r1, #0]
    2d30:	2900      	cmp	r1, #0
    2d32:	f000 80b7 	beq.w	2ea4 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    2d36:	f8d1 8004 	ldr.w	r8, [r1, #4]
    2d3a:	4633      	mov	r3, r6
    2d3c:	4652      	mov	r2, sl
    2d3e:	4620      	mov	r0, r4
    2d40:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2d42:	2d00      	cmp	r5, #0
    2d44:	d076      	beq.n	2e34 <process_event+0x180>
    2d46:	682b      	ldr	r3, [r5, #0]
    2d48:	4629      	mov	r1, r5
    2d4a:	461d      	mov	r5, r3
    2d4c:	e7f0      	b.n	2d30 <process_event+0x7c>
    2d4e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2d52:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2d54:	2a01      	cmp	r2, #1
    2d56:	d81b      	bhi.n	2d90 <process_event+0xdc>
	list->head = NULL;
    2d58:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2d5a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    2d5e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    2d60:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2d62:	b289      	uxth	r1, r1
	list->tail = NULL;
    2d64:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    2d68:	d109      	bne.n	2d7e <process_event+0xca>
    2d6a:	463b      	mov	r3, r7
    2d6c:	e003      	b.n	2d76 <process_event+0xc2>
				mgr->refs += 1U;
    2d6e:	8b62      	ldrh	r2, [r4, #26]
    2d70:	3201      	adds	r2, #1
    2d72:	8362      	strh	r2, [r4, #26]
	return node->next;
    2d74:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2d76:	2b00      	cmp	r3, #0
    2d78:	d1f9      	bne.n	2d6e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2d7a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    2d7e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2d80:	4620      	mov	r0, r4
    2d82:	f009 f83f 	bl	be04 <process_recheck>
    2d86:	2800      	cmp	r0, #0
    2d88:	d07b      	beq.n	2e82 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2d8a:	f041 0120 	orr.w	r1, r1, #32
    2d8e:	e077      	b.n	2e80 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2d90:	2b04      	cmp	r3, #4
    2d92:	d10a      	bne.n	2daa <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2d94:	f021 0107 	bic.w	r1, r1, #7
    2d98:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2d9a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2d9c:	4620      	mov	r0, r4
    2d9e:	f009 f831 	bl	be04 <process_recheck>
    2da2:	b110      	cbz	r0, 2daa <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2da4:	f041 0120 	orr.w	r1, r1, #32
    2da8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2daa:	8b21      	ldrh	r1, [r4, #24]
    2dac:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2db0:	45aa      	cmp	sl, r5
    2db2:	d050      	beq.n	2e56 <process_event+0x1a2>
    2db4:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    2db6:	46b9      	mov	r9, r7
    2db8:	e7aa      	b.n	2d10 <process_event+0x5c>
			transit = mgr->transitions->start;
    2dba:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2dbc:	f021 0107 	bic.w	r1, r1, #7
    2dc0:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    2dc4:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    2dc6:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    2dca:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    2dcc:	d12d      	bne.n	2e2a <process_event+0x176>
		    || (transit != NULL)) {
    2dce:	f1b9 0f00 	cmp.w	r9, #0
    2dd2:	d040      	beq.n	2e56 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2dd4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2dd8:	8321      	strh	r1, [r4, #24]
    2dda:	f388 8811 	msr	BASEPRI, r8
    2dde:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    2de2:	493a      	ldr	r1, [pc, #232]	; (2ecc <process_event+0x218>)
    2de4:	4620      	mov	r0, r4
    2de6:	47c8      	blx	r9
    2de8:	e029      	b.n	2e3e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2dea:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    2dee:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2df0:	f041 0104 	orr.w	r1, r1, #4
    2df4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    2df6:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    2df8:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    2dfc:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    2dfe:	d0e6      	beq.n	2dce <process_event+0x11a>
    2e00:	2700      	movs	r7, #0
		res = 0;
    2e02:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2e04:	f04f 0a04 	mov.w	sl, #4
    2e08:	e782      	b.n	2d10 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2e0a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    2e0e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2e10:	f041 0105 	orr.w	r1, r1, #5
    2e14:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    2e16:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    2e18:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    2e1c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    2e1e:	d0d6      	beq.n	2dce <process_event+0x11a>
    2e20:	2700      	movs	r7, #0
		res = 0;
    2e22:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2e24:	f04f 0a05 	mov.w	sl, #5
    2e28:	e772      	b.n	2d10 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    2e2a:	2700      	movs	r7, #0
		res = 0;
    2e2c:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2e2e:	f04f 0a06 	mov.w	sl, #6
    2e32:	e76d      	b.n	2d10 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2e34:	462b      	mov	r3, r5
    2e36:	e787      	b.n	2d48 <process_event+0x94>
			if (transit != NULL) {
    2e38:	f1b9 0f00 	cmp.w	r9, #0
    2e3c:	d1d1      	bne.n	2de2 <process_event+0x12e>
	__asm__ volatile(
    2e3e:	f04f 0320 	mov.w	r3, #32
    2e42:	f3ef 8811 	mrs	r8, BASEPRI
    2e46:	f383 8812 	msr	BASEPRI_MAX, r3
    2e4a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2e4e:	8b23      	ldrh	r3, [r4, #24]
    2e50:	f023 0308 	bic.w	r3, r3, #8
    2e54:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2e56:	8b25      	ldrh	r5, [r4, #24]
    2e58:	06ea      	lsls	r2, r5, #27
    2e5a:	d52e      	bpl.n	2eba <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2e5c:	f025 0310 	bic.w	r3, r5, #16
    2e60:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    2e62:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    2e66:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2e68:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    2e6a:	2e00      	cmp	r6, #0
    2e6c:	f6bf af6f 	bge.w	2d4e <process_event+0x9a>
	list->head = NULL;
    2e70:	2300      	movs	r3, #0
		*clients = mgr->clients;
    2e72:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    2e74:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2e78:	f021 0107 	bic.w	r1, r1, #7
    2e7c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2e80:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2e82:	8b21      	ldrh	r1, [r4, #24]
    2e84:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2e88:	45aa      	cmp	sl, r5
    2e8a:	f04f 0900 	mov.w	r9, #0
    2e8e:	f47f af3f 	bne.w	2d10 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    2e92:	2f00      	cmp	r7, #0
    2e94:	d09b      	beq.n	2dce <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2e96:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2e9a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    2e9c:	f388 8811 	msr	BASEPRI, r8
    2ea0:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    2ea4:	2f00      	cmp	r7, #0
    2ea6:	d0c7      	beq.n	2e38 <process_event+0x184>
	return node->next;
    2ea8:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    2eaa:	4639      	mov	r1, r7
    2eac:	4633      	mov	r3, r6
    2eae:	4652      	mov	r2, sl
    2eb0:	4620      	mov	r0, r4
    2eb2:	f008 ffd3 	bl	be5c <notify_one>
	list->head = node;
    2eb6:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    2eb8:	e7f4      	b.n	2ea4 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2eba:	06ab      	lsls	r3, r5, #26
    2ebc:	f57f af1a 	bpl.w	2cf4 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2ec0:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2ec4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    2ec6:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    2eca:	e6ff      	b.n	2ccc <process_event+0x18>
    2ecc:	0000be89 	.word	0x0000be89

00002ed0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    2ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ed4:	4681      	mov	r9, r0
    2ed6:	b095      	sub	sp, #84	; 0x54
    2ed8:	468b      	mov	fp, r1
    2eda:	4617      	mov	r7, r2
    2edc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2ede:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2ee0:	7838      	ldrb	r0, [r7, #0]
    2ee2:	b908      	cbnz	r0, 2ee8 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    2ee4:	4628      	mov	r0, r5
    2ee6:	e358      	b.n	359a <CONFIG_USB_DEVICE_VID+0x5b7>
			OUTC(*fp++);
    2ee8:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    2eea:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    2eec:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    2eee:	d006      	beq.n	2efe <z_cbvprintf_impl+0x2e>
			OUTC('%');
    2ef0:	4659      	mov	r1, fp
    2ef2:	47c8      	blx	r9
    2ef4:	2800      	cmp	r0, #0
    2ef6:	f2c0 8350 	blt.w	359a <CONFIG_USB_DEVICE_VID+0x5b7>
    2efa:	3501      	adds	r5, #1
		if (bps == NULL) {
    2efc:	e1fb      	b.n	32f6 <CONFIG_USB_DEVICE_VID+0x313>
		} state = {
    2efe:	2218      	movs	r2, #24
    2f00:	2100      	movs	r1, #0
    2f02:	a80e      	add	r0, sp, #56	; 0x38
    2f04:	f009 faf5 	bl	c4f2 <memset>
	if (*sp == '%') {
    2f08:	787b      	ldrb	r3, [r7, #1]
    2f0a:	2b25      	cmp	r3, #37	; 0x25
    2f0c:	d07d      	beq.n	300a <CONFIG_USB_DEVICE_VID+0x27>
    2f0e:	2300      	movs	r3, #0
    2f10:	1c78      	adds	r0, r7, #1
    2f12:	4698      	mov	r8, r3
    2f14:	469e      	mov	lr, r3
    2f16:	469c      	mov	ip, r3
    2f18:	461e      	mov	r6, r3
    2f1a:	4601      	mov	r1, r0
		switch (*sp) {
    2f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
    2f20:	2a2b      	cmp	r2, #43	; 0x2b
    2f22:	f000 80a1 	beq.w	3068 <CONFIG_USB_DEVICE_VID+0x85>
    2f26:	f200 8098 	bhi.w	305a <CONFIG_USB_DEVICE_VID+0x77>
    2f2a:	2a20      	cmp	r2, #32
    2f2c:	f000 809f 	beq.w	306e <CONFIG_USB_DEVICE_VID+0x8b>
    2f30:	2a23      	cmp	r2, #35	; 0x23
    2f32:	f000 809f 	beq.w	3074 <CONFIG_USB_DEVICE_VID+0x91>
    2f36:	b12b      	cbz	r3, 2f44 <z_cbvprintf_impl+0x74>
    2f38:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2f40:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    2f44:	f1b8 0f00 	cmp.w	r8, #0
    2f48:	d005      	beq.n	2f56 <z_cbvprintf_impl+0x86>
    2f4a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2f4e:	f043 0320 	orr.w	r3, r3, #32
    2f52:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    2f56:	f1be 0f00 	cmp.w	lr, #0
    2f5a:	d005      	beq.n	2f68 <z_cbvprintf_impl+0x98>
    2f5c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2f60:	f043 0310 	orr.w	r3, r3, #16
    2f64:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    2f68:	f1bc 0f00 	cmp.w	ip, #0
    2f6c:	d005      	beq.n	2f7a <z_cbvprintf_impl+0xaa>
    2f6e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2f72:	f043 0308 	orr.w	r3, r3, #8
    2f76:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    2f7a:	b12e      	cbz	r6, 2f88 <z_cbvprintf_impl+0xb8>
    2f7c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2f80:	f043 0304 	orr.w	r3, r3, #4
    2f84:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    2f88:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2f8c:	f003 0044 	and.w	r0, r3, #68	; 0x44
    2f90:	2844      	cmp	r0, #68	; 0x44
    2f92:	d103      	bne.n	2f9c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    2f94:	f36f 1386 	bfc	r3, #6, #1
    2f98:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    2f9c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    2fa0:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    2fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2fa6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    2faa:	d17f      	bne.n	30ac <CONFIG_USB_DEVICE_VID+0xc9>
		conv->width_star = true;
    2fac:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    2fb0:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    2fb4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    2fb6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    2fba:	781a      	ldrb	r2, [r3, #0]
    2fbc:	2a2e      	cmp	r2, #46	; 0x2e
    2fbe:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    2fc2:	bf0c      	ite	eq
    2fc4:	2101      	moveq	r1, #1
    2fc6:	2100      	movne	r1, #0
    2fc8:	f361 0241 	bfi	r2, r1, #1, #1
    2fcc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    2fd0:	d178      	bne.n	30c4 <CONFIG_USB_DEVICE_VID+0xe1>
	if (*sp == '*') {
    2fd2:	785a      	ldrb	r2, [r3, #1]
    2fd4:	2a2a      	cmp	r2, #42	; 0x2a
    2fd6:	d06e      	beq.n	30b6 <CONFIG_USB_DEVICE_VID+0xd3>
	++sp;
    2fd8:	3301      	adds	r3, #1
	size_t val = 0;
    2fda:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    2fdc:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    2fe0:	4619      	mov	r1, r3
    2fe2:	f811 0b01 	ldrb.w	r0, [r1], #1
    2fe6:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    2fea:	2e09      	cmp	r6, #9
    2fec:	f240 8095 	bls.w	311a <CONFIG_USB_DEVICE_VID+0x137>
	conv->unsupported |= ((conv->prec_value < 0)
    2ff0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    2ff4:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    2ff6:	f3c1 0040 	ubfx	r0, r1, #1, #1
    2ffa:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    2ffe:	460a      	mov	r2, r1
    3000:	f360 0241 	bfi	r2, r0, #1, #1
    3004:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    3008:	e05c      	b.n	30c4 <CONFIG_USB_DEVICE_VID+0xe1>
		conv->specifier = *sp++;
    300a:	1cba      	adds	r2, r7, #2
    300c:	9203      	str	r2, [sp, #12]
    300e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    3012:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    3016:	07da      	lsls	r2, r3, #31
    3018:	f140 812e 	bpl.w	3278 <CONFIG_USB_DEVICE_VID+0x295>
			width = va_arg(ap, int);
    301c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    3020:	f1b8 0f00 	cmp.w	r8, #0
    3024:	da07      	bge.n	3036 <CONFIG_USB_DEVICE_VID+0x53>
				conv->flag_dash = true;
    3026:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    302a:	f042 0204 	orr.w	r2, r2, #4
    302e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    3032:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    3036:	075e      	lsls	r6, r3, #29
    3038:	f140 8127 	bpl.w	328a <CONFIG_USB_DEVICE_VID+0x2a7>
			int arg = va_arg(ap, int);
    303c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    3040:	f1ba 0f00 	cmp.w	sl, #0
    3044:	f280 8126 	bge.w	3294 <CONFIG_USB_DEVICE_VID+0x2b1>
				conv->prec_present = false;
    3048:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    304c:	f36f 0341 	bfc	r3, #1, #1
    3050:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    3054:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    3058:	e11c      	b.n	3294 <CONFIG_USB_DEVICE_VID+0x2b1>
		switch (*sp) {
    305a:	2a2d      	cmp	r2, #45	; 0x2d
    305c:	d00d      	beq.n	307a <CONFIG_USB_DEVICE_VID+0x97>
    305e:	2a30      	cmp	r2, #48	; 0x30
    3060:	f47f af69 	bne.w	2f36 <z_cbvprintf_impl+0x66>
    3064:	2301      	movs	r3, #1
	} while (loop);
    3066:	e758      	b.n	2f1a <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    3068:	f04f 0c01 	mov.w	ip, #1
    306c:	e755      	b.n	2f1a <z_cbvprintf_impl+0x4a>
    306e:	f04f 0e01 	mov.w	lr, #1
    3072:	e752      	b.n	2f1a <z_cbvprintf_impl+0x4a>
    3074:	f04f 0801 	mov.w	r8, #1
    3078:	e74f      	b.n	2f1a <z_cbvprintf_impl+0x4a>
    307a:	2601      	movs	r6, #1
    307c:	e74d      	b.n	2f1a <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    307e:	fb0e 6202 	mla	r2, lr, r2, r6
    3082:	3a30      	subs	r2, #48	; 0x30
    3084:	4603      	mov	r3, r0
    3086:	4618      	mov	r0, r3
    3088:	f810 6b01 	ldrb.w	r6, [r0], #1
    308c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    3090:	f1bc 0f09 	cmp.w	ip, #9
    3094:	d9f3      	bls.n	307e <CONFIG_USB_DEVICE_VID+0x9b>
	if (sp != wp) {
    3096:	4299      	cmp	r1, r3
    3098:	d08f      	beq.n	2fba <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    309a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    309e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    30a0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    30a2:	f362 0141 	bfi	r1, r2, #1, #1
    30a6:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    30aa:	e786      	b.n	2fba <z_cbvprintf_impl+0xea>
    30ac:	460b      	mov	r3, r1
	size_t val = 0;
    30ae:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    30b0:	f04f 0e0a 	mov.w	lr, #10
    30b4:	e7e7      	b.n	3086 <CONFIG_USB_DEVICE_VID+0xa3>
		conv->prec_star = true;
    30b6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    30ba:	f042 0204 	orr.w	r2, r2, #4
    30be:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    30c2:	3302      	adds	r3, #2
	switch (*sp) {
    30c4:	781a      	ldrb	r2, [r3, #0]
    30c6:	2a6c      	cmp	r2, #108	; 0x6c
    30c8:	d047      	beq.n	315a <CONFIG_USB_DEVICE_VID+0x177>
    30ca:	d82b      	bhi.n	3124 <CONFIG_USB_DEVICE_VID+0x141>
    30cc:	2a68      	cmp	r2, #104	; 0x68
    30ce:	d031      	beq.n	3134 <CONFIG_USB_DEVICE_VID+0x151>
    30d0:	2a6a      	cmp	r2, #106	; 0x6a
    30d2:	d04b      	beq.n	316c <CONFIG_USB_DEVICE_VID+0x189>
    30d4:	2a4c      	cmp	r2, #76	; 0x4c
    30d6:	d051      	beq.n	317c <CONFIG_USB_DEVICE_VID+0x199>
	conv->specifier = *sp++;
    30d8:	461a      	mov	r2, r3
    30da:	f812 3b01 	ldrb.w	r3, [r2], #1
    30de:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    30e0:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    30e2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    30e6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    30ea:	f200 80be 	bhi.w	326a <CONFIG_USB_DEVICE_VID+0x287>
    30ee:	2b6d      	cmp	r3, #109	; 0x6d
    30f0:	d851      	bhi.n	3196 <CONFIG_USB_DEVICE_VID+0x1b3>
    30f2:	2b69      	cmp	r3, #105	; 0x69
    30f4:	f200 80b9 	bhi.w	326a <CONFIG_USB_DEVICE_VID+0x287>
    30f8:	2b57      	cmp	r3, #87	; 0x57
    30fa:	d867      	bhi.n	31cc <CONFIG_USB_DEVICE_VID+0x1e9>
    30fc:	2b41      	cmp	r3, #65	; 0x41
    30fe:	d003      	beq.n	3108 <CONFIG_USB_DEVICE_VID+0x125>
    3100:	3b45      	subs	r3, #69	; 0x45
    3102:	2b02      	cmp	r3, #2
    3104:	f200 80b1 	bhi.w	326a <CONFIG_USB_DEVICE_VID+0x287>
		conv->specifier_cat = SPECIFIER_FP;
    3108:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    310c:	2204      	movs	r2, #4
    310e:	f362 0302 	bfi	r3, r2, #0, #3
    3112:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    3116:	2301      	movs	r3, #1
			break;
    3118:	e073      	b.n	3202 <CONFIG_USB_DEVICE_VID+0x21f>
		val = 10U * val + *sp++ - '0';
    311a:	fb0c 0202 	mla	r2, ip, r2, r0
    311e:	3a30      	subs	r2, #48	; 0x30
    3120:	460b      	mov	r3, r1
    3122:	e75d      	b.n	2fe0 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    3124:	2a74      	cmp	r2, #116	; 0x74
    3126:	d025      	beq.n	3174 <CONFIG_USB_DEVICE_VID+0x191>
    3128:	2a7a      	cmp	r2, #122	; 0x7a
    312a:	d1d5      	bne.n	30d8 <CONFIG_USB_DEVICE_VID+0xf5>
		conv->length_mod = LENGTH_Z;
    312c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    3130:	2106      	movs	r1, #6
    3132:	e00c      	b.n	314e <CONFIG_USB_DEVICE_VID+0x16b>
		if (*++sp == 'h') {
    3134:	785a      	ldrb	r2, [r3, #1]
    3136:	2a68      	cmp	r2, #104	; 0x68
    3138:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    313c:	d106      	bne.n	314c <CONFIG_USB_DEVICE_VID+0x169>
			conv->length_mod = LENGTH_HH;
    313e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    3140:	f361 02c6 	bfi	r2, r1, #3, #4
    3144:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    3148:	3302      	adds	r3, #2
    314a:	e7c5      	b.n	30d8 <CONFIG_USB_DEVICE_VID+0xf5>
			conv->length_mod = LENGTH_H;
    314c:	2102      	movs	r1, #2
    314e:	f361 02c6 	bfi	r2, r1, #3, #4
    3152:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    3156:	3301      	adds	r3, #1
    3158:	e7be      	b.n	30d8 <CONFIG_USB_DEVICE_VID+0xf5>
		if (*++sp == 'l') {
    315a:	785a      	ldrb	r2, [r3, #1]
    315c:	2a6c      	cmp	r2, #108	; 0x6c
    315e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    3162:	d101      	bne.n	3168 <CONFIG_USB_DEVICE_VID+0x185>
			conv->length_mod = LENGTH_LL;
    3164:	2104      	movs	r1, #4
    3166:	e7eb      	b.n	3140 <CONFIG_USB_DEVICE_VID+0x15d>
			conv->length_mod = LENGTH_L;
    3168:	2103      	movs	r1, #3
    316a:	e7f0      	b.n	314e <CONFIG_USB_DEVICE_VID+0x16b>
		conv->length_mod = LENGTH_J;
    316c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    3170:	2105      	movs	r1, #5
    3172:	e7ec      	b.n	314e <CONFIG_USB_DEVICE_VID+0x16b>
		conv->length_mod = LENGTH_T;
    3174:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    3178:	2107      	movs	r1, #7
    317a:	e7e8      	b.n	314e <CONFIG_USB_DEVICE_VID+0x16b>
		conv->unsupported = true;
    317c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    3180:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    3184:	f022 0202 	bic.w	r2, r2, #2
    3188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    318c:	f042 0202 	orr.w	r2, r2, #2
    3190:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    3194:	e7df      	b.n	3156 <CONFIG_USB_DEVICE_VID+0x173>
	switch (conv->specifier) {
    3196:	3b6e      	subs	r3, #110	; 0x6e
    3198:	b2d9      	uxtb	r1, r3
    319a:	2301      	movs	r3, #1
    319c:	408b      	lsls	r3, r1
    319e:	f240 4182 	movw	r1, #1154	; 0x482
    31a2:	420b      	tst	r3, r1
    31a4:	d137      	bne.n	3216 <CONFIG_USB_DEVICE_VID+0x233>
    31a6:	f013 0f24 	tst.w	r3, #36	; 0x24
    31aa:	d151      	bne.n	3250 <CONFIG_USB_DEVICE_VID+0x26d>
    31ac:	07d8      	lsls	r0, r3, #31
    31ae:	d55c      	bpl.n	326a <CONFIG_USB_DEVICE_VID+0x287>
		conv->specifier_cat = SPECIFIER_PTR;
    31b0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    31b4:	2103      	movs	r1, #3
    31b6:	f361 0302 	bfi	r3, r1, #0, #3
    31ba:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    31be:	f002 0378 	and.w	r3, r2, #120	; 0x78
    31c2:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    31c6:	424b      	negs	r3, r1
    31c8:	414b      	adcs	r3, r1
    31ca:	e01a      	b.n	3202 <CONFIG_USB_DEVICE_VID+0x21f>
	switch (conv->specifier) {
    31cc:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    31d0:	b2c9      	uxtb	r1, r1
    31d2:	2001      	movs	r0, #1
    31d4:	fa00 f101 	lsl.w	r1, r0, r1
    31d8:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    31dc:	d194      	bne.n	3108 <CONFIG_USB_DEVICE_VID+0x125>
    31de:	f640 0601 	movw	r6, #2049	; 0x801
    31e2:	4231      	tst	r1, r6
    31e4:	d11d      	bne.n	3222 <CONFIG_USB_DEVICE_VID+0x23f>
    31e6:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    31ea:	d03e      	beq.n	326a <CONFIG_USB_DEVICE_VID+0x287>
		conv->specifier_cat = SPECIFIER_SINT;
    31ec:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    31f0:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    31f4:	f002 0278 	and.w	r2, r2, #120	; 0x78
    31f8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    31fa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    31fe:	d034      	beq.n	326a <CONFIG_USB_DEVICE_VID+0x287>
	bool unsupported = false;
    3200:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    3202:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    3206:	f3c2 0140 	ubfx	r1, r2, #1, #1
    320a:	430b      	orrs	r3, r1
    320c:	f363 0241 	bfi	r2, r3, #1, #1
    3210:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    3214:	e6fd      	b.n	3012 <CONFIG_USB_DEVICE_VID+0x2f>
		conv->specifier_cat = SPECIFIER_UINT;
    3216:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    321a:	2102      	movs	r1, #2
    321c:	f361 0302 	bfi	r3, r1, #0, #3
    3220:	e7e8      	b.n	31f4 <CONFIG_USB_DEVICE_VID+0x211>
    3222:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    3226:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    3228:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    322c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    3230:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    3232:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    3236:	bf02      	ittt	eq
    3238:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    323c:	f041 0101 	orreq.w	r1, r1, #1
    3240:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    3244:	2b63      	cmp	r3, #99	; 0x63
    3246:	d1db      	bne.n	3200 <CONFIG_USB_DEVICE_VID+0x21d>
			unsupported = (conv->length_mod != LENGTH_NONE);
    3248:	1e13      	subs	r3, r2, #0
    324a:	bf18      	it	ne
    324c:	2301      	movne	r3, #1
    324e:	e7d8      	b.n	3202 <CONFIG_USB_DEVICE_VID+0x21f>
		conv->specifier_cat = SPECIFIER_PTR;
    3250:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    3254:	2103      	movs	r1, #3
    3256:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    325a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    325e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    3262:	bf14      	ite	ne
    3264:	2301      	movne	r3, #1
    3266:	2300      	moveq	r3, #0
    3268:	e7cb      	b.n	3202 <CONFIG_USB_DEVICE_VID+0x21f>
		conv->invalid = true;
    326a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    326e:	f043 0301 	orr.w	r3, r3, #1
    3272:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    3276:	e7c3      	b.n	3200 <CONFIG_USB_DEVICE_VID+0x21d>
		} else if (conv->width_present) {
    3278:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    327c:	2a00      	cmp	r2, #0
			width = conv->width_value;
    327e:	bfb4      	ite	lt
    3280:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    3284:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    3288:	e6d5      	b.n	3036 <CONFIG_USB_DEVICE_VID+0x53>
		} else if (conv->prec_present) {
    328a:	0798      	lsls	r0, r3, #30
    328c:	f57f aee2 	bpl.w	3054 <CONFIG_USB_DEVICE_VID+0x71>
			precision = conv->prec_value;
    3290:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    3294:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    3298:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    329a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    329e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    32a2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    32a6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    32a8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    32ac:	d133      	bne.n	3316 <CONFIG_USB_DEVICE_VID+0x333>
			switch (length_mod) {
    32ae:	1ecb      	subs	r3, r1, #3
    32b0:	2b04      	cmp	r3, #4
    32b2:	d804      	bhi.n	32be <CONFIG_USB_DEVICE_VID+0x2db>
    32b4:	e8df f003 	tbb	[pc, r3]
    32b8:	21464621 	.word	0x21464621
    32bc:	21          	.byte	0x21
    32bd:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    32be:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    32c0:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    32c2:	ea4f 72e3 	mov.w	r2, r3, asr #31
    32c6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    32ca:	d11c      	bne.n	3306 <CONFIG_USB_DEVICE_VID+0x323>
				value->sint = (signed char)value->sint;
    32cc:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    32d0:	17da      	asrs	r2, r3, #31
    32d2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    32d6:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    32d8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    32dc:	f013 0603 	ands.w	r6, r3, #3
    32e0:	d050      	beq.n	3384 <CONFIG_USB_DEVICE_VID+0x3a1>
			OUTS(sp, fp);
    32e2:	9b03      	ldr	r3, [sp, #12]
    32e4:	463a      	mov	r2, r7
    32e6:	4659      	mov	r1, fp
    32e8:	4648      	mov	r0, r9
    32ea:	f008 ff0f 	bl	c10c <outs>
    32ee:	2800      	cmp	r0, #0
    32f0:	f2c0 8153 	blt.w	359a <CONFIG_USB_DEVICE_VID+0x5b7>
    32f4:	4405      	add	r5, r0
			continue;
    32f6:	9f03      	ldr	r7, [sp, #12]
    32f8:	e5f2      	b.n	2ee0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    32fa:	f854 3b04 	ldr.w	r3, [r4], #4
    32fe:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    3300:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    3304:	e7e8      	b.n	32d8 <CONFIG_USB_DEVICE_VID+0x2f5>
			} else if (length_mod == LENGTH_H) {
    3306:	2902      	cmp	r1, #2
    3308:	d1e5      	bne.n	32d6 <CONFIG_USB_DEVICE_VID+0x2f3>
				value->sint = (short)value->sint;
    330a:	b21a      	sxth	r2, r3
    330c:	f343 33c0 	sbfx	r3, r3, #15, #1
    3310:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    3314:	e7df      	b.n	32d6 <CONFIG_USB_DEVICE_VID+0x2f3>
		} else if (specifier_cat == SPECIFIER_UINT) {
    3316:	2b02      	cmp	r3, #2
    3318:	d124      	bne.n	3364 <CONFIG_USB_DEVICE_VID+0x381>
			switch (length_mod) {
    331a:	1ecb      	subs	r3, r1, #3
    331c:	2b04      	cmp	r3, #4
    331e:	d804      	bhi.n	332a <CONFIG_USB_DEVICE_VID+0x347>
    3320:	e8df f003 	tbb	[pc, r3]
    3324:	18101018 	.word	0x18101018
    3328:	18          	.byte	0x18
    3329:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    332a:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    332c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    3330:	f04f 0200 	mov.w	r2, #0
    3334:	d014      	beq.n	3360 <CONFIG_USB_DEVICE_VID+0x37d>
			} else if (length_mod == LENGTH_H) {
    3336:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    3338:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    333c:	d1cc      	bne.n	32d8 <CONFIG_USB_DEVICE_VID+0x2f5>
				value->uint = (unsigned short)value->uint;
    333e:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    3340:	930e      	str	r3, [sp, #56]	; 0x38
    3342:	e7c9      	b.n	32d8 <CONFIG_USB_DEVICE_VID+0x2f5>
					(uint_value_type)va_arg(ap,
    3344:	3407      	adds	r4, #7
    3346:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    334a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    334e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    3352:	e7c1      	b.n	32d8 <CONFIG_USB_DEVICE_VID+0x2f5>
					(uint_value_type)va_arg(ap, size_t);
    3354:	f854 3b04 	ldr.w	r3, [r4], #4
    3358:	930e      	str	r3, [sp, #56]	; 0x38
    335a:	2300      	movs	r3, #0
    335c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    335e:	e7bb      	b.n	32d8 <CONFIG_USB_DEVICE_VID+0x2f5>
				value->uint = (unsigned char)value->uint;
    3360:	b2db      	uxtb	r3, r3
    3362:	e7cd      	b.n	3300 <CONFIG_USB_DEVICE_VID+0x31d>
		} else if (specifier_cat == SPECIFIER_FP) {
    3364:	2b04      	cmp	r3, #4
    3366:	d108      	bne.n	337a <CONFIG_USB_DEVICE_VID+0x397>
					(sint_value_type)va_arg(ap, long long);
    3368:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    336a:	f024 0407 	bic.w	r4, r4, #7
    336e:	e9d4 2300 	ldrd	r2, r3, [r4]
    3372:	3408      	adds	r4, #8
    3374:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    3378:	e7ae      	b.n	32d8 <CONFIG_USB_DEVICE_VID+0x2f5>
		} else if (specifier_cat == SPECIFIER_PTR) {
    337a:	2b03      	cmp	r3, #3
    337c:	d1ac      	bne.n	32d8 <CONFIG_USB_DEVICE_VID+0x2f5>
			value->ptr = va_arg(ap, void *);
    337e:	f854 3b04 	ldr.w	r3, [r4], #4
    3382:	e7dd      	b.n	3340 <CONFIG_USB_DEVICE_VID+0x35d>
		switch (conv->specifier) {
    3384:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    3388:	2878      	cmp	r0, #120	; 0x78
    338a:	d8b4      	bhi.n	32f6 <CONFIG_USB_DEVICE_VID+0x313>
    338c:	2862      	cmp	r0, #98	; 0x62
    338e:	d81c      	bhi.n	33ca <CONFIG_USB_DEVICE_VID+0x3e7>
    3390:	2825      	cmp	r0, #37	; 0x25
    3392:	f43f adad 	beq.w	2ef0 <z_cbvprintf_impl+0x20>
    3396:	2858      	cmp	r0, #88	; 0x58
    3398:	d1ad      	bne.n	32f6 <CONFIG_USB_DEVICE_VID+0x313>
			bps = encode_uint(value->uint, conv, buf, bpe);
    339a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    339e:	9300      	str	r3, [sp, #0]
    33a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    33a4:	ab08      	add	r3, sp, #32
    33a6:	aa10      	add	r2, sp, #64	; 0x40
    33a8:	f008 fe6a 	bl	c080 <encode_uint>
			if (precision >= 0) {
    33ac:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    33b0:	4607      	mov	r7, r0
			if (precision >= 0) {
    33b2:	f280 809a 	bge.w	34ea <CONFIG_USB_DEVICE_VID+0x507>
		if (bps == NULL) {
    33b6:	2f00      	cmp	r7, #0
    33b8:	d09d      	beq.n	32f6 <CONFIG_USB_DEVICE_VID+0x313>
		size_t nj_len = (bpe - bps);
    33ba:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    33be:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    33c0:	2e00      	cmp	r6, #0
    33c2:	f000 80c1 	beq.w	3548 <CONFIG_USB_DEVICE_VID+0x565>
			nj_len += 1U;
    33c6:	3001      	adds	r0, #1
    33c8:	e0be      	b.n	3548 <CONFIG_USB_DEVICE_VID+0x565>
		switch (conv->specifier) {
    33ca:	3863      	subs	r0, #99	; 0x63
    33cc:	2815      	cmp	r0, #21
    33ce:	d892      	bhi.n	32f6 <CONFIG_USB_DEVICE_VID+0x313>
    33d0:	a201      	add	r2, pc, #4	; (adr r2, 33d8 <CONFIG_USB_DEVICE_VID+0x3f5>)
    33d2:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    33d6:	bf00      	nop
    33d8:	000034ad 	.word	0x000034ad
    33dc:	000034bf 	.word	0x000034bf
    33e0:	000032f7 	.word	0x000032f7
    33e4:	000032f7 	.word	0x000032f7
    33e8:	000032f7 	.word	0x000032f7
    33ec:	000032f7 	.word	0x000032f7
    33f0:	000034bf 	.word	0x000034bf
    33f4:	000032f7 	.word	0x000032f7
    33f8:	000032f7 	.word	0x000032f7
    33fc:	000032f7 	.word	0x000032f7
    3400:	000032f7 	.word	0x000032f7
    3404:	0000354d 	.word	0x0000354d
    3408:	000034e5 	.word	0x000034e5
    340c:	0000350b 	.word	0x0000350b
    3410:	000032f7 	.word	0x000032f7
    3414:	000032f7 	.word	0x000032f7
    3418:	00003431 	.word	0x00003431
    341c:	000032f7 	.word	0x000032f7
    3420:	000034e5 	.word	0x000034e5
    3424:	000032f7 	.word	0x000032f7
    3428:	000032f7 	.word	0x000032f7
    342c:	000034e5 	.word	0x000034e5
			if (precision >= 0) {
    3430:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    3434:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    3436:	db35      	blt.n	34a4 <CONFIG_USB_DEVICE_VID+0x4c1>
				len = strnlen(bps, precision);
    3438:	4651      	mov	r1, sl
    343a:	4638      	mov	r0, r7
    343c:	f009 f865 	bl	c50a <strnlen>
			bpe = bps + len;
    3440:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    3444:	2f00      	cmp	r7, #0
    3446:	f43f af56 	beq.w	32f6 <CONFIG_USB_DEVICE_VID+0x313>
		char sign = 0;
    344a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    344c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    3450:	f013 0210 	ands.w	r2, r3, #16
    3454:	9205      	str	r2, [sp, #20]
    3456:	f000 8093 	beq.w	3580 <CONFIG_USB_DEVICE_VID+0x59d>
			nj_len += 2U;
    345a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    345c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    345e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    3460:	bf48      	it	mi
    3462:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    3464:	9204      	str	r2, [sp, #16]
    3466:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    3468:	bf48      	it	mi
    346a:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    346c:	f1b8 0f00 	cmp.w	r8, #0
    3470:	f340 80a0 	ble.w	35b4 <CONFIG_USB_DEVICE_VID+0x5d1>
			if (!conv->flag_dash) {
    3474:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    3478:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    347c:	f3c2 0380 	ubfx	r3, r2, #2, #1
    3480:	0750      	lsls	r0, r2, #29
    3482:	9306      	str	r3, [sp, #24]
    3484:	f100 8096 	bmi.w	35b4 <CONFIG_USB_DEVICE_VID+0x5d1>
				if (conv->flag_zero) {
    3488:	0651      	lsls	r1, r2, #25
    348a:	f140 8089 	bpl.w	35a0 <CONFIG_USB_DEVICE_VID+0x5bd>
					if (sign != 0) {
    348e:	b13e      	cbz	r6, 34a0 <CONFIG_USB_DEVICE_VID+0x4bd>
						OUTC(sign);
    3490:	4659      	mov	r1, fp
    3492:	4630      	mov	r0, r6
    3494:	47c8      	blx	r9
    3496:	2800      	cmp	r0, #0
    3498:	db7f      	blt.n	359a <CONFIG_USB_DEVICE_VID+0x5b7>
    349a:	9b06      	ldr	r3, [sp, #24]
    349c:	3501      	adds	r5, #1
    349e:	461e      	mov	r6, r3
					pad = '0';
    34a0:	2230      	movs	r2, #48	; 0x30
    34a2:	e07e      	b.n	35a2 <CONFIG_USB_DEVICE_VID+0x5bf>
				len = strlen(bps);
    34a4:	4638      	mov	r0, r7
    34a6:	f009 f812 	bl	c4ce <strlen>
    34aa:	e7c9      	b.n	3440 <CONFIG_USB_DEVICE_VID+0x45d>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    34ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    34ae:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    34b2:	2600      	movs	r6, #0
			bps = buf;
    34b4:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    34b6:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    34ba:	2001      	movs	r0, #1
    34bc:	e7c6      	b.n	344c <CONFIG_USB_DEVICE_VID+0x469>
			if (conv->flag_plus) {
    34be:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    34c0:	bf5c      	itt	pl
    34c2:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    34c6:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    34c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    34cc:	bf48      	it	mi
    34ce:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    34d0:	2b00      	cmp	r3, #0
    34d2:	f6bf af62 	bge.w	339a <CONFIG_USB_DEVICE_VID+0x3b7>
				value->uint = (uint_value_type)-sint;
    34d6:	4252      	negs	r2, r2
    34d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    34dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    34e0:	262d      	movs	r6, #45	; 0x2d
    34e2:	e75a      	b.n	339a <CONFIG_USB_DEVICE_VID+0x3b7>
		switch (conv->specifier) {
    34e4:	2600      	movs	r6, #0
    34e6:	e758      	b.n	339a <CONFIG_USB_DEVICE_VID+0x3b7>
		char sign = 0;
    34e8:	2600      	movs	r6, #0
				conv->flag_zero = false;
    34ea:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    34ee:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    34f2:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    34f4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    34f8:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    34fa:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    34fe:	f67f af5a 	bls.w	33b6 <CONFIG_USB_DEVICE_VID+0x3d3>
					conv->pad0_value = precision - (int)len;
    3502:	ebaa 0303 	sub.w	r3, sl, r3
    3506:	9311      	str	r3, [sp, #68]	; 0x44
    3508:	e755      	b.n	33b6 <CONFIG_USB_DEVICE_VID+0x3d3>
			if (value->ptr != NULL) {
    350a:	980e      	ldr	r0, [sp, #56]	; 0x38
    350c:	b390      	cbz	r0, 3574 <CONFIG_USB_DEVICE_VID+0x591>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    350e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    3512:	9300      	str	r3, [sp, #0]
    3514:	aa10      	add	r2, sp, #64	; 0x40
    3516:	ab08      	add	r3, sp, #32
    3518:	2100      	movs	r1, #0
    351a:	f008 fdb1 	bl	c080 <encode_uint>
				conv->altform_0c = true;
    351e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    3522:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    3526:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    352a:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    352e:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3532:	4607      	mov	r7, r0
				conv->altform_0c = true;
    3534:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    3538:	dad6      	bge.n	34e8 <CONFIG_USB_DEVICE_VID+0x505>
		if (bps == NULL) {
    353a:	2800      	cmp	r0, #0
    353c:	f43f aedb 	beq.w	32f6 <CONFIG_USB_DEVICE_VID+0x313>
		size_t nj_len = (bpe - bps);
    3540:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    3544:	1a18      	subs	r0, r3, r0
		char sign = 0;
    3546:	2600      	movs	r6, #0
    3548:	469a      	mov	sl, r3
    354a:	e77f      	b.n	344c <CONFIG_USB_DEVICE_VID+0x469>
				store_count(conv, value->ptr, count);
    354c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    354e:	2907      	cmp	r1, #7
    3550:	f63f aed1 	bhi.w	32f6 <CONFIG_USB_DEVICE_VID+0x313>
    3554:	e8df f001 	tbb	[pc, r1]
    3558:	0c06040c 	.word	0x0c06040c
    355c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    3560:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    3562:	e6c8      	b.n	32f6 <CONFIG_USB_DEVICE_VID+0x313>
		*(short *)dp = (short)count;
    3564:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    3566:	e6c6      	b.n	32f6 <CONFIG_USB_DEVICE_VID+0x313>
		*(intmax_t *)dp = (intmax_t)count;
    3568:	17ea      	asrs	r2, r5, #31
    356a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    356e:	e6c2      	b.n	32f6 <CONFIG_USB_DEVICE_VID+0x313>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3570:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    3572:	e6c0      	b.n	32f6 <CONFIG_USB_DEVICE_VID+0x313>
    3574:	4f2e      	ldr	r7, [pc, #184]	; (3630 <CONFIG_USB_DEVICE_VID+0x64d>)
		char sign = 0;
    3576:	4606      	mov	r6, r0
			bpe = bps + 5;
    3578:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    357c:	2005      	movs	r0, #5
    357e:	e765      	b.n	344c <CONFIG_USB_DEVICE_VID+0x469>
		} else if (conv->altform_0) {
    3580:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    3582:	bf48      	it	mi
    3584:	3001      	addmi	r0, #1
    3586:	e769      	b.n	345c <CONFIG_USB_DEVICE_VID+0x479>
    3588:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    358a:	4610      	mov	r0, r2
    358c:	9206      	str	r2, [sp, #24]
    358e:	4659      	mov	r1, fp
    3590:	47c8      	blx	r9
    3592:	2800      	cmp	r0, #0
    3594:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    3598:	da04      	bge.n	35a4 <CONFIG_USB_DEVICE_VID+0x5c1>
#undef OUTS
#undef OUTC
}
    359a:	b015      	add	sp, #84	; 0x54
    359c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    35a0:	2220      	movs	r2, #32
					pad = '0';
    35a2:	4643      	mov	r3, r8
				while (width-- > 0) {
    35a4:	4619      	mov	r1, r3
    35a6:	2900      	cmp	r1, #0
    35a8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    35ac:	dcec      	bgt.n	3588 <CONFIG_USB_DEVICE_VID+0x5a5>
    35ae:	4445      	add	r5, r8
    35b0:	1a6d      	subs	r5, r5, r1
    35b2:	4698      	mov	r8, r3
		if (sign != 0) {
    35b4:	b12e      	cbz	r6, 35c2 <CONFIG_USB_DEVICE_VID+0x5df>
			OUTC(sign);
    35b6:	4659      	mov	r1, fp
    35b8:	4630      	mov	r0, r6
    35ba:	47c8      	blx	r9
    35bc:	2800      	cmp	r0, #0
    35be:	dbec      	blt.n	359a <CONFIG_USB_DEVICE_VID+0x5b7>
    35c0:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    35c2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    35c6:	06da      	lsls	r2, r3, #27
    35c8:	d401      	bmi.n	35ce <CONFIG_USB_DEVICE_VID+0x5eb>
    35ca:	071b      	lsls	r3, r3, #28
    35cc:	d505      	bpl.n	35da <CONFIG_USB_DEVICE_VID+0x5f7>
				OUTC('0');
    35ce:	4659      	mov	r1, fp
    35d0:	2030      	movs	r0, #48	; 0x30
    35d2:	47c8      	blx	r9
    35d4:	2800      	cmp	r0, #0
    35d6:	dbe0      	blt.n	359a <CONFIG_USB_DEVICE_VID+0x5b7>
    35d8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    35da:	9b05      	ldr	r3, [sp, #20]
    35dc:	b133      	cbz	r3, 35ec <CONFIG_USB_DEVICE_VID+0x609>
				OUTC(conv->specifier);
    35de:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    35e2:	4659      	mov	r1, fp
    35e4:	47c8      	blx	r9
    35e6:	2800      	cmp	r0, #0
    35e8:	dbd7      	blt.n	359a <CONFIG_USB_DEVICE_VID+0x5b7>
    35ea:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    35ec:	9e04      	ldr	r6, [sp, #16]
    35ee:	442e      	add	r6, r5
    35f0:	e005      	b.n	35fe <CONFIG_USB_DEVICE_VID+0x61b>
				OUTC('0');
    35f2:	4659      	mov	r1, fp
    35f4:	2030      	movs	r0, #48	; 0x30
    35f6:	47c8      	blx	r9
    35f8:	2800      	cmp	r0, #0
    35fa:	dbce      	blt.n	359a <CONFIG_USB_DEVICE_VID+0x5b7>
    35fc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    35fe:	1b73      	subs	r3, r6, r5
    3600:	2b00      	cmp	r3, #0
    3602:	dcf6      	bgt.n	35f2 <CONFIG_USB_DEVICE_VID+0x60f>
			OUTS(bps, bpe);
    3604:	4653      	mov	r3, sl
    3606:	463a      	mov	r2, r7
    3608:	4659      	mov	r1, fp
    360a:	4648      	mov	r0, r9
    360c:	f008 fd7e 	bl	c10c <outs>
    3610:	2800      	cmp	r0, #0
    3612:	dbc2      	blt.n	359a <CONFIG_USB_DEVICE_VID+0x5b7>
    3614:	4405      	add	r5, r0
		while (width > 0) {
    3616:	44a8      	add	r8, r5
    3618:	eba8 0305 	sub.w	r3, r8, r5
    361c:	2b00      	cmp	r3, #0
    361e:	f77f ae6a 	ble.w	32f6 <CONFIG_USB_DEVICE_VID+0x313>
			OUTC(' ');
    3622:	4659      	mov	r1, fp
    3624:	2020      	movs	r0, #32
    3626:	47c8      	blx	r9
    3628:	2800      	cmp	r0, #0
    362a:	dbb6      	blt.n	359a <CONFIG_USB_DEVICE_VID+0x5b7>
    362c:	3501      	adds	r5, #1
			--width;
    362e:	e7f3      	b.n	3618 <CONFIG_USB_DEVICE_VID+0x635>
    3630:	0000ed68 	.word	0x0000ed68

00003634 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    3634:	f004 bd78 	b.w	8128 <SystemInit>

00003638 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    363c:	4605      	mov	r5, r0
	__asm__ volatile(
    363e:	f04f 0320 	mov.w	r3, #32
    3642:	f3ef 8611 	mrs	r6, BASEPRI
    3646:	f383 8812 	msr	BASEPRI_MAX, r3
    364a:	f3bf 8f6f 	isb	sy
	return list->head;
    364e:	4b0e      	ldr	r3, [pc, #56]	; (3688 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3650:	4f0e      	ldr	r7, [pc, #56]	; (368c <pm_state_notify+0x54>)
    3652:	681c      	ldr	r4, [r3, #0]
    3654:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3690 <pm_state_notify+0x58>
    3658:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    365c:	b92c      	cbnz	r4, 366a <pm_state_notify+0x32>
	__asm__ volatile(
    365e:	f386 8811 	msr	BASEPRI, r6
    3662:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    366a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    366e:	2d00      	cmp	r5, #0
    3670:	bf18      	it	ne
    3672:	4613      	movne	r3, r2
		if (callback) {
    3674:	b12b      	cbz	r3, 3682 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3676:	f898 2010 	ldrb.w	r2, [r8, #16]
    367a:	fb09 f202 	mul.w	r2, r9, r2
    367e:	5cb8      	ldrb	r0, [r7, r2]
    3680:	4798      	blx	r3
	return node->next;
    3682:	6824      	ldr	r4, [r4, #0]
    3684:	e7ea      	b.n	365c <pm_state_notify+0x24>
    3686:	bf00      	nop
    3688:	20000bb0 	.word	0x20000bb0
    368c:	20000ba4 	.word	0x20000ba4
    3690:	20001aa8 	.word	0x20001aa8

00003694 <pm_system_resume>:

void pm_system_resume(void)
{
    3694:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    3696:	4b19      	ldr	r3, [pc, #100]	; (36fc <pm_system_resume+0x68>)
    3698:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    369a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    369e:	f004 031f 	and.w	r3, r4, #31
    36a2:	2201      	movs	r2, #1
    36a4:	409a      	lsls	r2, r3
    36a6:	4b16      	ldr	r3, [pc, #88]	; (3700 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    36a8:	0961      	lsrs	r1, r4, #5
    36aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    36ae:	43d0      	mvns	r0, r2
    36b0:	e853 1f00 	ldrex	r1, [r3]
    36b4:	ea01 0500 	and.w	r5, r1, r0
    36b8:	e843 5600 	strex	r6, r5, [r3]
    36bc:	2e00      	cmp	r6, #0
    36be:	d1f7      	bne.n	36b0 <pm_system_resume+0x1c>
    36c0:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    36c4:	420a      	tst	r2, r1
    36c6:	d013      	beq.n	36f0 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    36c8:	4b0e      	ldr	r3, [pc, #56]	; (3704 <pm_system_resume+0x70>)
    36ca:	4d0f      	ldr	r5, [pc, #60]	; (3708 <pm_system_resume+0x74>)
    36cc:	b18b      	cbz	r3, 36f2 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    36ce:	230c      	movs	r3, #12
    36d0:	4363      	muls	r3, r4
    36d2:	18ea      	adds	r2, r5, r3
    36d4:	5ce8      	ldrb	r0, [r5, r3]
    36d6:	7851      	ldrb	r1, [r2, #1]
    36d8:	f008 ff2c 	bl	c534 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    36dc:	2000      	movs	r0, #0
    36de:	f7ff ffab 	bl	3638 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    36e2:	230c      	movs	r3, #12
    36e4:	435c      	muls	r4, r3
    36e6:	192a      	adds	r2, r5, r4
    36e8:	2300      	movs	r3, #0
    36ea:	512b      	str	r3, [r5, r4]
    36ec:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    36f0:	bd70      	pop	{r4, r5, r6, pc}
    36f2:	f383 8811 	msr	BASEPRI, r3
    36f6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    36fa:	e7ef      	b.n	36dc <pm_system_resume+0x48>
    36fc:	20001aa8 	.word	0x20001aa8
    3700:	20000bb8 	.word	0x20000bb8
    3704:	0000c535 	.word	0x0000c535
    3708:	20000ba4 	.word	0x20000ba4

0000370c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    3710:	4b35      	ldr	r3, [pc, #212]	; (37e8 <pm_system_suspend+0xdc>)
{
    3712:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    3714:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    3716:	f04f 0320 	mov.w	r3, #32
    371a:	f3ef 8811 	mrs	r8, BASEPRI
    371e:	f383 8812 	msr	BASEPRI_MAX, r3
    3722:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    3726:	240c      	movs	r4, #12
    3728:	4b30      	ldr	r3, [pc, #192]	; (37ec <pm_system_suspend+0xe0>)
    372a:	4e31      	ldr	r6, [pc, #196]	; (37f0 <pm_system_suspend+0xe4>)
    372c:	436c      	muls	r4, r5
    372e:	191a      	adds	r2, r3, r4
    3730:	5d19      	ldrb	r1, [r3, r4]
    3732:	2900      	cmp	r1, #0
    3734:	d04c      	beq.n	37d0 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    3736:	ca07      	ldmia	r2, {r0, r1, r2}
    3738:	eb06 0c04 	add.w	ip, r6, r4
    373c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    3740:	2200      	movs	r2, #0
    3742:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    3744:	f388 8811 	msr	BASEPRI, r8
    3748:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    374c:	230c      	movs	r3, #12
    374e:	436b      	muls	r3, r5
    3750:	18f2      	adds	r2, r6, r3
    3752:	5cf0      	ldrb	r0, [r6, r3]
    3754:	2800      	cmp	r0, #0
    3756:	d039      	beq.n	37cc <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    3758:	1c7b      	adds	r3, r7, #1
    375a:	d010      	beq.n	377e <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    375c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    3760:	4c24      	ldr	r4, [pc, #144]	; (37f4 <pm_system_suspend+0xe8>)
    3762:	4a25      	ldr	r2, [pc, #148]	; (37f8 <pm_system_suspend+0xec>)
    3764:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3768:	2100      	movs	r1, #0
    376a:	fbec 4100 	umlal	r4, r1, ip, r0
    376e:	2300      	movs	r3, #0
    3770:	4620      	mov	r0, r4
    3772:	f7fe fb61 	bl	1e38 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    3776:	2101      	movs	r1, #1
    3778:	1a38      	subs	r0, r7, r0
    377a:	f004 fc6b 	bl	8054 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    377e:	f007 fdc5 	bl	b30c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    3782:	2001      	movs	r0, #1
    3784:	f7ff ff58 	bl	3638 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3788:	f3bf 8f5b 	dmb	ish
    378c:	4b1b      	ldr	r3, [pc, #108]	; (37fc <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    378e:	096a      	lsrs	r2, r5, #5
    3790:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    3794:	f005 011f 	and.w	r1, r5, #31
    3798:	2201      	movs	r2, #1
    379a:	408a      	lsls	r2, r1
    379c:	e853 0f00 	ldrex	r0, [r3]
    37a0:	4310      	orrs	r0, r2
    37a2:	e843 0100 	strex	r1, r0, [r3]
    37a6:	2900      	cmp	r1, #0
    37a8:	d1f8      	bne.n	379c <pm_system_suspend+0x90>
    37aa:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    37ae:	4b14      	ldr	r3, [pc, #80]	; (3800 <pm_system_suspend+0xf4>)
    37b0:	b13b      	cbz	r3, 37c2 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    37b2:	230c      	movs	r3, #12
    37b4:	fb03 f005 	mul.w	r0, r3, r5
    37b8:	1833      	adds	r3, r6, r0
    37ba:	5c30      	ldrb	r0, [r6, r0]
    37bc:	7859      	ldrb	r1, [r3, #1]
    37be:	f008 fead 	bl	c51c <pm_state_set>
	if (atomic_add(&_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    37c2:	f7ff ff67 	bl	3694 <pm_system_resume>
	k_sched_unlock();
    37c6:	f007 fdb5 	bl	b334 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    37ca:	2001      	movs	r0, #1
}
    37cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    37d0:	4601      	mov	r1, r0
    37d2:	4628      	mov	r0, r5
    37d4:	f000 f816 	bl	3804 <pm_policy_next_state>
		if (info != NULL) {
    37d8:	2800      	cmp	r0, #0
    37da:	d0b3      	beq.n	3744 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    37dc:	c807      	ldmia	r0, {r0, r1, r2}
    37de:	4434      	add	r4, r6
    37e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    37e4:	e7ae      	b.n	3744 <pm_system_suspend+0x38>
    37e6:	bf00      	nop
    37e8:	20001aa8 	.word	0x20001aa8
    37ec:	20000b98 	.word	0x20000b98
    37f0:	20000ba4 	.word	0x20000ba4
    37f4:	000f423f 	.word	0x000f423f
    37f8:	000f4240 	.word	0x000f4240
    37fc:	20000bb8 	.word	0x20000bb8
    3800:	0000c51d 	.word	0x0000c51d

00003804 <pm_policy_next_state>:
	next_event_cyc = new_next_event_cyc;
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    3804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		cyc = k_ticks_to_cyc_ceil32(ticks);
	}

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);

	if (next_event_cyc >= 0) {
    3808:	4c38      	ldr	r4, [pc, #224]	; (38ec <pm_policy_next_state+0xe8>)
{
    380a:	b085      	sub	sp, #20
		cyc = k_ticks_to_cyc_ceil32(ticks);
    380c:	1c4b      	adds	r3, r1, #1
{
    380e:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3810:	a903      	add	r1, sp, #12
		cyc = k_ticks_to_cyc_ceil32(ticks);
    3812:	bf0c      	ite	eq
    3814:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
    3818:	f04f 0800 	movne.w	r8, #0
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    381c:	f000 f86e 	bl	38fc <pm_state_cpu_get_all>
	if (next_event_cyc >= 0) {
    3820:	6863      	ldr	r3, [r4, #4]
    3822:	2b00      	cmp	r3, #0
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3824:	4605      	mov	r5, r0
	if (next_event_cyc >= 0) {
    3826:	db12      	blt.n	384e <pm_policy_next_state+0x4a>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    3828:	f009 fedb 	bl	d5e2 <sys_clock_cycle_get_32>
		uint32_t cyc_curr = k_cycle_get_32();
		int64_t cyc_evt = next_event_cyc - cyc_curr;
    382c:	e9d4 3200 	ldrd	r3, r2, [r4]
    3830:	1a1c      	subs	r4, r3, r0
    3832:	f162 0600 	sbc.w	r6, r2, #0

		/* event happening after cycle counter max value, pad */
		if (next_event_cyc <= cyc_curr) {
    3836:	4298      	cmp	r0, r3
    3838:	f04f 0300 	mov.w	r3, #0
    383c:	4193      	sbcs	r3, r2
    383e:	db02      	blt.n	3846 <pm_policy_next_state+0x42>
			cyc_evt += UINT32_MAX;
    3840:	3c01      	subs	r4, #1
    3842:	f146 0600 	adc.w	r6, r6, #0
		}

		if (cyc_evt > 0) {
    3846:	2c01      	cmp	r4, #1
    3848:	f176 0300 	sbcs.w	r3, r6, #0
    384c:	da02      	bge.n	3854 <pm_policy_next_state+0x50>
			 * otherwise, who comes earlier wins
			 */
			if (cyc < 0) {
				cyc = cyc_evt;
			} else {
				cyc = MIN(cyc, cyc_evt);
    384e:	463c      	mov	r4, r7
    3850:	4646      	mov	r6, r8
    3852:	e009      	b.n	3868 <pm_policy_next_state+0x64>
			if (cyc < 0) {
    3854:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    3858:	bf08      	it	eq
    385a:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    385e:	d003      	beq.n	3868 <pm_policy_next_state+0x64>
				cyc = MIN(cyc, cyc_evt);
    3860:	42a7      	cmp	r7, r4
    3862:	eb78 0306 	sbcs.w	r3, r8, r6
    3866:	dbf2      	blt.n	384e <pm_policy_next_state+0x4a>

		min_residency_cyc = k_us_to_cyc_ceil32(state->min_residency_us);
		exit_latency_cyc = k_us_to_cyc_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_cyc >= 0) &&
    3868:	4b21      	ldr	r3, [pc, #132]	; (38f0 <pm_policy_next_state+0xec>)
    386a:	9f03      	ldr	r7, [sp, #12]
    386c:	681b      	ldr	r3, [r3, #0]
    386e:	9300      	str	r3, [sp, #0]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3870:	1e6b      	subs	r3, r5, #1
    3872:	b21b      	sxth	r3, r3
    3874:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3878:	f8df 9078 	ldr.w	r9, [pc, #120]	; 38f4 <pm_policy_next_state+0xf0>
    387c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    3880:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    3884:	f04f 0b00 	mov.w	fp, #0
    3888:	b925      	cbnz	r5, 3894 <pm_policy_next_state+0x90>
		    (cyc >= (min_residency_cyc + exit_latency_cyc))) {
			return state;
		}
	}

	return NULL;
    388a:	46aa      	mov	sl, r5
}
    388c:	4650      	mov	r0, sl
    388e:	b005      	add	sp, #20
    3890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3894:	6878      	ldr	r0, [r7, #4]
    3896:	4a18      	ldr	r2, [pc, #96]	; (38f8 <pm_policy_next_state+0xf4>)
    3898:	46cc      	mov	ip, r9
    389a:	4659      	mov	r1, fp
    389c:	fbe0 c108 	umlal	ip, r1, r0, r8
    38a0:	2300      	movs	r3, #0
    38a2:	4660      	mov	r0, ip
    38a4:	f7fe fac8 	bl	1e38 <__aeabi_uldivmod>
    38a8:	9001      	str	r0, [sp, #4]
    38aa:	68b8      	ldr	r0, [r7, #8]
    38ac:	4a12      	ldr	r2, [pc, #72]	; (38f8 <pm_policy_next_state+0xf4>)
    38ae:	46cc      	mov	ip, r9
    38b0:	4659      	mov	r1, fp
    38b2:	fbe0 c108 	umlal	ip, r1, r0, r8
    38b6:	2300      	movs	r3, #0
    38b8:	4660      	mov	r0, ip
    38ba:	f7fe fabd 	bl	1e38 <__aeabi_uldivmod>
		if ((max_latency_cyc >= 0) &&
    38be:	9b00      	ldr	r3, [sp, #0]
    38c0:	2b00      	cmp	r3, #0
		const struct pm_state_info *state = &cpu_states[i];
    38c2:	46ba      	mov	sl, r7
		if ((max_latency_cyc >= 0) &&
    38c4:	db01      	blt.n	38ca <pm_policy_next_state+0xc6>
    38c6:	4283      	cmp	r3, r0
    38c8:	d90b      	bls.n	38e2 <pm_policy_next_state+0xde>
		if ((cyc < 0) ||
    38ca:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    38ce:	bf08      	it	eq
    38d0:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    38d4:	d0da      	beq.n	388c <pm_policy_next_state+0x88>
		    (cyc >= (min_residency_cyc + exit_latency_cyc))) {
    38d6:	9b01      	ldr	r3, [sp, #4]
    38d8:	4418      	add	r0, r3
		if ((cyc < 0) ||
    38da:	4284      	cmp	r4, r0
    38dc:	f176 0300 	sbcs.w	r3, r6, #0
    38e0:	dad4      	bge.n	388c <pm_policy_next_state+0x88>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    38e2:	3d01      	subs	r5, #1
    38e4:	b2ad      	uxth	r5, r5
    38e6:	3f0c      	subs	r7, #12
    38e8:	e7ce      	b.n	3888 <pm_policy_next_state+0x84>
    38ea:	bf00      	nop
    38ec:	20000000 	.word	0x20000000
    38f0:	200000c0 	.word	0x200000c0
    38f4:	000f423f 	.word	0x000f423f
    38f8:	000f4240 	.word	0x000f4240

000038fc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    38fc:	b908      	cbnz	r0, 3902 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    38fe:	4b02      	ldr	r3, [pc, #8]	; (3908 <pm_state_cpu_get_all+0xc>)
    3900:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3902:	2000      	movs	r0, #0
    3904:	4770      	bx	lr
    3906:	bf00      	nop
    3908:	0000e528 	.word	0x0000e528

0000390c <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    390c:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    390e:	4b0c      	ldr	r3, [pc, #48]	; (3940 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3910:	4e0c      	ldr	r6, [pc, #48]	; (3944 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3912:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3914:	4b0c      	ldr	r3, [pc, #48]	; (3948 <class_handler+0x3c>)
    3916:	42b3      	cmp	r3, r6
    3918:	d303      	bcc.n	3922 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    391a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    391e:	bcf0      	pop	{r4, r5, r6, r7}
    3920:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    3922:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3924:	42bd      	cmp	r5, r7
    3926:	d309      	bcc.n	393c <class_handler+0x30>
		if (iface->class_handler &&
    3928:	691c      	ldr	r4, [r3, #16]
    392a:	b13c      	cbz	r4, 393c <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    392c:	f895 c002 	ldrb.w	ip, [r5, #2]
    3930:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    3932:	45ac      	cmp	ip, r5
    3934:	d102      	bne.n	393c <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    3936:	4623      	mov	r3, r4
}
    3938:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    393a:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    393c:	3324      	adds	r3, #36	; 0x24
    393e:	e7ea      	b.n	3916 <class_handler+0xa>
    3940:	20000bbc 	.word	0x20000bbc
    3944:	20000440 	.word	0x20000440
    3948:	2000041c 	.word	0x2000041c

0000394c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3950:	4c13      	ldr	r4, [pc, #76]	; (39a0 <custom_handler+0x54>)
    3952:	f8df 8050 	ldr.w	r8, [pc, #80]	; 39a4 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3956:	f8df 9050 	ldr.w	r9, [pc, #80]	; 39a8 <custom_handler+0x5c>
{
    395a:	4605      	mov	r5, r0
    395c:	460e      	mov	r6, r1
    395e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3960:	4544      	cmp	r4, r8
    3962:	d303      	bcc.n	396c <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    3964:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    396c:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    396e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    3972:	429a      	cmp	r2, r3
    3974:	d312      	bcc.n	399c <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    3976:	69a3      	ldr	r3, [r4, #24]
    3978:	b183      	cbz	r3, 399c <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    397a:	7890      	ldrb	r0, [r2, #2]
    397c:	7929      	ldrb	r1, [r5, #4]
    397e:	4288      	cmp	r0, r1
    3980:	d105      	bne.n	398e <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    3982:	463a      	mov	r2, r7
    3984:	4631      	mov	r1, r6
    3986:	4628      	mov	r0, r5
}
    3988:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    398c:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    398e:	7952      	ldrb	r2, [r2, #5]
    3990:	2a01      	cmp	r2, #1
    3992:	d103      	bne.n	399c <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    3994:	463a      	mov	r2, r7
    3996:	4631      	mov	r1, r6
    3998:	4628      	mov	r0, r5
    399a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    399c:	3424      	adds	r4, #36	; 0x24
    399e:	e7df      	b.n	3960 <custom_handler+0x14>
    39a0:	2000041c 	.word	0x2000041c
    39a4:	20000440 	.word	0x20000440
    39a8:	20000bbc 	.word	0x20000bbc

000039ac <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    39ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    39b0:	4c0b      	ldr	r4, [pc, #44]	; (39e0 <vendor_handler+0x34>)
    39b2:	f8df 8030 	ldr.w	r8, [pc, #48]	; 39e4 <vendor_handler+0x38>
{
    39b6:	4605      	mov	r5, r0
    39b8:	460e      	mov	r6, r1
    39ba:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    39bc:	4544      	cmp	r4, r8
    39be:	d302      	bcc.n	39c6 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    39c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    39c4:	e009      	b.n	39da <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    39c6:	6963      	ldr	r3, [r4, #20]
    39c8:	b90b      	cbnz	r3, 39ce <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    39ca:	3424      	adds	r4, #36	; 0x24
    39cc:	e7f6      	b.n	39bc <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    39ce:	463a      	mov	r2, r7
    39d0:	4631      	mov	r1, r6
    39d2:	4628      	mov	r0, r5
    39d4:	4798      	blx	r3
    39d6:	2800      	cmp	r0, #0
    39d8:	d1f7      	bne.n	39ca <vendor_handler+0x1e>
}
    39da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39de:	bf00      	nop
    39e0:	2000041c 	.word	0x2000041c
    39e4:	20000440 	.word	0x20000440

000039e8 <disable_endpoint>:
{
    39e8:	b510      	push	{r4, lr}
    39ea:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_addr);
    39ec:	f008 fff4 	bl	c9d8 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    39f0:	f110 0f78 	cmn.w	r0, #120	; 0x78
    39f4:	d000      	beq.n	39f8 <disable_endpoint+0x10>
	} else if (ret) {
    39f6:	b950      	cbnz	r0, 3a0e <disable_endpoint+0x26>
	usb_dev.ep_bm &= ~ep_bm;
    39f8:	4a05      	ldr	r2, [pc, #20]	; (3a10 <disable_endpoint+0x28>)
	ep_bm = get_ep_bm_from_addr(ep_addr);
    39fa:	4620      	mov	r0, r4
    39fc:	f008 fc46 	bl	c28c <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    3a00:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    3a04:	ea23 0300 	bic.w	r3, r3, r0
    3a08:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    3a0c:	2000      	movs	r0, #0
}
    3a0e:	bd10      	pop	{r4, pc}
    3a10:	20000bbc 	.word	0x20000bbc

00003a14 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    3a14:	4802      	ldr	r0, [pc, #8]	; (3a20 <usb_reset_alt_setting+0xc>)
    3a16:	2208      	movs	r2, #8
    3a18:	2100      	movs	r1, #0
    3a1a:	f008 bd6a 	b.w	c4f2 <memset>
    3a1e:	bf00      	nop
    3a20:	20000c77 	.word	0x20000c77

00003a24 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    3a24:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3a26:	4b0b      	ldr	r3, [pc, #44]	; (3a54 <is_ep_valid.part.0+0x30>)
    3a28:	4c0b      	ldr	r4, [pc, #44]	; (3a58 <is_ep_valid.part.0+0x34>)
    3a2a:	42a3      	cmp	r3, r4
    3a2c:	d301      	bcc.n	3a32 <is_ep_valid.part.0+0xe>
	return false;
    3a2e:	2000      	movs	r0, #0
}
    3a30:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    3a32:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3a34:	7f1e      	ldrb	r6, [r3, #28]
    3a36:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    3a38:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3a3a:	b2d5      	uxtb	r5, r2
    3a3c:	42ae      	cmp	r6, r5
    3a3e:	d801      	bhi.n	3a44 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3a40:	3324      	adds	r3, #36	; 0x24
    3a42:	e7f2      	b.n	3a2a <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    3a44:	3201      	adds	r2, #1
    3a46:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    3a4a:	4285      	cmp	r5, r0
    3a4c:	d1f5      	bne.n	3a3a <is_ep_valid.part.0+0x16>
		return true;
    3a4e:	2001      	movs	r0, #1
    3a50:	e7ee      	b.n	3a30 <is_ep_valid.part.0+0xc>
    3a52:	bf00      	nop
    3a54:	2000041c 	.word	0x2000041c
    3a58:	20000440 	.word	0x20000440

00003a5c <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    3a5c:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    3a5e:	4809      	ldr	r0, [pc, #36]	; (3a84 <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    3a60:	7803      	ldrb	r3, [r0, #0]
    3a62:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    3a66:	330a      	adds	r3, #10
    3a68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    3a6c:	b13b      	cbz	r3, 3a7e <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    3a6e:	f100 0208 	add.w	r2, r0, #8
    3a72:	f100 0110 	add.w	r1, r0, #16
    3a76:	4798      	blx	r3
    3a78:	43c0      	mvns	r0, r0
    3a7a:	0fc0      	lsrs	r0, r0, #31
}
    3a7c:	bd08      	pop	{r3, pc}
		return false;
    3a7e:	4618      	mov	r0, r3
    3a80:	e7fc      	b.n	3a7c <usb_handle_request.constprop.0+0x20>
    3a82:	bf00      	nop
    3a84:	20000bbc 	.word	0x20000bbc

00003a88 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    3a88:	2804      	cmp	r0, #4
{
    3a8a:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a8e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
    3a92:	4604      	mov	r4, r0
    3a94:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    3a96:	d016      	beq.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    3a98:	2801      	cmp	r0, #1
    3a9a:	d12d      	bne.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
		if (usb_dev.configured) {
    3a9c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>
    3aa0:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    3aa4:	b343      	cbz	r3, 3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
			usb_cancel_transfers();
    3aa6:	f000 fde5 	bl	4674 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3aaa:	4d21      	ldr	r5, [pc, #132]	; (3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>)
    3aac:	454d      	cmp	r5, r9
    3aae:	d220      	bcs.n	3af2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5a>
		ep_data = cfg_data->endpoint;
    3ab0:	f8d5 b020 	ldr.w	fp, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3ab4:	f04f 0a00 	mov.w	sl, #0
    3ab8:	7f2b      	ldrb	r3, [r5, #28]
    3aba:	fa5f f68a 	uxtb.w	r6, sl
    3abe:	42b3      	cmp	r3, r6
    3ac0:	d804      	bhi.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3ac2:	3524      	adds	r5, #36	; 0x24
    3ac4:	e7f2      	b.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
		usb_reset_alt_setting();
    3ac6:	f7ff ffa5 	bl	3a14 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    3aca:	e7e7      	b.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
			ret = endpoint_callback(&ep_data[n]);
    3acc:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
			if (ret < 0) {
    3ad0:	f10a 0a01 	add.w	sl, sl, #1
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    3ad4:	7930      	ldrb	r0, [r6, #4]
    3ad6:	f008 ff7f 	bl	c9d8 <usb_dc_ep_disable>
    3ada:	4602      	mov	r2, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    3adc:	7930      	ldrb	r0, [r6, #4]
    3ade:	f008 fbd5 	bl	c28c <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    3ae2:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    3ae6:	2a00      	cmp	r2, #0
	usb_dev.ep_bm &= ~ep_bm;
    3ae8:	ea23 0300 	bic.w	r3, r3, r0
    3aec:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    3af0:	dae2      	bge.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
			usb_dev.configured = false;
    3af2:	2300      	movs	r3, #0
    3af4:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3af8:	4d0d      	ldr	r5, [pc, #52]	; (3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3afa:	454d      	cmp	r5, r9
    3afc:	d308      	bcc.n	3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>
	if (usb_dev.user_status_callback) {
    3afe:	4b0b      	ldr	r3, [pc, #44]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3b00:	6a1b      	ldr	r3, [r3, #32]
    3b02:	b16b      	cbz	r3, 3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
		usb_dev.user_status_callback(status, param);
    3b04:	4639      	mov	r1, r7
    3b06:	4620      	mov	r0, r4
}
    3b08:	b001      	add	sp, #4
    3b0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    3b0e:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    3b10:	68eb      	ldr	r3, [r5, #12]
    3b12:	b11b      	cbz	r3, 3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
			cfg_data->cb_usb_status(cfg_data, status, param);
    3b14:	463a      	mov	r2, r7
    3b16:	4621      	mov	r1, r4
    3b18:	4628      	mov	r0, r5
    3b1a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3b1c:	3524      	adds	r5, #36	; 0x24
    3b1e:	e7ec      	b.n	3afa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x62>
}
    3b20:	b001      	add	sp, #4
    3b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b26:	bf00      	nop
    3b28:	20000440 	.word	0x20000440
    3b2c:	20000bbc 	.word	0x20000bbc
    3b30:	2000041c 	.word	0x2000041c

00003b34 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    3b34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    3b36:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    3b38:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    3b3a:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    3b3c:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    3b40:	d007      	beq.n	3b52 <usb_halt_endpoint_req.isra.0+0x1e>
    3b42:	4620      	mov	r0, r4
    3b44:	f7ff ff6e 	bl	3a24 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    3b48:	b178      	cbz	r0, 3b6a <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    3b4a:	4b0d      	ldr	r3, [pc, #52]	; (3b80 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    3b4c:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    3b50:	b158      	cbz	r0, 3b6a <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
    3b52:	4e0b      	ldr	r6, [pc, #44]	; (3b80 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
    3b54:	4620      	mov	r0, r4
		if (halt) {
    3b56:	b155      	cbz	r5, 3b6e <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    3b58:	f002 faee 	bl	6138 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    3b5c:	69f3      	ldr	r3, [r6, #28]
    3b5e:	b11b      	cbz	r3, 3b68 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    3b60:	f10d 0107 	add.w	r1, sp, #7
    3b64:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    3b66:	4798      	blx	r3
		return true;
    3b68:	2001      	movs	r0, #1
}
    3b6a:	b002      	add	sp, #8
    3b6c:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    3b6e:	f002 fb0b 	bl	6188 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    3b72:	69f3      	ldr	r3, [r6, #28]
    3b74:	2b00      	cmp	r3, #0
    3b76:	d0f7      	beq.n	3b68 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    3b78:	f10d 0107 	add.w	r1, sp, #7
    3b7c:	2009      	movs	r0, #9
    3b7e:	e7f2      	b.n	3b66 <usb_halt_endpoint_req.isra.0+0x32>
    3b80:	20000bbc 	.word	0x20000bbc

00003b84 <set_endpoint>:
{
    3b84:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    3b86:	7886      	ldrb	r6, [r0, #2]
    3b88:	f88d 6000 	strb.w	r6, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    3b8c:	7903      	ldrb	r3, [r0, #4]
    3b8e:	7942      	ldrb	r2, [r0, #5]
	if (ep_bm & usb_dev.ep_bm) {
    3b90:	4c1c      	ldr	r4, [pc, #112]	; (3c04 <set_endpoint+0x80>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    3b92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3b96:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    3b9a:	78c3      	ldrb	r3, [r0, #3]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    3b9c:	4630      	mov	r0, r6
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    3b9e:	f003 0303 	and.w	r3, r3, #3
    3ba2:	f88d 3004 	strb.w	r3, [sp, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    3ba6:	f008 fb71 	bl	c28c <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    3baa:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    3bae:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    3bb0:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
    3bb2:	d00b      	beq.n	3bcc <set_endpoint+0x48>
	usb_cancel_transfer(ep_cfg.ep_addr);
    3bb4:	4630      	mov	r0, r6
    3bb6:	f000 fd3f 	bl	4638 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    3bba:	4630      	mov	r0, r6
    3bbc:	f7ff ff14 	bl	39e8 <disable_endpoint>
		if (!k_is_in_isr()) {
    3bc0:	f009 ffe8 	bl	db94 <k_is_in_isr>
    3bc4:	b910      	cbnz	r0, 3bcc <set_endpoint+0x48>
		union { uintptr_t x; int32_t val; } parm0 = { .val = us };
		return (int32_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
    3bc6:	2096      	movs	r0, #150	; 0x96
    3bc8:	f007 fc74 	bl	b4b4 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    3bcc:	4668      	mov	r0, sp
    3bce:	f002 fa8f 	bl	60f0 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    3bd2:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3bd6:	d003      	beq.n	3be0 <set_endpoint+0x5c>
	} else if (ret) {
    3bd8:	b110      	cbz	r0, 3be0 <set_endpoint+0x5c>
		return false;
    3bda:	2000      	movs	r0, #0
}
    3bdc:	b002      	add	sp, #8
    3bde:	bd70      	pop	{r4, r5, r6, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    3be0:	f89d 0000 	ldrb.w	r0, [sp]
    3be4:	f002 fb0c 	bl	6200 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    3be8:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3bec:	d001      	beq.n	3bf2 <set_endpoint+0x6e>
	} else if (ret) {
    3bee:	2800      	cmp	r0, #0
    3bf0:	d1f3      	bne.n	3bda <set_endpoint+0x56>
	usb_dev.ep_bm |= ep_bm;
    3bf2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	usb_dev.configured = true;
    3bf6:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    3bf8:	432b      	orrs	r3, r5
	usb_dev.configured = true;
    3bfa:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    3bfe:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	return true;
    3c02:	e7eb      	b.n	3bdc <set_endpoint+0x58>
    3c04:	20000bbc 	.word	0x20000bbc

00003c08 <usb_handle_standard_request>:
{
    3c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    3c0c:	4d92      	ldr	r5, [pc, #584]	; (3e58 <usb_handle_standard_request+0x250>)
    3c0e:	69ab      	ldr	r3, [r5, #24]
{
    3c10:	4604      	mov	r4, r0
    3c12:	460e      	mov	r6, r1
    3c14:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
    3c16:	b9c3      	cbnz	r3, 3c4a <usb_handle_standard_request+0x42>
	switch (setup->RequestType.recipient) {
    3c18:	7820      	ldrb	r0, [r4, #0]
    3c1a:	f000 001f 	and.w	r0, r0, #31
    3c1e:	2801      	cmp	r0, #1
    3c20:	d076      	beq.n	3d10 <usb_handle_standard_request+0x108>
    3c22:	2802      	cmp	r0, #2
    3c24:	f000 80dc 	beq.w	3de0 <usb_handle_standard_request+0x1d8>
    3c28:	bb00      	cbnz	r0, 3c6c <usb_handle_standard_request+0x64>
	if (usb_reqtype_is_to_host(setup)) {
    3c2a:	f994 1000 	ldrsb.w	r1, [r4]
	uint8_t *data = *data_buf;
    3c2e:	683a      	ldr	r2, [r7, #0]
		switch (setup->bRequest) {
    3c30:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3c32:	2900      	cmp	r1, #0
    3c34:	da2e      	bge.n	3c94 <usb_handle_standard_request+0x8c>
		switch (setup->bRequest) {
    3c36:	2b06      	cmp	r3, #6
    3c38:	d00c      	beq.n	3c54 <usb_handle_standard_request+0x4c>
    3c3a:	2b08      	cmp	r3, #8
    3c3c:	d025      	beq.n	3c8a <usb_handle_standard_request+0x82>
    3c3e:	b9ab      	cbnz	r3, 3c6c <usb_handle_standard_request+0x64>
	data[1] = 0U;
    3c40:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    3c42:	2301      	movs	r3, #1
    3c44:	7013      	strb	r3, [r2, #0]
		*len = 2;
    3c46:	2302      	movs	r3, #2
    3c48:	e103      	b.n	3e52 <usb_handle_standard_request+0x24a>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    3c4a:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    3c4c:	2800      	cmp	r0, #0
    3c4e:	d1e3      	bne.n	3c18 <usb_handle_standard_request+0x10>
		return 0;
    3c50:	2000      	movs	r0, #0
    3c52:	e00d      	b.n	3c70 <usb_handle_standard_request+0x68>
			return usb_get_descriptor(setup, len, data_buf);
    3c54:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    3c56:	0a19      	lsrs	r1, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    3c58:	1f0a      	subs	r2, r1, #4
    3c5a:	2a01      	cmp	r2, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    3c5c:	468c      	mov	ip, r1
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    3c5e:	d905      	bls.n	3c6c <usb_handle_standard_request+0x64>
    3c60:	2907      	cmp	r1, #7
    3c62:	d803      	bhi.n	3c6c <usb_handle_standard_request+0x64>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    3c64:	b2da      	uxtb	r2, r3
	p = (uint8_t *)usb_dev.descriptors;
    3c66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    3c68:	781c      	ldrb	r4, [r3, #0]
    3c6a:	b91c      	cbnz	r4, 3c74 <usb_handle_standard_request+0x6c>
			rc = -EINVAL;
    3c6c:	f06f 0015 	mvn.w	r0, #21
}
    3c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    3c74:	785d      	ldrb	r5, [r3, #1]
    3c76:	4565      	cmp	r5, ip
    3c78:	d103      	bne.n	3c82 <usb_handle_standard_request+0x7a>
			if (cur_index == index) {
    3c7a:	4282      	cmp	r2, r0
    3c7c:	f000 80e4 	beq.w	3e48 <usb_handle_standard_request+0x240>
			cur_index++;
    3c80:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    3c82:	4423      	add	r3, r4
    3c84:	e7f0      	b.n	3c68 <usb_handle_standard_request+0x60>
			*len = p[DESC_bLength];
    3c86:	781b      	ldrb	r3, [r3, #0]
    3c88:	e0e3      	b.n	3e52 <usb_handle_standard_request+0x24a>
			data[0] = usb_dev.configuration;
    3c8a:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    3c8e:	7013      	strb	r3, [r2, #0]
				*len = 1;
    3c90:	2301      	movs	r3, #1
    3c92:	e0de      	b.n	3e52 <usb_handle_standard_request+0x24a>
		switch (setup->bRequest) {
    3c94:	2b05      	cmp	r3, #5
    3c96:	d011      	beq.n	3cbc <usb_handle_standard_request+0xb4>
    3c98:	2b09      	cmp	r3, #9
    3c9a:	d1e7      	bne.n	3c6c <usb_handle_standard_request+0x64>
	if (setup->wValue == 0U) {
    3c9c:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3c9e:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	if (setup->wValue == 0U) {
    3ca0:	2b00      	cmp	r3, #0
    3ca2:	d132      	bne.n	3d0a <usb_handle_standard_request+0x102>
		usb_reset_alt_setting();
    3ca4:	f7ff feb6 	bl	3a14 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    3ca8:	8863      	ldrh	r3, [r4, #2]
    3caa:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
		if (usb_dev.status_callback) {
    3cae:	69eb      	ldr	r3, [r5, #28]
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d0cd      	beq.n	3c50 <usb_handle_standard_request+0x48>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    3cb4:	4969      	ldr	r1, [pc, #420]	; (3e5c <usb_handle_standard_request+0x254>)
    3cb6:	2003      	movs	r0, #3
    3cb8:	4798      	blx	r3
    3cba:	e7c9      	b.n	3c50 <usb_handle_standard_request+0x48>
			return !usb_dc_set_address(setup->wValue);
    3cbc:	78a0      	ldrb	r0, [r4, #2]
    3cbe:	f002 fa05 	bl	60cc <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    3cc2:	2800      	cmp	r0, #0
    3cc4:	d0c4      	beq.n	3c50 <usb_handle_standard_request+0x48>
    3cc6:	e7d1      	b.n	3c6c <usb_handle_standard_request+0x64>
		switch (p[DESC_bDescriptorType]) {
    3cc8:	7873      	ldrb	r3, [r6, #1]
    3cca:	2b04      	cmp	r3, #4
    3ccc:	d010      	beq.n	3cf0 <usb_handle_standard_request+0xe8>
    3cce:	2b05      	cmp	r3, #5
    3cd0:	d011      	beq.n	3cf6 <usb_handle_standard_request+0xee>
    3cd2:	2b02      	cmp	r3, #2
    3cd4:	d104      	bne.n	3ce0 <usb_handle_standard_request+0xd8>
			cur_config = p[CONF_DESC_bConfigurationValue];
    3cd6:	7977      	ldrb	r7, [r6, #5]
			if (cur_config == setup->wValue) {
    3cd8:	8863      	ldrh	r3, [r4, #2]
				found = true;
    3cda:	42bb      	cmp	r3, r7
    3cdc:	bf08      	it	eq
    3cde:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    3ce0:	7833      	ldrb	r3, [r6, #0]
    3ce2:	441e      	add	r6, r3
	while (p[DESC_bLength] != 0U) {
    3ce4:	7833      	ldrb	r3, [r6, #0]
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	d1ee      	bne.n	3cc8 <usb_handle_standard_request+0xc0>
	if (found) {
    3cea:	2800      	cmp	r0, #0
    3cec:	d0be      	beq.n	3c6c <usb_handle_standard_request+0x64>
    3cee:	e7d9      	b.n	3ca4 <usb_handle_standard_request+0x9c>
			cur_alt_setting =
    3cf0:	f896 8003 	ldrb.w	r8, [r6, #3]
			break;
    3cf4:	e7f4      	b.n	3ce0 <usb_handle_standard_request+0xd8>
			if ((cur_config != setup->wValue) ||
    3cf6:	8863      	ldrh	r3, [r4, #2]
    3cf8:	42bb      	cmp	r3, r7
    3cfa:	d1f1      	bne.n	3ce0 <usb_handle_standard_request+0xd8>
    3cfc:	f1b8 0f00 	cmp.w	r8, #0
    3d00:	d1ee      	bne.n	3ce0 <usb_handle_standard_request+0xd8>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    3d02:	4630      	mov	r0, r6
    3d04:	f7ff ff3e 	bl	3b84 <set_endpoint>
			break;
    3d08:	e7ea      	b.n	3ce0 <usb_handle_standard_request+0xd8>
	uint8_t cur_config = 0xFF;
    3d0a:	27ff      	movs	r7, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    3d0c:	46b8      	mov	r8, r7
    3d0e:	e7e9      	b.n	3ce4 <usb_handle_standard_request+0xdc>
	if (!is_device_configured() ||
    3d10:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    3d14:	f8d7 c000 	ldr.w	ip, [r7]
    3d18:	2b00      	cmp	r3, #0
    3d1a:	d0a7      	beq.n	3c6c <usb_handle_standard_request+0x64>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3d1c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    3d1e:	88a2      	ldrh	r2, [r4, #4]
    3d20:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3d24:	463b      	mov	r3, r7
	while (p[DESC_bLength] != 0U) {
    3d26:	7818      	ldrb	r0, [r3, #0]
    3d28:	2800      	cmp	r0, #0
    3d2a:	d09f      	beq.n	3c6c <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    3d2c:	7859      	ldrb	r1, [r3, #1]
    3d2e:	2902      	cmp	r1, #2
    3d30:	d104      	bne.n	3d3c <usb_handle_standard_request+0x134>
			if (interface < cfg_descr->bNumInterfaces) {
    3d32:	f893 8004 	ldrb.w	r8, [r3, #4]
    3d36:	45f0      	cmp	r8, lr
    3d38:	f200 8092 	bhi.w	3e60 <usb_handle_standard_request+0x258>
		p += p[DESC_bLength];
    3d3c:	4403      	add	r3, r0
    3d3e:	e7f2      	b.n	3d26 <usb_handle_standard_request+0x11e>
			data[0] = 0U;
    3d40:	f88c 3000 	strb.w	r3, [ip]
			data[1] = 0U;
    3d44:	f88c 3001 	strb.w	r3, [ip, #1]
			*len = 2;
    3d48:	6031      	str	r1, [r6, #0]
			return true;
    3d4a:	e781      	b.n	3c50 <usb_handle_standard_request+0x48>
		p += p[DESC_bLength];
    3d4c:	441f      	add	r7, r3
    3d4e:	e093      	b.n	3e78 <usb_handle_standard_request+0x270>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    3d50:	2b0b      	cmp	r3, #11
    3d52:	d18b      	bne.n	3c6c <usb_handle_standard_request+0x64>
	bool ret = false;
    3d54:	2600      	movs	r6, #0
	uint8_t cur_iface = 0xFF;
    3d56:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    3d5a:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    3d5c:	46b2      	mov	sl, r6
    3d5e:	e006      	b.n	3d6e <usb_handle_standard_request+0x166>
		switch (p[DESC_bDescriptorType]) {
    3d60:	787b      	ldrb	r3, [r7, #1]
    3d62:	2b04      	cmp	r3, #4
    3d64:	d00f      	beq.n	3d86 <usb_handle_standard_request+0x17e>
    3d66:	2b05      	cmp	r3, #5
    3d68:	d021      	beq.n	3dae <usb_handle_standard_request+0x1a6>
		p += p[DESC_bLength];
    3d6a:	783b      	ldrb	r3, [r7, #0]
    3d6c:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
    3d6e:	783b      	ldrb	r3, [r7, #0]
    3d70:	2b00      	cmp	r3, #0
    3d72:	d1f5      	bne.n	3d60 <usb_handle_standard_request+0x158>
	if (usb_dev.status_callback) {
    3d74:	69eb      	ldr	r3, [r5, #28]
    3d76:	b113      	cbz	r3, 3d7e <usb_handle_standard_request+0x176>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    3d78:	4651      	mov	r1, sl
    3d7a:	2007      	movs	r0, #7
    3d7c:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    3d7e:	2e00      	cmp	r6, #0
    3d80:	f47f af66 	bne.w	3c50 <usb_handle_standard_request+0x48>
    3d84:	e772      	b.n	3c6c <usb_handle_standard_request+0x64>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    3d86:	f897 8002 	ldrb.w	r8, [r7, #2]
			if (cur_iface == setup->wIndex &&
    3d8a:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    3d8c:	f897 9003 	ldrb.w	r9, [r7, #3]
			if (cur_iface == setup->wIndex &&
    3d90:	4598      	cmp	r8, r3
    3d92:	d1ea      	bne.n	3d6a <usb_handle_standard_request+0x162>
			    cur_alt_setting == setup->wValue) {
    3d94:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    3d96:	4599      	cmp	r9, r3
    3d98:	d1e7      	bne.n	3d6a <usb_handle_standard_request+0x162>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    3d9a:	f1b8 0f07 	cmp.w	r8, #7
    3d9e:	d81c      	bhi.n	3dda <usb_handle_standard_request+0x1d2>
		usb_dev.alt_setting[iface] = alt_setting;
    3da0:	eb05 0308 	add.w	r3, r5, r8
		return true;
    3da4:	46ba      	mov	sl, r7
				ret = usb_set_alt_setting(setup->wIndex,
    3da6:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    3daa:	2601      	movs	r6, #1
    3dac:	e7dd      	b.n	3d6a <usb_handle_standard_request+0x162>
			if (cur_iface == setup->wIndex) {
    3dae:	88a3      	ldrh	r3, [r4, #4]
    3db0:	4543      	cmp	r3, r8
    3db2:	d1da      	bne.n	3d6a <usb_handle_standard_request+0x162>
	if (cur_alt_setting != alt_setting) {
    3db4:	78a3      	ldrb	r3, [r4, #2]
    3db6:	454b      	cmp	r3, r9
    3db8:	d00a      	beq.n	3dd0 <usb_handle_standard_request+0x1c8>
		ret = reset_endpoint(ep_desc);
    3dba:	78be      	ldrb	r6, [r7, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    3dbc:	4630      	mov	r0, r6
    3dbe:	f000 fc3b 	bl	4638 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    3dc2:	4630      	mov	r0, r6
    3dc4:	f7ff fe10 	bl	39e8 <disable_endpoint>
    3dc8:	fab0 f680 	clz	r6, r0
    3dcc:	0976      	lsrs	r6, r6, #5
    3dce:	e7cc      	b.n	3d6a <usb_handle_standard_request+0x162>
		ret = set_endpoint(ep_desc);
    3dd0:	4638      	mov	r0, r7
    3dd2:	f7ff fed7 	bl	3b84 <set_endpoint>
    3dd6:	4606      	mov	r6, r0
    3dd8:	e7c7      	b.n	3d6a <usb_handle_standard_request+0x162>
    3dda:	46ba      	mov	sl, r7
	return false;
    3ddc:	2600      	movs	r6, #0
    3dde:	e7c4      	b.n	3d6a <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
    3de0:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    3de4:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3de6:	2a00      	cmp	r2, #0
    3de8:	da18      	bge.n	3e1c <usb_handle_standard_request+0x214>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    3dea:	2b00      	cmp	r3, #0
    3dec:	f47f af3e 	bne.w	3c6c <usb_handle_standard_request+0x64>
	uint8_t ep = setup->wIndex;
    3df0:	7924      	ldrb	r4, [r4, #4]
    3df2:	683f      	ldr	r7, [r7, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    3df4:	0663      	lsls	r3, r4, #25
    3df6:	d00a      	beq.n	3e0e <usb_handle_standard_request+0x206>
    3df8:	4620      	mov	r0, r4
    3dfa:	f7ff fe13 	bl	3a24 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    3dfe:	2800      	cmp	r0, #0
    3e00:	f43f af34 	beq.w	3c6c <usb_handle_standard_request+0x64>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    3e04:	f895 30ba 	ldrb.w	r3, [r5, #186]	; 0xba
    3e08:	2b00      	cmp	r3, #0
    3e0a:	f43f af2f 	beq.w	3c6c <usb_handle_standard_request+0x64>
		usb_dc_ep_is_stalled(ep, &data[0]);
    3e0e:	4639      	mov	r1, r7
    3e10:	4620      	mov	r0, r4
    3e12:	f002 f9d9 	bl	61c8 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    3e16:	2300      	movs	r3, #0
    3e18:	707b      	strb	r3, [r7, #1]
    3e1a:	e714      	b.n	3c46 <usb_handle_standard_request+0x3e>
		switch (setup->bRequest) {
    3e1c:	2b01      	cmp	r3, #1
    3e1e:	d008      	beq.n	3e32 <usb_handle_standard_request+0x22a>
    3e20:	2b03      	cmp	r3, #3
    3e22:	f47f af23 	bne.w	3c6c <usb_handle_standard_request+0x64>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    3e26:	8863      	ldrh	r3, [r4, #2]
    3e28:	2b00      	cmp	r3, #0
    3e2a:	f47f af1f 	bne.w	3c6c <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
    3e2e:	2101      	movs	r1, #1
    3e30:	e003      	b.n	3e3a <usb_handle_standard_request+0x232>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    3e32:	8861      	ldrh	r1, [r4, #2]
    3e34:	2900      	cmp	r1, #0
    3e36:	f47f af19 	bne.w	3c6c <usb_handle_standard_request+0x64>
				return usb_halt_endpoint_req(setup, true);
    3e3a:	88a0      	ldrh	r0, [r4, #4]
    3e3c:	f7ff fe7a 	bl	3b34 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    3e40:	2800      	cmp	r0, #0
    3e42:	f47f af05 	bne.w	3c50 <usb_handle_standard_request+0x48>
    3e46:	e711      	b.n	3c6c <usb_handle_standard_request+0x64>
		if (type == USB_DESC_CONFIGURATION) {
    3e48:	2902      	cmp	r1, #2
		*data = p;
    3e4a:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
    3e4c:	f47f af1b 	bne.w	3c86 <usb_handle_standard_request+0x7e>
			*len = (p[CONF_DESC_wTotalLength]) |
    3e50:	885b      	ldrh	r3, [r3, #2]
		*len = 2;
    3e52:	6033      	str	r3, [r6, #0]
		return true;
    3e54:	e6fc      	b.n	3c50 <usb_handle_standard_request+0x48>
    3e56:	bf00      	nop
    3e58:	20000bbc 	.word	0x20000bbc
    3e5c:	20000c76 	.word	0x20000c76
	if (usb_reqtype_is_to_host(setup)) {
    3e60:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    3e64:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3e66:	2800      	cmp	r0, #0
    3e68:	f6bf af72 	bge.w	3d50 <usb_handle_standard_request+0x148>
		switch (setup->bRequest) {
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	f43f af67 	beq.w	3d40 <usb_handle_standard_request+0x138>
    3e72:	2b0a      	cmp	r3, #10
    3e74:	f47f aefa 	bne.w	3c6c <usb_handle_standard_request+0x64>
	while (p[DESC_bLength] != 0U) {
    3e78:	783b      	ldrb	r3, [r7, #0]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	f43f aef6 	beq.w	3c6c <usb_handle_standard_request+0x64>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    3e80:	7879      	ldrb	r1, [r7, #1]
    3e82:	2904      	cmp	r1, #4
    3e84:	f47f af62 	bne.w	3d4c <usb_handle_standard_request+0x144>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    3e88:	78b9      	ldrb	r1, [r7, #2]
			if (cur_iface == setup->wIndex) {
    3e8a:	428a      	cmp	r2, r1
    3e8c:	f47f af5e 	bne.w	3d4c <usb_handle_standard_request+0x144>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    3e90:	2a07      	cmp	r2, #7
		return usb_dev.alt_setting[iface];
    3e92:	bf96      	itet	ls
    3e94:	1952      	addls	r2, r2, r5
	return 0;
    3e96:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    3e98:	f892 30bb 	ldrbls.w	r3, [r2, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    3e9c:	f88c 3000 	strb.w	r3, [ip]
    3ea0:	e6f6      	b.n	3c90 <usb_handle_standard_request+0x88>
    3ea2:	bf00      	nop

00003ea4 <usb_data_to_host>:
{
    3ea4:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    3ea6:	4c16      	ldr	r4, [pc, #88]	; (3f00 <usb_data_to_host+0x5c>)
    3ea8:	7d23      	ldrb	r3, [r4, #20]
    3eaa:	b9f3      	cbnz	r3, 3eea <usb_data_to_host+0x46>
		uint32_t chunk = usb_dev.data_buf_residue;
    3eac:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    3eae:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    3eb0:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    3eb2:	ab01      	add	r3, sp, #4
    3eb4:	2080      	movs	r0, #128	; 0x80
    3eb6:	f008 f9f7 	bl	c2a8 <usb_write>
		usb_dev.data_buf += chunk;
    3eba:	9a01      	ldr	r2, [sp, #4]
    3ebc:	68a3      	ldr	r3, [r4, #8]
    3ebe:	4413      	add	r3, r2
    3ec0:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    3ec2:	68e3      	ldr	r3, [r4, #12]
    3ec4:	1a9b      	subs	r3, r3, r2
    3ec6:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    3ec8:	b96b      	cbnz	r3, 3ee6 <usb_data_to_host+0x42>
    3eca:	b162      	cbz	r2, 3ee6 <usb_data_to_host+0x42>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    3ecc:	6923      	ldr	r3, [r4, #16]
    3ece:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    3ed0:	429a      	cmp	r2, r3
    3ed2:	dd08      	ble.n	3ee6 <usb_data_to_host+0x42>
			if (!(usb_dev.data_buf_len % usb_dev.mps0)) {
    3ed4:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
    3ed8:	fb93 f1f2 	sdiv	r1, r3, r2
    3edc:	fb02 3311 	mls	r3, r2, r1, r3
    3ee0:	b90b      	cbnz	r3, 3ee6 <usb_data_to_host+0x42>
				usb_dev.zlp_flag = true;
    3ee2:	2301      	movs	r3, #1
    3ee4:	7523      	strb	r3, [r4, #20]
}
    3ee6:	b002      	add	sp, #8
    3ee8:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    3eea:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    3eec:	461a      	mov	r2, r3
    3eee:	4619      	mov	r1, r3
    3ef0:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    3ef2:	7523      	strb	r3, [r4, #20]
}
    3ef4:	b002      	add	sp, #8
    3ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    3efa:	f002 b9ab 	b.w	6254 <usb_dc_ep_write>
    3efe:	bf00      	nop
    3f00:	20000bbc 	.word	0x20000bbc

00003f04 <usb_handle_control_transfer>:
{
    3f04:	b530      	push	{r4, r5, lr}
    3f06:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
    3f08:	2300      	movs	r3, #0
{
    3f0a:	4602      	mov	r2, r0
    3f0c:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    3f0e:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    3f10:	2800      	cmp	r0, #0
    3f12:	d158      	bne.n	3fc6 <usb_handle_control_transfer+0xc2>
    3f14:	2900      	cmp	r1, #0
    3f16:	d135      	bne.n	3f84 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    3f18:	2208      	movs	r2, #8
    3f1a:	460b      	mov	r3, r1
    3f1c:	eb0d 0102 	add.w	r1, sp, r2
    3f20:	f008 fd73 	bl	ca0a <usb_dc_ep_read>
    3f24:	2800      	cmp	r0, #0
    3f26:	da04      	bge.n	3f32 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3f28:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3f2a:	f002 f905 	bl	6138 <usb_dc_ep_set_stall>
}
    3f2e:	b005      	add	sp, #20
    3f30:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    3f32:	4c2a      	ldr	r4, [pc, #168]	; (3fdc <usb_handle_control_transfer+0xd8>)
    3f34:	9a02      	ldr	r2, [sp, #8]
    3f36:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    3f38:	9a03      	ldr	r2, [sp, #12]
    3f3a:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    3f3c:	f104 0238 	add.w	r2, r4, #56	; 0x38
    3f40:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    3f42:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    3f46:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    3f4a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    3f4c:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    3f4e:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    3f52:	db0a      	blt.n	3f6a <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    3f54:	2b80      	cmp	r3, #128	; 0x80
    3f56:	d904      	bls.n	3f62 <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3f58:	2080      	movs	r0, #128	; 0x80
    3f5a:	f002 f8ed 	bl	6138 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3f5e:	2000      	movs	r0, #0
    3f60:	e7e3      	b.n	3f2a <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    3f62:	b113      	cbz	r3, 3f6a <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
    3f64:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    3f68:	e7e1      	b.n	3f2e <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    3f6a:	f7ff fd77 	bl	3a5c <usb_handle_request.constprop.0>
    3f6e:	2800      	cmp	r0, #0
    3f70:	d0da      	beq.n	3f28 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    3f72:	88e2      	ldrh	r2, [r4, #6]
    3f74:	6923      	ldr	r3, [r4, #16]
    3f76:	429a      	cmp	r2, r3
    3f78:	bfd4      	ite	le
    3f7a:	60e2      	strle	r2, [r4, #12]
    3f7c:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    3f7e:	f7ff ff91 	bl	3ea4 <usb_data_to_host>
    3f82:	e7d4      	b.n	3f2e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    3f84:	4c15      	ldr	r4, [pc, #84]	; (3fdc <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3f86:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    3f8a:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3f8c:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    3f8e:	dc04      	bgt.n	3f9a <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3f90:	f008 fd3b 	bl	ca0a <usb_dc_ep_read>
    3f94:	2800      	cmp	r0, #0
    3f96:	daca      	bge.n	3f2e <usb_handle_control_transfer+0x2a>
    3f98:	e7c6      	b.n	3f28 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3f9a:	462a      	mov	r2, r5
    3f9c:	f008 fd35 	bl	ca0a <usb_dc_ep_read>
    3fa0:	2800      	cmp	r0, #0
    3fa2:	dbd9      	blt.n	3f58 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
    3fa4:	9a01      	ldr	r2, [sp, #4]
    3fa6:	68a3      	ldr	r3, [r4, #8]
    3fa8:	4413      	add	r3, r2
    3faa:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    3fac:	68e3      	ldr	r3, [r4, #12]
    3fae:	1a9b      	subs	r3, r3, r2
    3fb0:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    3fb2:	2b00      	cmp	r3, #0
    3fb4:	d1bb      	bne.n	3f2e <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    3fb6:	f104 0338 	add.w	r3, r4, #56	; 0x38
    3fba:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    3fbc:	f7ff fd4e 	bl	3a5c <usb_handle_request.constprop.0>
    3fc0:	2800      	cmp	r0, #0
    3fc2:	d1dc      	bne.n	3f7e <usb_handle_control_transfer+0x7a>
    3fc4:	e7b0      	b.n	3f28 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    3fc6:	2880      	cmp	r0, #128	; 0x80
    3fc8:	d1b1      	bne.n	3f2e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    3fca:	4b04      	ldr	r3, [pc, #16]	; (3fdc <usb_handle_control_transfer+0xd8>)
    3fcc:	68da      	ldr	r2, [r3, #12]
    3fce:	2a00      	cmp	r2, #0
    3fd0:	d1d5      	bne.n	3f7e <usb_handle_control_transfer+0x7a>
    3fd2:	7d1b      	ldrb	r3, [r3, #20]
    3fd4:	2b00      	cmp	r3, #0
    3fd6:	d1d2      	bne.n	3f7e <usb_handle_control_transfer+0x7a>
    3fd8:	e7a9      	b.n	3f2e <usb_handle_control_transfer+0x2a>
    3fda:	bf00      	nop
    3fdc:	20000bbc 	.word	0x20000bbc

00003fe0 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    3fe0:	4b05      	ldr	r3, [pc, #20]	; (3ff8 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    3fe2:	4a06      	ldr	r2, [pc, #24]	; (3ffc <usb_set_config+0x1c>)
    3fe4:	629a      	str	r2, [r3, #40]	; 0x28
    3fe6:	4a06      	ldr	r2, [pc, #24]	; (4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>)
    3fe8:	62da      	str	r2, [r3, #44]	; 0x2c
    3fea:	4a06      	ldr	r2, [pc, #24]	; (4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>)
    3fec:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    3fee:	4a06      	ldr	r2, [pc, #24]	; (4008 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8>)
	usb_dev.descriptors = usb_descriptors;
    3ff0:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    3ff2:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    3ff4:	2000      	movs	r0, #0
    3ff6:	4770      	bx	lr
    3ff8:	20000bbc 	.word	0x20000bbc
    3ffc:	00003c09 	.word	0x00003c09
    4000:	0000390d 	.word	0x0000390d
    4004:	000039ad 	.word	0x000039ad
    4008:	0000394d 	.word	0x0000394d

0000400c <usb_enable>:

int usb_enable(usb_dc_status_callback status_cb)
{
    400c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int ret;
	struct usb_dc_ep_cfg_data ep0_cfg;
	struct usb_device_descriptor *dev_desc = (void *)usb_dev.descriptors;
    4010:	4d41      	ldr	r5, [pc, #260]	; (4118 <usb_enable+0x10c>)
{
    4012:	4604      	mov	r4, r0
	struct usb_device_descriptor *dev_desc = (void *)usb_dev.descriptors;
    4014:	6a6f      	ldr	r7, [r5, #36]	; 0x24
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    4016:	4841      	ldr	r0, [pc, #260]	; (411c <usb_enable+0x110>)
    4018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    401c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4020:	f006 fcc0 	bl	a9a4 <z_impl_k_mutex_lock>
	 * This should only be called once.
	 */
	LOG_DBG("lock usb_enable_lock mutex");
	k_mutex_lock(&usb_enable_lock, K_FOREVER);

	if (usb_dev.enabled == true) {
    4024:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    4028:	2e00      	cmp	r6, #0
    402a:	d16e      	bne.n	410a <usb_enable+0xfe>
	usb_dev.status_callback = cb;
    402c:	483c      	ldr	r0, [pc, #240]	; (4120 <usb_enable+0x114>)
	ret = usb_vbus_set(true);
	if (ret < 0) {
		goto out;
	}

	usb_dev.user_status_callback = status_cb;
    402e:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    4030:	61e8      	str	r0, [r5, #28]
	usb_register_status_callback(forward_status_cb);
	usb_dc_set_status_callback(forward_status_cb);
    4032:	f002 fa29 	bl	6488 <usb_dc_set_status_callback>

	ret = usb_dc_attach();
    4036:	f002 f817 	bl	6068 <usb_dc_attach>
	if (ret < 0) {
    403a:	1e04      	subs	r4, r0, #0
    403c:	db49      	blt.n	40d2 <usb_enable+0xc6>
		goto out;
	}

	ret = usb_transfer_init();
    403e:	f000 fb3d 	bl	46bc <usb_transfer_init>
	if (ret < 0) {
    4042:	1e04      	subs	r4, r0, #0
    4044:	db45      	blt.n	40d2 <usb_enable+0xc6>
		goto out;
	}

	if (dev_desc->bDescriptorType != USB_DESC_DEVICE ||
    4046:	787b      	ldrb	r3, [r7, #1]
    4048:	2b01      	cmp	r3, #1
    404a:	d161      	bne.n	4110 <usb_enable+0x104>
	    dev_desc->bMaxPacketSize0 == 0) {
    404c:	79fb      	ldrb	r3, [r7, #7]
	if (dev_desc->bDescriptorType != USB_DESC_DEVICE ||
    404e:	2b00      	cmp	r3, #0
    4050:	d05e      	beq.n	4110 <usb_enable+0x104>
	usb_dev.mps0 = dev_desc->bMaxPacketSize0;
	ep0_cfg.ep_mps = usb_dev.mps0;
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;

	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
	ret = usb_dc_ep_configure(&ep0_cfg);
    4052:	4668      	mov	r0, sp
	usb_dev.mps0 = dev_desc->bMaxPacketSize0;
    4054:	f885 30c8 	strb.w	r3, [r5, #200]	; 0xc8
	ep0_cfg.ep_mps = usb_dev.mps0;
    4058:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    405c:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    4060:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    4064:	f002 f844 	bl	60f0 <usb_dc_ep_configure>
	if (ret < 0) {
    4068:	1e04      	subs	r4, r0, #0
    406a:	db32      	blt.n	40d2 <usb_enable+0xc6>
		goto out;
	}

	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    406c:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    406e:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    4070:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    4074:	f002 f83c 	bl	60f0 <usb_dc_ep_configure>
	if (ret < 0) {
    4078:	1e04      	subs	r4, r0, #0
    407a:	db2a      	blt.n	40d2 <usb_enable+0xc6>
		goto out;
	}

	/* Register endpoint 0 handlers*/
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    407c:	4929      	ldr	r1, [pc, #164]	; (4124 <usb_enable+0x118>)
    407e:	4630      	mov	r0, r6
    4080:	f002 f9ee 	bl	6460 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
    4084:	1e04      	subs	r4, r0, #0
    4086:	db24      	blt.n	40d2 <usb_enable+0xc6>
		goto out;
	}

	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    4088:	4926      	ldr	r1, [pc, #152]	; (4124 <usb_enable+0x118>)
    408a:	4638      	mov	r0, r7
    408c:	f002 f9e8 	bl	6460 <usb_dc_ep_set_callback>
				     usb_handle_control_transfer);
	if (ret < 0) {
    4090:	1e04      	subs	r4, r0, #0
    4092:	db1e      	blt.n	40d2 <usb_enable+0xc6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4094:	4c24      	ldr	r4, [pc, #144]	; (4128 <usb_enable+0x11c>)
    4096:	f8df 8094 	ldr.w	r8, [pc, #148]	; 412c <usb_enable+0x120>
    409a:	4544      	cmp	r4, r8
    409c:	d320      	bcc.n	40e0 <usb_enable+0xd4>
	if (ret < 0) {
		goto out;
	}

	/* Enable control EP */
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    409e:	2000      	movs	r0, #0
    40a0:	f002 f8ae 	bl	6200 <usb_dc_ep_enable>
	if (ret < 0) {
    40a4:	1e04      	subs	r4, r0, #0
    40a6:	db14      	blt.n	40d2 <usb_enable+0xc6>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    40a8:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4

	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    40ac:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    40ae:	f043 0301 	orr.w	r3, r3, #1
    40b2:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    40b6:	f002 f8a3 	bl	6200 <usb_dc_ep_enable>
	if (ret < 0) {
    40ba:	1e04      	subs	r4, r0, #0
    40bc:	db09      	blt.n	40d2 <usb_enable+0xc6>
		goto out;
	}
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    40be:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    40c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    40c6:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4

	usb_dev.enabled = true;
    40ca:	2301      	movs	r3, #1
    40cc:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    40d0:	2400      	movs	r4, #0
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    40d2:	4812      	ldr	r0, [pc, #72]	; (411c <usb_enable+0x110>)
    40d4:	f006 fce0 	bl	aa98 <z_impl_k_mutex_unlock>
out:
	LOG_DBG("unlock usb_enable_lock mutex");
	k_mutex_unlock(&usb_enable_lock);
	return ret;
}
    40d8:	4620      	mov	r0, r4
    40da:	b002      	add	sp, #8
    40dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    40e0:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    40e2:	2600      	movs	r6, #0
    40e4:	7f22      	ldrb	r2, [r4, #28]
    40e6:	b2f3      	uxtb	r3, r6
    40e8:	429a      	cmp	r2, r3
    40ea:	d801      	bhi.n	40f0 <usb_enable+0xe4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    40ec:	3424      	adds	r4, #36	; 0x24
    40ee:	e7d4      	b.n	409a <usb_enable+0x8e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    40f0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    40f4:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    40f8:	7910      	ldrb	r0, [r2, #4]
    40fa:	f002 f9b1 	bl	6460 <usb_dc_ep_set_callback>
    40fe:	3601      	adds	r6, #1
    4100:	2800      	cmp	r0, #0
    4102:	d0ef      	beq.n	40e4 <usb_enable+0xd8>
    4104:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4108:	e7e3      	b.n	40d2 <usb_enable+0xc6>
		ret = -EALREADY;
    410a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    410e:	e7e0      	b.n	40d2 <usb_enable+0xc6>
		ret = -EINVAL;
    4110:	f06f 0415 	mvn.w	r4, #21
    4114:	e7dd      	b.n	40d2 <usb_enable+0xc6>
    4116:	bf00      	nop
    4118:	20000bbc 	.word	0x20000bbc
    411c:	2000031c 	.word	0x2000031c
    4120:	00003a89 	.word	0x00003a89
    4124:	00003f05 	.word	0x00003f05
    4128:	2000041c 	.word	0x2000041c
    412c:	20000440 	.word	0x20000440

00004130 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
{
    4130:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    4132:	4b0a      	ldr	r3, [pc, #40]	; (415c <usb_device_init+0x2c>)
    4134:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    4138:	b94c      	cbnz	r4, 414e <usb_device_init+0x1e>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    413a:	f000 f855 	bl	41e8 <usb_get_device_descriptor>
	if (!device_descriptor) {
    413e:	b148      	cbz	r0, 4154 <usb_device_init+0x24>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    4140:	f7ff ff4e 	bl	3fe0 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
    4144:	4620      	mov	r0, r4
	}

	return 0;
}
    4146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return usb_enable(NULL);
    414a:	f7ff bf5f 	b.w	400c <usb_enable>
		return -EALREADY;
    414e:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    4152:	bd10      	pop	{r4, pc}
		return -1;
    4154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4158:	e7fb      	b.n	4152 <usb_device_init+0x22>
    415a:	bf00      	nop
    415c:	20000bbc 	.word	0x20000bbc

00004160 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    4160:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    4162:	4b1f      	ldr	r3, [pc, #124]	; (41e0 <usb_update_sn_string_descriptor+0x80>)
{
    4164:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    4166:	aa05      	add	r2, sp, #20
    4168:	f103 0510 	add.w	r5, r3, #16
    416c:	6818      	ldr	r0, [r3, #0]
    416e:	6859      	ldr	r1, [r3, #4]
    4170:	4614      	mov	r4, r2
    4172:	c403      	stmia	r4!, {r0, r1}
    4174:	3308      	adds	r3, #8
    4176:	42ab      	cmp	r3, r5
    4178:	4622      	mov	r2, r4
    417a:	d1f7      	bne.n	416c <usb_update_sn_string_descriptor+0xc>
    417c:	781b      	ldrb	r3, [r3, #0]
    417e:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    4180:	2210      	movs	r2, #16
    4182:	2100      	movs	r1, #0
    4184:	a801      	add	r0, sp, #4
    4186:	f008 f9b4 	bl	c4f2 <memset>
	memset(sn, 0, sizeof(sn));
    418a:	2212      	movs	r2, #18
    418c:	2100      	movs	r1, #0
    418e:	4815      	ldr	r0, [pc, #84]	; (41e4 <usb_update_sn_string_descriptor+0x84>)
    4190:	f008 f9af 	bl	c4f2 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    4194:	2110      	movs	r1, #16
    4196:	a801      	add	r0, sp, #4
    4198:	f008 fde3 	bl	cd62 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    419c:	2800      	cmp	r0, #0
    419e:	dd1b      	ble.n	41d8 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    41a0:	2808      	cmp	r0, #8
    41a2:	bfb8      	it	lt
    41a4:	2008      	movlt	r0, #8
    41a6:	3809      	subs	r0, #9
    41a8:	ab01      	add	r3, sp, #4
    41aa:	490e      	ldr	r1, [pc, #56]	; (41e4 <usb_update_sn_string_descriptor+0x84>)
    41ac:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    41ae:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    41b0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    41b4:	ac0a      	add	r4, sp, #40	; 0x28
    41b6:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    41ba:	f003 030f 	and.w	r3, r3, #15
    41be:	3328      	adds	r3, #40	; 0x28
    41c0:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    41c2:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    41c4:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    41c8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    41cc:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    41ce:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    41d0:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    41d2:	f101 0102 	add.w	r1, r1, #2
    41d6:	d1eb      	bne.n	41b0 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    41d8:	4802      	ldr	r0, [pc, #8]	; (41e4 <usb_update_sn_string_descriptor+0x84>)
    41da:	b00b      	add	sp, #44	; 0x2c
    41dc:	bd30      	pop	{r4, r5, pc}
    41de:	bf00      	nop
    41e0:	0000ed7c 	.word	0x0000ed7c
    41e4:	20001b68 	.word	0x20001b68

000041e8 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    41e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41ec:	4c70      	ldr	r4, [pc, #448]	; (43b0 <usb_get_device_descriptor+0x1c8>)
    41ee:	b087      	sub	sp, #28
	uint8_t str_descr_idx = 0U;
    41f0:	f04f 0b00 	mov.w	fp, #0
    41f4:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    41f6:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    41fa:	46b0      	mov	r8, r6
	struct usb_cfg_data *cfg_data = NULL;
    41fc:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    41fe:	46b1      	mov	r9, r6
	while (head->bLength != 0U) {
    4200:	7823      	ldrb	r3, [r4, #0]
    4202:	b92b      	cbnz	r3, 4210 <usb_get_device_descriptor+0x28>
	if ((head + 1) != __usb_descriptor_end) {
    4204:	4b6b      	ldr	r3, [pc, #428]	; (43b4 <usb_get_device_descriptor+0x1cc>)
    4206:	3402      	adds	r4, #2
    4208:	429c      	cmp	r4, r3
    420a:	d1f3      	bne.n	41f4 <usb_get_device_descriptor+0xc>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    420c:	4868      	ldr	r0, [pc, #416]	; (43b0 <usb_get_device_descriptor+0x1c8>)
    420e:	e032      	b.n	4276 <usb_get_device_descriptor+0x8e>
		switch (head->bDescriptorType) {
    4210:	7863      	ldrb	r3, [r4, #1]
    4212:	2b05      	cmp	r3, #5
    4214:	d81b      	bhi.n	424e <usb_get_device_descriptor+0x66>
    4216:	e8df f003 	tbb	[pc, r3]
    421a:	0390      	.short	0x0390
    421c:	3b1d90c8 	.word	0x3b1d90c8
	struct usb_dc_ep_cfg_data ep_cfg = {
    4220:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_check_cap(&ep_cfg);
    4222:	a804      	add	r0, sp, #16
	struct usb_dc_ep_cfg_data ep_cfg = {
    4224:	f88d b010 	strb.w	fp, [sp, #16]
    4228:	f8ad 3012 	strh.w	r3, [sp, #18]
    422c:	f88d b014 	strb.w	fp, [sp, #20]
	ret = usb_dc_ep_check_cap(&ep_cfg);
    4230:	f008 fbba 	bl	c9a8 <usb_dc_ep_check_cap>
	if (ret) {
    4234:	b140      	cbz	r0, 4248 <usb_get_device_descriptor+0x60>
		ep_cfg.ep_mps = 8;
    4236:	2308      	movs	r3, #8
		ret = usb_dc_ep_check_cap(&ep_cfg);
    4238:	a804      	add	r0, sp, #16
		ep_cfg.ep_mps = 8;
    423a:	f8ad 3012 	strh.w	r3, [sp, #18]
		ret = usb_dc_ep_check_cap(&ep_cfg);
    423e:	f008 fbb3 	bl	c9a8 <usb_dc_ep_check_cap>
		if (ret) {
    4242:	b108      	cbz	r0, 4248 <usb_get_device_descriptor+0x60>
			ep_cfg.ep_mps = 0;
    4244:	f8ad b012 	strh.w	fp, [sp, #18]
	desc->bMaxPacketSize0 = ep_cfg.ep_mps;
    4248:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    424c:	71e3      	strb	r3, [r4, #7]
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    424e:	7823      	ldrb	r3, [r4, #0]
    4250:	441c      	add	r4, r3
    4252:	e7d5      	b.n	4200 <usb_get_device_descriptor+0x18>
			if (if_descr->bAlternateSetting) {
    4254:	78e3      	ldrb	r3, [r4, #3]
    4256:	2b00      	cmp	r3, #0
    4258:	d1f9      	bne.n	424e <usb_get_device_descriptor+0x66>
			if (if_descr->bInterfaceNumber == 0U) {
    425a:	78a3      	ldrb	r3, [r4, #2]
    425c:	b173      	cbz	r3, 427c <usb_get_device_descriptor+0x94>
			numof_ifaces++;
    425e:	f108 0801 	add.w	r8, r8, #1
    4262:	fa5f f888 	uxtb.w	r8, r8
			break;
    4266:	e7f2      	b.n	424e <usb_get_device_descriptor+0x66>
		if (cfg_data->interface_descriptor == iface) {
    4268:	686a      	ldr	r2, [r5, #4]
    426a:	4294      	cmp	r4, r2
    426c:	d009      	beq.n	4282 <usb_get_device_descriptor+0x9a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    426e:	3524      	adds	r5, #36	; 0x24
    4270:	429d      	cmp	r5, r3
    4272:	d3f9      	bcc.n	4268 <usb_get_device_descriptor+0x80>
		return NULL;
    4274:	2000      	movs	r0, #0
}
    4276:	b007      	add	sp, #28
    4278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    427c:	4d4e      	ldr	r5, [pc, #312]	; (43b8 <usb_get_device_descriptor+0x1d0>)
    427e:	4b4f      	ldr	r3, [pc, #316]	; (43bc <usb_get_device_descriptor+0x1d4>)
    4280:	e7f6      	b.n	4270 <usb_get_device_descriptor+0x88>
				if (cfg_data->interface_config) {
    4282:	68ab      	ldr	r3, [r5, #8]
    4284:	2b00      	cmp	r3, #0
    4286:	d0ea      	beq.n	425e <usb_get_device_descriptor+0x76>
					cfg_data->interface_config(head,
    4288:	4641      	mov	r1, r8
    428a:	4620      	mov	r0, r4
    428c:	4798      	blx	r3
    428e:	e7e6      	b.n	425e <usb_get_device_descriptor+0x76>
			if (!cfg_data) {
    4290:	2d00      	cmp	r5, #0
    4292:	d0ef      	beq.n	4274 <usb_get_device_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    4294:	2200      	movs	r2, #0
    4296:	7f2b      	ldrb	r3, [r5, #28]
    4298:	429a      	cmp	r2, r3
    429a:	d2eb      	bcs.n	4274 <usb_get_device_descriptor+0x8c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    429c:	6a29      	ldr	r1, [r5, #32]
    429e:	78a0      	ldrb	r0, [r4, #2]
    42a0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    42a4:	790b      	ldrb	r3, [r1, #4]
    42a6:	4298      	cmp	r0, r3
    42a8:	d001      	beq.n	42ae <usb_get_device_descriptor+0xc6>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    42aa:	3201      	adds	r2, #1
    42ac:	e7f3      	b.n	4296 <usb_get_device_descriptor+0xae>
    42ae:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    42b0:	78e0      	ldrb	r0, [r4, #3]
    42b2:	f000 0003 	and.w	r0, r0, #3
    42b6:	f88d 0014 	strb.w	r0, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    42ba:	7920      	ldrb	r0, [r4, #4]
    42bc:	f894 c005 	ldrb.w	ip, [r4, #5]
    42c0:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    42c4:	f8ad 0012 	strh.w	r0, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    42c8:	f994 0002 	ldrsb.w	r0, [r4, #2]
    42cc:	2800      	cmp	r0, #0
    42ce:	b2fb      	uxtb	r3, r7
    42d0:	da28      	bge.n	4324 <usb_get_device_descriptor+0x13c>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    42d2:	f107 0010 	add.w	r0, r7, #16
    42d6:	f04f 0c01 	mov.w	ip, #1
    42da:	fa0c f000 	lsl.w	r0, ip, r0
    42de:	ea10 0f0a 	tst.w	r0, sl
    42e2:	d126      	bne.n	4332 <usb_get_device_descriptor+0x14a>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    42e4:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    42e8:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    42ec:	a804      	add	r0, sp, #16
    42ee:	e9cd 1302 	strd	r1, r3, [sp, #8]
    42f2:	9201      	str	r2, [sp, #4]
    42f4:	f008 fb58 	bl	c9a8 <usb_dc_ep_check_cap>
    42f8:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    42fc:	9b03      	ldr	r3, [sp, #12]
    42fe:	b9c0      	cbnz	r0, 4332 <usb_get_device_descriptor+0x14a>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    4300:	f89d 2010 	ldrb.w	r2, [sp, #16]
    4304:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    4306:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    430a:	bf18      	it	ne
    430c:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    430e:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
    4310:	bf18      	it	ne
    4312:	b2db      	uxtbne	r3, r3
    4314:	f04f 0201 	mov.w	r2, #1
    4318:	bf14      	ite	ne
    431a:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
    431c:	40ba      	lsleq	r2, r7
    431e:	ea4a 0a02 	orr.w	sl, sl, r2
				return 0;
    4322:	e794      	b.n	424e <usb_get_device_descriptor+0x66>
				if ((*requested_ep & (1U << (idx)))) {
    4324:	2001      	movs	r0, #1
    4326:	40b8      	lsls	r0, r7
    4328:	ea10 0f0a 	tst.w	r0, sl
    432c:	d101      	bne.n	4332 <usb_get_device_descriptor+0x14a>
    432e:	4618      	mov	r0, r3
    4330:	e7da      	b.n	42e8 <usb_get_device_descriptor+0x100>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    4332:	3701      	adds	r7, #1
    4334:	2f10      	cmp	r7, #16
    4336:	d1bb      	bne.n	42b0 <usb_get_device_descriptor+0xc8>
    4338:	e7b7      	b.n	42aa <usb_get_device_descriptor+0xc2>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    433a:	2e03      	cmp	r6, #3
    433c:	d11d      	bne.n	437a <usb_get_device_descriptor+0x192>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    433e:	f7ff ff0f 	bl	4160 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    4342:	4607      	mov	r7, r0
    4344:	b168      	cbz	r0, 4362 <usb_get_device_descriptor+0x17a>
	runtime_sn_len = strlen(runtime_sn);
    4346:	f008 f8c2 	bl	c4ce <strlen>
	if (!runtime_sn_len) {
    434a:	9001      	str	r0, [sp, #4]
    434c:	b148      	cbz	r0, 4362 <usb_get_device_descriptor+0x17a>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    434e:	481c      	ldr	r0, [pc, #112]	; (43c0 <usb_get_device_descriptor+0x1d8>)
    4350:	f008 f8bd 	bl	c4ce <strlen>
	if (runtime_sn_len != default_sn_len) {
    4354:	9a01      	ldr	r2, [sp, #4]
    4356:	4282      	cmp	r2, r0
    4358:	d103      	bne.n	4362 <usb_get_device_descriptor+0x17a>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    435a:	4639      	mov	r1, r7
    435c:	1ca0      	adds	r0, r4, #2
    435e:	f008 f8bd 	bl	c4dc <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    4362:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    4364:	f06f 0102 	mvn.w	r1, #2
    4368:	18e2      	adds	r2, r4, r3
    436a:	1b09      	subs	r1, r1, r4
    436c:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    4370:	42d1      	cmn	r1, r2
    4372:	d513      	bpl.n	439c <usb_get_device_descriptor+0x1b4>
			str_descr_idx += 1U;
    4374:	3601      	adds	r6, #1
    4376:	b2f6      	uxtb	r6, r6
			break;
    4378:	e769      	b.n	424e <usb_get_device_descriptor+0x66>
			if (str_descr_idx) {
    437a:	2e00      	cmp	r6, #0
    437c:	d1f1      	bne.n	4362 <usb_get_device_descriptor+0x17a>
				if (!cfg_descr) {
    437e:	f1b9 0f00 	cmp.w	r9, #0
    4382:	f43f af77 	beq.w	4274 <usb_get_device_descriptor+0x8c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    4386:	eba4 0309 	sub.w	r3, r4, r9
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    438a:	f889 3002 	strb.w	r3, [r9, #2]
	dst[1] = val >> 8;
    438e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4392:	f889 3003 	strb.w	r3, [r9, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    4396:	f889 8004 	strb.w	r8, [r9, #4]
    439a:	e7eb      	b.n	4374 <usb_get_device_descriptor+0x18c>
		buf[i] = 0U;
    439c:	f802 bc01 	strb.w	fp, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    43a0:	f813 0901 	ldrb.w	r0, [r3], #-1
    43a4:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    43a8:	e7e2      	b.n	4370 <usb_get_device_descriptor+0x188>
		switch (head->bDescriptorType) {
    43aa:	46a1      	mov	r9, r4
    43ac:	e74f      	b.n	424e <usb_get_device_descriptor+0x66>
    43ae:	bf00      	nop
    43b0:	20000360 	.word	0x20000360
    43b4:	20000419 	.word	0x20000419
    43b8:	2000041c 	.word	0x2000041c
    43bc:	20000440 	.word	0x20000440
    43c0:	0000ed7c 	.word	0x0000ed7c

000043c4 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    43c4:	b510      	push	{r4, lr}
    43c6:	4b09      	ldr	r3, [pc, #36]	; (43ec <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    43c8:	2100      	movs	r1, #0
    43ca:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    43cc:	781c      	ldrb	r4, [r3, #0]
    43ce:	4284      	cmp	r4, r0
    43d0:	d104      	bne.n	43dc <usb_ep_get_transfer+0x18>
    43d2:	685c      	ldr	r4, [r3, #4]
    43d4:	b114      	cbz	r4, 43dc <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    43d6:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    43da:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    43dc:	3101      	adds	r1, #1
    43de:	2904      	cmp	r1, #4
    43e0:	f103 0340 	add.w	r3, r3, #64	; 0x40
    43e4:	d1f2      	bne.n	43cc <usb_ep_get_transfer+0x8>
	return NULL;
    43e6:	2000      	movs	r0, #0
    43e8:	e7f7      	b.n	43da <usb_ep_get_transfer+0x16>
    43ea:	bf00      	nop
    43ec:	20000c88 	.word	0x20000c88

000043f0 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    43f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    43f4:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    43f8:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
    43fc:	3310      	adds	r3, #16
{
    43fe:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    4400:	d110      	bne.n	4424 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    4402:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    4404:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    4408:	0799      	lsls	r1, r3, #30
    440a:	d53c      	bpl.n	4486 <usb_transfer_work+0x96>
		if (!trans->bsize) {
    440c:	bb02      	cbnz	r2, 4450 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    440e:	f013 0304 	ands.w	r3, r3, #4
    4412:	d104      	bne.n	441e <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    4414:	461a      	mov	r2, r3
    4416:	4619      	mov	r1, r3
    4418:	4630      	mov	r0, r6
    441a:	f007 ff45 	bl	c2a8 <usb_write>
			}
			trans->status = 0;
    441e:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    4420:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    4424:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4428:	3310      	adds	r3, #16
    442a:	d00e      	beq.n	444a <usb_transfer_work+0x5a>
    442c:	f854 5c18 	ldr.w	r5, [r4, #-24]
    4430:	b15d      	cbz	r5, 444a <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    4432:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    4436:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    443a:	f009 fbab 	bl	db94 <k_is_in_isr>
    443e:	2800      	cmp	r0, #0
    4440:	d04c      	beq.n	44dc <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4442:	482c      	ldr	r0, [pc, #176]	; (44f4 <usb_transfer_work+0x104>)
    4444:	4621      	mov	r1, r4
    4446:	f009 fc99 	bl	dd7c <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    444a:	b002      	add	sp, #8
    444c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    4450:	f850 1c24 	ldr.w	r1, [r0, #-36]
    4454:	ab01      	add	r3, sp, #4
    4456:	4630      	mov	r0, r6
    4458:	f007 ff26 	bl	c2a8 <usb_write>
		if (ret) {
    445c:	b110      	cbz	r0, 4464 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    445e:	f06f 0315 	mvn.w	r3, #21
    4462:	e7dd      	b.n	4420 <usb_transfer_work+0x30>
		trans->buffer += bytes;
    4464:	9a01      	ldr	r2, [sp, #4]
    4466:	f854 3c24 	ldr.w	r3, [r4, #-36]
    446a:	4413      	add	r3, r2
    446c:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    4470:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4474:	1a9b      	subs	r3, r3, r2
    4476:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    447a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    447e:	4413      	add	r3, r2
    4480:	f844 3c1c 	str.w	r3, [r4, #-28]
    4484:	e7ce      	b.n	4424 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    4486:	f850 1c24 	ldr.w	r1, [r0, #-36]
    448a:	ab01      	add	r3, sp, #4
    448c:	4630      	mov	r0, r6
    448e:	f001 ff5d 	bl	634c <usb_dc_ep_read_wait>
		if (ret) {
    4492:	2800      	cmp	r0, #0
    4494:	d1e3      	bne.n	445e <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    4496:	9d01      	ldr	r5, [sp, #4]
    4498:	f854 3c24 	ldr.w	r3, [r4, #-36]
    449c:	442b      	add	r3, r5
    449e:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    44a2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    44a6:	1b5b      	subs	r3, r3, r5
    44a8:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    44ac:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    44b0:	442b      	add	r3, r5
    44b2:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    44b6:	2d00      	cmp	r5, #0
    44b8:	d0b1      	beq.n	441e <usb_transfer_work+0x2e>
    44ba:	4630      	mov	r0, r6
    44bc:	f001 ffea 	bl	6494 <usb_dc_ep_mps>
    44c0:	fbb5 f3f0 	udiv	r3, r5, r0
    44c4:	fb03 5510 	mls	r5, r3, r0, r5
    44c8:	2d00      	cmp	r5, #0
    44ca:	d1a8      	bne.n	441e <usb_transfer_work+0x2e>
    44cc:	f854 3c20 	ldr.w	r3, [r4, #-32]
    44d0:	2b00      	cmp	r3, #0
    44d2:	d0a4      	beq.n	441e <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    44d4:	4630      	mov	r0, r6
    44d6:	f001 ff81 	bl	63dc <usb_dc_ep_read_continue>
    44da:	e7a3      	b.n	4424 <usb_transfer_work+0x34>
		trans->cb = NULL;
    44dc:	f844 0c18 	str.w	r0, [r4, #-24]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    44e0:	f1a4 0010 	sub.w	r0, r4, #16
    44e4:	f006 fb48 	bl	ab78 <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    44e8:	4642      	mov	r2, r8
    44ea:	4639      	mov	r1, r7
    44ec:	4630      	mov	r0, r6
    44ee:	47a8      	blx	r5
    44f0:	e7ab      	b.n	444a <usb_transfer_work+0x5a>
    44f2:	bf00      	nop
    44f4:	20000540 	.word	0x20000540

000044f8 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    44f8:	1e4b      	subs	r3, r1, #1
    44fa:	2b01      	cmp	r3, #1
{
    44fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    44fe:	4606      	mov	r6, r0
    4500:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    4502:	d80f      	bhi.n	4524 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    4504:	f7ff ff5e 	bl	43c4 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    4508:	4604      	mov	r4, r0
    450a:	b968      	cbnz	r0, 4528 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    450c:	2d01      	cmp	r5, #1
    450e:	d109      	bne.n	4524 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    4510:	ab01      	add	r3, sp, #4
    4512:	2201      	movs	r2, #1
    4514:	f10d 0103 	add.w	r1, sp, #3
    4518:	4630      	mov	r0, r6
    451a:	f001 ff17 	bl	634c <usb_dc_ep_read_wait>
			} while (bytes);
    451e:	9b01      	ldr	r3, [sp, #4]
    4520:	2b00      	cmp	r3, #0
    4522:	d1f5      	bne.n	4510 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    4524:	b002      	add	sp, #8
    4526:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4528:	f009 fb34 	bl	db94 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    452c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4530:	b108      	cbz	r0, 4536 <usb_transfer_ep_callback+0x3e>
    4532:	2d01      	cmp	r5, #1
    4534:	d105      	bne.n	4542 <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    4536:	4608      	mov	r0, r1
}
    4538:	b002      	add	sp, #8
    453a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    453e:	f7ff bf57 	b.w	43f0 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4542:	4803      	ldr	r0, [pc, #12]	; (4550 <usb_transfer_ep_callback+0x58>)
}
    4544:	b002      	add	sp, #8
    4546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    454a:	f009 bc17 	b.w	dd7c <k_work_submit_to_queue>
    454e:	bf00      	nop
    4550:	20000540 	.word	0x20000540

00004554 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    4554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4558:	4606      	mov	r6, r0
    455a:	9101      	str	r1, [sp, #4]
    455c:	4615      	mov	r5, r2
    455e:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    4560:	f007 feea 	bl	c338 <usb_transfer_is_busy>
    4564:	4604      	mov	r4, r0
    4566:	2800      	cmp	r0, #0
    4568:	d15c      	bne.n	4624 <usb_transfer+0xd0>
	__asm__ volatile(
    456a:	f04f 0320 	mov.w	r3, #32
    456e:	f3ef 8a11 	mrs	sl, BASEPRI
    4572:	f383 8812 	msr	BASEPRI_MAX, r3
    4576:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    457a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 462c <usb_transfer+0xd8>
	return z_impl_k_sem_take(sem, timeout);
    457e:	2200      	movs	r2, #0
    4580:	2300      	movs	r3, #0
    4582:	4658      	mov	r0, fp
    4584:	f006 fb1c 	bl	abc0 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    4588:	b970      	cbnz	r0, 45a8 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    458a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4630 <usb_transfer+0xdc>
    458e:	01a7      	lsls	r7, r4, #6
    4590:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    4594:	6863      	ldr	r3, [r4, #4]
    4596:	f113 0f10 	cmn.w	r3, #16
    459a:	d114      	bne.n	45c6 <usb_transfer+0x72>
    459c:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    459e:	4658      	mov	r0, fp
    45a0:	f006 faea 	bl	ab78 <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    45a4:	9b01      	ldr	r3, [sp, #4]
    45a6:	e006      	b.n	45b6 <usb_transfer+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    45a8:	3401      	adds	r4, #1
    45aa:	2c04      	cmp	r4, #4
    45ac:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    45b0:	d1e5      	bne.n	457e <usb_transfer+0x2a>
		ret = -ENOMEM;
    45b2:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    45b6:	f38a 8811 	msr	BASEPRI, sl
    45ba:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    45be:	4618      	mov	r0, r3
    45c0:	b003      	add	sp, #12
    45c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    45c6:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    45c8:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    45ca:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    45ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    45d0:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    45d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    45d4:	61a3      	str	r3, [r4, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    45d6:	4630      	mov	r0, r6
	trans->status = -EBUSY;
    45d8:	f06f 030f 	mvn.w	r3, #15
	trans->ep = ep;
    45dc:	f809 6007 	strb.w	r6, [r9, r7]
	trans->flags = flags;
    45e0:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
    45e4:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    45e6:	f001 ff55 	bl	6494 <usb_dc_ep_mps>
    45ea:	b158      	cbz	r0, 4604 <usb_transfer+0xb0>
    45ec:	4630      	mov	r0, r6
    45ee:	f001 ff51 	bl	6494 <usb_dc_ep_mps>
    45f2:	fbb5 f3f0 	udiv	r3, r5, r0
    45f6:	fb03 5510 	mls	r5, r3, r0, r5
    45fa:	b11d      	cbz	r5, 4604 <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
    45fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    45fe:	f043 0304 	orr.w	r3, r3, #4
    4602:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    4604:	f018 0f02 	tst.w	r8, #2
    4608:	d007      	beq.n	461a <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    460a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    460e:	4809      	ldr	r0, [pc, #36]	; (4634 <usb_transfer+0xe0>)
    4610:	4449      	add	r1, r9
    4612:	f009 fbb3 	bl	dd7c <k_work_submit_to_queue>
	int key, ret = 0;
    4616:	2300      	movs	r3, #0
    4618:	e7cd      	b.n	45b6 <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
    461a:	4630      	mov	r0, r6
    461c:	f001 fede 	bl	63dc <usb_dc_ep_read_continue>
    4620:	4603      	mov	r3, r0
    4622:	e7c8      	b.n	45b6 <usb_transfer+0x62>
		return -EBUSY;
    4624:	f06f 030f 	mvn.w	r3, #15
    4628:	e7c9      	b.n	45be <usb_transfer+0x6a>
    462a:	bf00      	nop
    462c:	20000ca4 	.word	0x20000ca4
    4630:	20000c88 	.word	0x20000c88
    4634:	20000540 	.word	0x20000540

00004638 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    4638:	b510      	push	{r4, lr}
	__asm__ volatile(
    463a:	f04f 0320 	mov.w	r3, #32
    463e:	f3ef 8411 	mrs	r4, BASEPRI
    4642:	f383 8812 	msr	BASEPRI_MAX, r3
    4646:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    464a:	f7ff febb 	bl	43c4 <usb_ep_get_transfer>
	if (!trans) {
    464e:	b150      	cbz	r0, 4666 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    4650:	6843      	ldr	r3, [r0, #4]
    4652:	3310      	adds	r3, #16
    4654:	d107      	bne.n	4666 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    4656:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    465a:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    465c:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    4660:	4803      	ldr	r0, [pc, #12]	; (4670 <usb_cancel_transfer+0x38>)
    4662:	f009 fb8b 	bl	dd7c <k_work_submit_to_queue>
	__asm__ volatile(
    4666:	f384 8811 	msr	BASEPRI, r4
    466a:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    466e:	bd10      	pop	{r4, pc}
    4670:	20000540 	.word	0x20000540

00004674 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    4674:	b570      	push	{r4, r5, r6, lr}
    4676:	4c0f      	ldr	r4, [pc, #60]	; (46b4 <usb_cancel_transfers+0x40>)
    4678:	2504      	movs	r5, #4
	__asm__ volatile(
    467a:	f04f 0320 	mov.w	r3, #32
    467e:	f3ef 8611 	mrs	r6, BASEPRI
    4682:	f383 8812 	msr	BASEPRI_MAX, r3
    4686:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    468a:	6863      	ldr	r3, [r4, #4]
    468c:	3310      	adds	r3, #16
    468e:	d107      	bne.n	46a0 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    4690:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4694:	4808      	ldr	r0, [pc, #32]	; (46b8 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    4696:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4698:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    469c:	f009 fb6e 	bl	dd7c <k_work_submit_to_queue>
	__asm__ volatile(
    46a0:	f386 8811 	msr	BASEPRI, r6
    46a4:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    46a8:	3d01      	subs	r5, #1
    46aa:	f104 0440 	add.w	r4, r4, #64	; 0x40
    46ae:	d1e4      	bne.n	467a <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    46b0:	bd70      	pop	{r4, r5, r6, pc}
    46b2:	bf00      	nop
    46b4:	20000c88 	.word	0x20000c88
    46b8:	20000540 	.word	0x20000540

000046bc <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    46bc:	b570      	push	{r4, r5, r6, lr}
    46be:	4c0a      	ldr	r4, [pc, #40]	; (46e8 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    46c0:	4e0a      	ldr	r6, [pc, #40]	; (46ec <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    46c2:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    46c4:	4631      	mov	r1, r6
    46c6:	4620      	mov	r0, r4
    46c8:	f009 fb3b 	bl	dd42 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    46cc:	2201      	movs	r2, #1
    46ce:	f1a4 0010 	sub.w	r0, r4, #16
    46d2:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    46d4:	3501      	adds	r5, #1
    46d6:	f009 faf7 	bl	dcc8 <z_impl_k_sem_init>
    46da:	2d04      	cmp	r5, #4
    46dc:	f104 0440 	add.w	r4, r4, #64	; 0x40
    46e0:	d1f0      	bne.n	46c4 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    46e2:	2000      	movs	r0, #0
    46e4:	bd70      	pop	{r4, r5, r6, pc}
    46e6:	bf00      	nop
    46e8:	20000cb4 	.word	0x20000cb4
    46ec:	000043f1 	.word	0x000043f1

000046f0 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    46f0:	b570      	push	{r4, r5, r6, lr}
    46f2:	4604      	mov	r4, r0
    46f4:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    46f6:	7901      	ldrb	r1, [r0, #4]
    46f8:	4812      	ldr	r0, [pc, #72]	; (4744 <cdc_acm_class_handle_req+0x54>)
{
    46fa:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    46fc:	f007 fdf8 	bl	c2f0 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    4700:	b1e8      	cbz	r0, 473e <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    4702:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    4706:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    4708:	2a00      	cmp	r2, #0
    470a:	db11      	blt.n	4730 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    470c:	2b20      	cmp	r3, #32
    470e:	d004      	beq.n	471a <cdc_acm_class_handle_req+0x2a>
    4710:	2b22      	cmp	r3, #34	; 0x22
    4712:	d009      	beq.n	4728 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    4714:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4718:	e005      	b.n	4726 <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    471a:	6829      	ldr	r1, [r5, #0]
    471c:	2207      	movs	r2, #7
    471e:	3810      	subs	r0, #16
    4720:	f007 fedc 	bl	c4dc <memcpy>
			return 0;
    4724:	2000      	movs	r0, #0
}
    4726:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    4728:	8863      	ldrh	r3, [r4, #2]
    472a:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
    472e:	e7f9      	b.n	4724 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    4730:	2b21      	cmp	r3, #33	; 0x21
    4732:	d1ef      	bne.n	4714 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    4734:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
    4736:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    4738:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    473a:	6033      	str	r3, [r6, #0]
			return 0;
    473c:	e7f2      	b.n	4724 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    473e:	f06f 0012 	mvn.w	r0, #18
    4742:	e7f0      	b.n	4726 <cdc_acm_class_handle_req+0x36>
    4744:	20000d88 	.word	0x20000d88

00004748 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    4748:	b508      	push	{r3, lr}
    474a:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    474c:	4803      	ldr	r0, [pc, #12]	; (475c <cdc_acm_int_in+0x14>)
    474e:	f007 fddd 	bl	c30c <usb_get_dev_data_by_ep>
	if (common == NULL) {
    4752:	b110      	cbz	r0, 475a <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    4754:	2301      	movs	r3, #1
    4756:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    475a:	bd08      	pop	{r3, pc}
    475c:	20000d88 	.word	0x20000d88

00004760 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4760:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    4762:	2301      	movs	r3, #1
    4764:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
    4768:	680b      	ldr	r3, [r1, #0]
    476a:	b133      	cbz	r3, 477a <cdc_acm_irq_rx_enable+0x1a>
    476c:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    4770:	b11b      	cbz	r3, 477a <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4772:	4802      	ldr	r0, [pc, #8]	; (477c <cdc_acm_irq_rx_enable+0x1c>)
    4774:	3108      	adds	r1, #8
    4776:	f009 bb01 	b.w	dd7c <k_work_submit_to_queue>
	}
}
    477a:	4770      	bx	lr
    477c:	20000540 	.word	0x20000540

00004780 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4780:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    4782:	2301      	movs	r3, #1
    4784:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
    4788:	680b      	ldr	r3, [r1, #0]
    478a:	b133      	cbz	r3, 479a <cdc_acm_irq_tx_enable+0x1a>
    478c:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    4790:	b11b      	cbz	r3, 479a <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4792:	4802      	ldr	r0, [pc, #8]	; (479c <cdc_acm_irq_tx_enable+0x1c>)
    4794:	3108      	adds	r1, #8
    4796:	f009 baf1 	b.w	dd7c <k_work_submit_to_queue>
}
    479a:	4770      	bx	lr
    479c:	20000540 	.word	0x20000540

000047a0 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    47a0:	4a0d      	ldr	r2, [pc, #52]	; (47d8 <cdc_acm_reset_port+0x38>)
{
    47a2:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
    47a4:	2100      	movs	r1, #0
    47a6:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
    47aa:	6810      	ldr	r0, [r2, #0]
    47ac:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    47b0:	8890      	ldrh	r0, [r2, #4]
    47b2:	7992      	ldrb	r2, [r2, #6]
    47b4:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
    47b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
    47bc:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
    47c0:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	dev_data->configured = false;
    47c4:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
    47c8:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    47cc:	2240      	movs	r2, #64	; 0x40
    47ce:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    47d2:	f007 be8e 	b.w	c4f2 <memset>
    47d6:	bf00      	nop
    47d8:	0000e510 	.word	0x0000e510

000047dc <cdc_acm_fifo_fill>:
{
    47dc:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    47de:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    47e0:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    47e4:	b188      	cbz	r0, 480a <cdc_acm_fifo_fill+0x2e>
    47e6:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    47ea:	b97b      	cbnz	r3, 480c <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
    47ec:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    47f0:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    47f4:	f007 fcd5 	bl	c1a2 <ring_buf_put>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    47f8:	2200      	movs	r2, #0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    47fa:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    47fc:	2300      	movs	r3, #0
    47fe:	4804      	ldr	r0, [pc, #16]	; (4810 <cdc_acm_fifo_fill+0x34>)
    4800:	f105 0118 	add.w	r1, r5, #24
    4804:	f006 fb50 	bl	aea8 <k_work_schedule_for_queue>
	return wrote;
    4808:	4620      	mov	r0, r4
}
    480a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    480c:	2000      	movs	r0, #0
    480e:	e7fc      	b.n	480a <cdc_acm_fifo_fill+0x2e>
    4810:	20000540 	.word	0x20000540

00004814 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    4814:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4816:	6904      	ldr	r4, [r0, #16]
{
    4818:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    481c:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    4820:	b1a3      	cbz	r3, 484c <cdc_acm_poll_out+0x38>
    4822:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    4826:	b98b      	cbnz	r3, 484c <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    4828:	f10d 0107 	add.w	r1, sp, #7
    482c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
    4830:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    4834:	2201      	movs	r2, #1
    4836:	f007 fcb4 	bl	c1a2 <ring_buf_put>
    483a:	4601      	mov	r1, r0
    483c:	b140      	cbz	r0, 4850 <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
    483e:	480d      	ldr	r0, [pc, #52]	; (4874 <cdc_acm_poll_out+0x60>)
    4840:	2221      	movs	r2, #33	; 0x21
    4842:	2300      	movs	r3, #0
    4844:	f104 0118 	add.w	r1, r4, #24
    4848:	f006 fb2e 	bl	aea8 <k_work_schedule_for_queue>
}
    484c:	b002      	add	sp, #8
    484e:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    4850:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    4854:	2201      	movs	r2, #1
    4856:	f007 fcf8 	bl	c24a <ring_buf_get>
    485a:	2800      	cmp	r0, #0
    485c:	d0f6      	beq.n	484c <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    485e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    4862:	2201      	movs	r2, #1
    4864:	f10d 0107 	add.w	r1, sp, #7
    4868:	f007 fc9b 	bl	c1a2 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    486c:	2800      	cmp	r0, #0
    486e:	d1e6      	bne.n	483e <cdc_acm_poll_out+0x2a>
    4870:	e7ec      	b.n	484c <cdc_acm_poll_out+0x38>
    4872:	bf00      	nop
    4874:	20000540 	.word	0x20000540

00004878 <tx_work_handler>:
{
    4878:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    487a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    487e:	685b      	ldr	r3, [r3, #4]
    4880:	6a1b      	ldr	r3, [r3, #32]
    4882:	7d1f      	ldrb	r7, [r3, #20]
{
    4884:	b085      	sub	sp, #20
    4886:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    4888:	4638      	mov	r0, r7
    488a:	f007 fd55 	bl	c338 <usb_transfer_is_busy>
    488e:	4606      	mov	r6, r0
    4890:	b9e0      	cbnz	r0, 48cc <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    4892:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    4894:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4898:	a903      	add	r1, sp, #12
    489a:	f007 fca1 	bl	c1e0 <ring_buf_get_claim>
	if (!len) {
    489e:	4604      	mov	r4, r0
    48a0:	b1a0      	cbz	r0, 48cc <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    48a2:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    48a4:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    48a8:	bf08      	it	eq
    48aa:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	dev_data->tx_ready = false;
    48ae:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    48b2:	9301      	str	r3, [sp, #4]
    48b4:	4b06      	ldr	r3, [pc, #24]	; (48d0 <tx_work_handler+0x58>)
    48b6:	9903      	ldr	r1, [sp, #12]
    48b8:	9300      	str	r3, [sp, #0]
    48ba:	4622      	mov	r2, r4
    48bc:	2302      	movs	r3, #2
    48be:	4638      	mov	r0, r7
    48c0:	f7ff fe48 	bl	4554 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    48c4:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    48c6:	4621      	mov	r1, r4
    48c8:	f007 fcaa 	bl	c220 <ring_buf_get_finish>
}
    48cc:	b005      	add	sp, #20
    48ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48d0:	000048d5 	.word	0x000048d5

000048d4 <cdc_acm_write_cb>:
{
    48d4:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
    48d6:	2301      	movs	r3, #1
    48d8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
    48dc:	6813      	ldr	r3, [r2, #0]
{
    48de:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    48e0:	b13b      	cbz	r3, 48f2 <cdc_acm_write_cb+0x1e>
    48e2:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
    48e6:	b123      	cbz	r3, 48f2 <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    48e8:	480a      	ldr	r0, [pc, #40]	; (4914 <cdc_acm_write_cb+0x40>)
    48ea:	f102 0108 	add.w	r1, r2, #8
    48ee:	f009 fa45 	bl	dd7c <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    48f2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    48f6:	689a      	ldr	r2, [r3, #8]
    48f8:	691b      	ldr	r3, [r3, #16]
    48fa:	429a      	cmp	r2, r3
    48fc:	d008      	beq.n	4910 <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    48fe:	f104 0118 	add.w	r1, r4, #24
    4902:	4804      	ldr	r0, [pc, #16]	; (4914 <cdc_acm_write_cb+0x40>)
}
    4904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    4908:	2200      	movs	r2, #0
    490a:	2300      	movs	r3, #0
    490c:	f006 bacc 	b.w	aea8 <k_work_schedule_for_queue>
}
    4910:	bd10      	pop	{r4, pc}
    4912:	bf00      	nop
    4914:	20000540 	.word	0x20000540

00004918 <cdc_acm_init>:
{
    4918:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    491a:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    491c:	2300      	movs	r3, #0
    491e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4922:	4b0c      	ldr	r3, [pc, #48]	; (4954 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    4924:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    4928:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    492a:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    492e:	b969      	cbnz	r1, 494c <cdc_acm_init+0x34>
	list->head = node;
    4930:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    4934:	f104 0008 	add.w	r0, r4, #8
    4938:	4907      	ldr	r1, [pc, #28]	; (4958 <cdc_acm_init+0x40>)
    493a:	f009 fa02 	bl	dd42 <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
    493e:	f104 0018 	add.w	r0, r4, #24
    4942:	4906      	ldr	r1, [pc, #24]	; (495c <cdc_acm_init+0x44>)
    4944:	f009 fa2b 	bl	dd9e <k_work_init_delayable>
}
    4948:	2000      	movs	r0, #0
    494a:	bd10      	pop	{r4, pc}
	parent->next = child;
    494c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    494e:	605a      	str	r2, [r3, #4]
}
    4950:	e7f0      	b.n	4934 <cdc_acm_init+0x1c>
    4952:	bf00      	nop
    4954:	20000d88 	.word	0x20000d88
    4958:	0000c363 	.word	0x0000c363
    495c:	00004879 	.word	0x00004879

00004960 <cdc_acm_read_cb>:
{
    4960:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4962:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    4964:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
    4968:	1e0a      	subs	r2, r1, #0
{
    496a:	4605      	mov	r5, r0
	if (size <= 0) {
    496c:	dd1f      	ble.n	49ae <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    496e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    4972:	4631      	mov	r1, r6
    4974:	f007 fc15 	bl	c1a2 <ring_buf_put>
	dev_data->rx_ready = true;
    4978:	2301      	movs	r3, #1
    497a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
    497e:	6823      	ldr	r3, [r4, #0]
    4980:	b13b      	cbz	r3, 4992 <cdc_acm_read_cb+0x32>
    4982:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    4986:	b123      	cbz	r3, 4992 <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4988:	480e      	ldr	r0, [pc, #56]	; (49c4 <cdc_acm_read_cb+0x64>)
    498a:	f104 0108 	add.w	r1, r4, #8
    498e:	f009 f9f5 	bl	dd7c <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    4992:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    4996:	684b      	ldr	r3, [r1, #4]
    4998:	694a      	ldr	r2, [r1, #20]
    499a:	1a9a      	subs	r2, r3, r2
    499c:	69cb      	ldr	r3, [r1, #28]
    499e:	1a9b      	subs	r3, r3, r2
    49a0:	2b3f      	cmp	r3, #63	; 0x3f
    49a2:	d804      	bhi.n	49ae <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
    49a4:	2301      	movs	r3, #1
    49a6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    49aa:	b002      	add	sp, #8
    49ac:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    49ae:	4b06      	ldr	r3, [pc, #24]	; (49c8 <cdc_acm_read_cb+0x68>)
    49b0:	9300      	str	r3, [sp, #0]
    49b2:	9401      	str	r4, [sp, #4]
    49b4:	2301      	movs	r3, #1
    49b6:	2240      	movs	r2, #64	; 0x40
    49b8:	4631      	mov	r1, r6
    49ba:	4628      	mov	r0, r5
    49bc:	f7ff fdca 	bl	4554 <usb_transfer>
    49c0:	e7f3      	b.n	49aa <cdc_acm_read_cb+0x4a>
    49c2:	bf00      	nop
    49c4:	20000540 	.word	0x20000540
    49c8:	00004961 	.word	0x00004961

000049cc <cdc_acm_dev_status_cb>:
{
    49cc:	b538      	push	{r3, r4, r5, lr}
    49ce:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    49d0:	4601      	mov	r1, r0
    49d2:	481e      	ldr	r0, [pc, #120]	; (4a4c <cdc_acm_dev_status_cb+0x80>)
    49d4:	f007 fc80 	bl	c2d8 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    49d8:	4604      	mov	r4, r0
    49da:	b380      	cbz	r0, 4a3e <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    49dc:	4602      	mov	r2, r0
	switch (status) {
    49de:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    49e0:	f852 39a4 	ldr.w	r3, [r2], #-164
    49e4:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    49e6:	2905      	cmp	r1, #5
    49e8:	d829      	bhi.n	4a3e <cdc_acm_dev_status_cb+0x72>
    49ea:	e8df f001 	tbb	[pc, r1]
    49ee:	2820      	.short	0x2820
    49f0:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    49f4:	f814 1c06 	ldrb.w	r1, [r4, #-6]
    49f8:	b931      	cbnz	r1, 4a08 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    49fa:	6a1b      	ldr	r3, [r3, #32]
    49fc:	7b18      	ldrb	r0, [r3, #12]
    49fe:	f7ff ffaf 	bl	4960 <cdc_acm_read_cb>
			dev_data->configured = true;
    4a02:	2301      	movs	r3, #1
    4a04:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
    4a08:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
    4a0c:	b9bb      	cbnz	r3, 4a3e <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    4a0e:	2301      	movs	r3, #1
    4a10:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    4a14:	f854 3ca4 	ldr.w	r3, [r4, #-164]
    4a18:	b18b      	cbz	r3, 4a3e <cdc_acm_dev_status_cb+0x72>
    4a1a:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
    4a1e:	b173      	cbz	r3, 4a3e <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4a20:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
    4a24:	480a      	ldr	r0, [pc, #40]	; (4a50 <cdc_acm_dev_status_cb+0x84>)
}
    4a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4a2a:	f009 b9a7 	b.w	dd7c <k_work_submit_to_queue>
}
    4a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    4a32:	4610      	mov	r0, r2
    4a34:	f7ff beb4 	b.w	47a0 <cdc_acm_reset_port>
		dev_data->suspended = true;
    4a38:	2301      	movs	r3, #1
			dev_data->suspended = false;
    4a3a:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    4a3e:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    4a40:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    4a44:	2b00      	cmp	r3, #0
    4a46:	d0fa      	beq.n	4a3e <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
    4a48:	2300      	movs	r3, #0
    4a4a:	e7f6      	b.n	4a3a <cdc_acm_dev_status_cb+0x6e>
    4a4c:	20000d88 	.word	0x20000d88
    4a50:	20000540 	.word	0x20000540

00004a54 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
    4a54:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
    4a56:	4d09      	ldr	r5, [pc, #36]	; (4a7c <z_usb_work_q_init+0x28>)
    4a58:	4909      	ldr	r1, [pc, #36]	; (4a80 <z_usb_work_q_init+0x2c>)
    4a5a:	2400      	movs	r4, #0
    4a5c:	9400      	str	r4, [sp, #0]
    4a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4a66:	4628      	mov	r0, r5
    4a68:	f006 f9e6 	bl	ae38 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    4a6c:	4905      	ldr	r1, [pc, #20]	; (4a84 <z_usb_work_q_init+0x30>)
    4a6e:	4628      	mov	r0, r5
    4a70:	f009 f896 	bl	dba0 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    4a74:	4620      	mov	r0, r4
    4a76:	b003      	add	sp, #12
    4a78:	bd30      	pop	{r4, r5, pc}
    4a7a:	bf00      	nop
    4a7c:	20000540 	.word	0x20000540
    4a80:	200030c0 	.word	0x200030c0
    4a84:	0000edc2 	.word	0x0000edc2

00004a88 <oled_clearPart>:
	disp_column = x;
	disp_row = y / 8;
}

void oled_clearPart(const struct device *dev, uint8_t page, uint8_t start_pos, uint8_t end_pos)
{
    4a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	disp_column = x;
    4a8a:	4c0b      	ldr	r4, [pc, #44]	; (4ab8 <oled_clearPart+0x30>)
	disp_row = y / 8;
    4a8c:	4d0b      	ldr	r5, [pc, #44]	; (4abc <oled_clearPart+0x34>)
	disp_column = x;
    4a8e:	7022      	strb	r2, [r4, #0]
	disp_row = y / 8;
    4a90:	f001 011f 	and.w	r1, r1, #31
    4a94:	7029      	strb	r1, [r5, #0]
	oled_setCursor(start_pos, page * 8);
	for (uint8_t i = start_pos; i <= end_pos; i++) {
		FRAME_BUFFER[disp_row][disp_column++] = 0x00;
    4a96:	2700      	movs	r7, #0
	for (uint8_t i = start_pos; i <= end_pos; i++) {
    4a98:	429a      	cmp	r2, r3
    4a9a:	d900      	bls.n	4a9e <oled_clearPart+0x16>
	}
}
    4a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		FRAME_BUFFER[disp_row][disp_column++] = 0x00;
    4a9e:	782e      	ldrb	r6, [r5, #0]
    4aa0:	6901      	ldr	r1, [r0, #16]
    4aa2:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
    4aa6:	7826      	ldrb	r6, [r4, #0]
	for (uint8_t i = start_pos; i <= end_pos; i++) {
    4aa8:	3201      	adds	r2, #1
		FRAME_BUFFER[disp_row][disp_column++] = 0x00;
    4aaa:	f106 0c01 	add.w	ip, r6, #1
    4aae:	f884 c000 	strb.w	ip, [r4]
	for (uint8_t i = start_pos; i <= end_pos; i++) {
    4ab2:	b2d2      	uxtb	r2, r2
		FRAME_BUFFER[disp_row][disp_column++] = 0x00;
    4ab4:	558f      	strb	r7, [r1, r6]
	for (uint8_t i = start_pos; i <= end_pos; i++) {
    4ab6:	e7ef      	b.n	4a98 <oled_clearPart+0x10>
    4ab8:	20001b7a 	.word	0x20001b7a
    4abc:	20001b7b 	.word	0x20001b7b

00004ac0 <oled_printChar>:
	}
}

void oled_printChar(const struct device *dev, char C, uint8_t xpos, uint8_t ypos, uint8_t font_size,
		    bool Highlight)
{
    4ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ac4:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
    4ac8:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	char chr;

	if (font_size == 6) {
    4acc:	2e06      	cmp	r6, #6
{
    4ace:	461c      	mov	r4, r3
	if (font_size == 6) {
    4ad0:	d11d      	bne.n	4b0e <oled_printChar+0x4e>
    4ad2:	4b36      	ldr	r3, [pc, #216]	; (4bac <oled_printChar+0xec>)
			chr = font6x8[((int)C - 32) * 6 + i];
			if (Highlight) {
				chr = ~chr;
			}

			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4ad4:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 4bb0 <oled_printChar+0xf0>
    4ad8:	4f36      	ldr	r7, [pc, #216]	; (4bb4 <oled_printChar+0xf4>)
			chr = font6x8[((int)C - 32) * 6 + i];
    4ada:	3920      	subs	r1, #32
    4adc:	fb06 3101 	mla	r1, r6, r1, r3
		for (uint8_t i = 0; i < 6; i++) {
    4ae0:	2300      	movs	r3, #0
			chr = font6x8[((int)C - 32) * 6 + i];
    4ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
			if (Highlight) {
    4ae6:	b10d      	cbz	r5, 4aec <oled_printChar+0x2c>
				chr = ~chr;
    4ae8:	43d2      	mvns	r2, r2
    4aea:	b2d2      	uxtb	r2, r2
			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4aec:	f89e 6000 	ldrb.w	r6, [lr]
    4af0:	6904      	ldr	r4, [r0, #16]
		for (uint8_t i = 0; i < 6; i++) {
    4af2:	3301      	adds	r3, #1
			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4af4:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
    4af8:	783e      	ldrb	r6, [r7, #0]
		for (uint8_t i = 0; i < 6; i++) {
    4afa:	b2db      	uxtb	r3, r3
			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4afc:	f106 0c01 	add.w	ip, r6, #1
		for (uint8_t i = 0; i < 6; i++) {
    4b00:	2b06      	cmp	r3, #6
			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4b02:	f887 c000 	strb.w	ip, [r7]
    4b06:	55a2      	strb	r2, [r4, r6]
		for (uint8_t i = 0; i < 6; i++) {
    4b08:	d1eb      	bne.n	4ae2 <oled_printChar+0x22>

		char_cnt++;
	} else {
		return;
	}
}
    4b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (font_size == 16) {
    4b0e:	2e10      	cmp	r6, #16
    4b10:	d1fb      	bne.n	4b0a <oled_printChar+0x4a>
		oled_setCursor(xpos + (char_cnt)*8, ypos);
    4b12:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 4bb8 <oled_printChar+0xf8>
	disp_column = x;
    4b16:	4e27      	ldr	r6, [pc, #156]	; (4bb4 <oled_printChar+0xf4>)
		oled_setCursor(xpos + (char_cnt)*8, ypos);
    4b18:	f898 3000 	ldrb.w	r3, [r8]
	disp_row = y / 8;
    4b1c:	4f24      	ldr	r7, [pc, #144]	; (4bb0 <oled_printChar+0xf0>)
		oled_setCursor(xpos + (char_cnt)*8, ypos);
    4b1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	disp_column = x;
    4b22:	7033      	strb	r3, [r6, #0]
	disp_row = y / 8;
    4b24:	08e3      	lsrs	r3, r4, #3
    4b26:	703b      	strb	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++) {
    4b28:	4b24      	ldr	r3, [pc, #144]	; (4bbc <oled_printChar+0xfc>)
			chr = font16x8[((int)C - 32) * 16 + i];
    4b2a:	3920      	subs	r1, #32
    4b2c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4b30:	468a      	mov	sl, r1
		for (uint8_t i = 0; i < 8; i++) {
    4b32:	2300      	movs	r3, #0
			chr = font16x8[((int)C - 32) * 16 + i];
    4b34:	f81a cb01 	ldrb.w	ip, [sl], #1
			if (Highlight) {
    4b38:	b11d      	cbz	r5, 4b42 <oled_printChar+0x82>
				chr = ~chr;
    4b3a:	ea6f 0c0c 	mvn.w	ip, ip
    4b3e:	fa5f fc8c 	uxtb.w	ip, ip
			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4b42:	f8d0 9010 	ldr.w	r9, [r0, #16]
    4b46:	f897 e000 	ldrb.w	lr, [r7]
		for (uint8_t i = 0; i < 8; i++) {
    4b4a:	3301      	adds	r3, #1
			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4b4c:	eb09 1ece 	add.w	lr, r9, lr, lsl #7
    4b50:	f896 9000 	ldrb.w	r9, [r6]
		for (uint8_t i = 0; i < 8; i++) {
    4b54:	b2db      	uxtb	r3, r3
			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4b56:	f109 0b01 	add.w	fp, r9, #1
		for (uint8_t i = 0; i < 8; i++) {
    4b5a:	2b08      	cmp	r3, #8
			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4b5c:	f886 b000 	strb.w	fp, [r6]
    4b60:	f80e c009 	strb.w	ip, [lr, r9]
		for (uint8_t i = 0; i < 8; i++) {
    4b64:	d1e6      	bne.n	4b34 <oled_printChar+0x74>
		oled_setCursor(xpos + (char_cnt)*8, ypos + 8);
    4b66:	f898 c000 	ldrb.w	ip, [r8]
    4b6a:	3408      	adds	r4, #8
    4b6c:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
	disp_row = y / 8;
    4b70:	f3c4 04c4 	ubfx	r4, r4, #3, #5
	disp_column = x;
    4b74:	7032      	strb	r2, [r6, #0]
	disp_row = y / 8;
    4b76:	703c      	strb	r4, [r7, #0]
			chr = font16x8[((int)C - 32) * 16 + i];
    4b78:	5cca      	ldrb	r2, [r1, r3]
			if (Highlight) {
    4b7a:	b10d      	cbz	r5, 4b80 <oled_printChar+0xc0>
				chr = ~chr;
    4b7c:	43d2      	mvns	r2, r2
    4b7e:	b2d2      	uxtb	r2, r2
			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4b80:	f897 c000 	ldrb.w	ip, [r7]
    4b84:	6904      	ldr	r4, [r0, #16]
    4b86:	eb04 14cc 	add.w	r4, r4, ip, lsl #7
    4b8a:	f896 c000 	ldrb.w	ip, [r6]
		for (uint8_t i = 8; i < 16; i++) {
    4b8e:	3301      	adds	r3, #1
			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4b90:	f10c 0e01 	add.w	lr, ip, #1
		for (uint8_t i = 8; i < 16; i++) {
    4b94:	2b10      	cmp	r3, #16
			FRAME_BUFFER[disp_row][disp_column++] = chr;
    4b96:	f886 e000 	strb.w	lr, [r6]
    4b9a:	f804 200c 	strb.w	r2, [r4, ip]
		for (uint8_t i = 8; i < 16; i++) {
    4b9e:	d1eb      	bne.n	4b78 <oled_printChar+0xb8>
		char_cnt++;
    4ba0:	4a05      	ldr	r2, [pc, #20]	; (4bb8 <oled_printChar+0xf8>)
    4ba2:	7813      	ldrb	r3, [r2, #0]
    4ba4:	3301      	adds	r3, #1
    4ba6:	7013      	strb	r3, [r2, #0]
    4ba8:	e7af      	b.n	4b0a <oled_printChar+0x4a>
    4baa:	bf00      	nop
    4bac:	0000f3bb 	.word	0x0000f3bb
    4bb0:	20001b7b 	.word	0x20001b7b
    4bb4:	20001b7a 	.word	0x20001b7a
    4bb8:	20001b7c 	.word	0x20001b7c
    4bbc:	0000edcb 	.word	0x0000edcb

00004bc0 <oled_printString>:

void oled_printString(const struct device *dev, const char *str, uint8_t xpos, uint8_t ypos,
		      uint8_t font_size, bool Highlight)
{
    4bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t len = strlen(str);
	char_cnt = 0;
    4bc4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4c18 <oled_printString+0x58>
{
    4bc8:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    4bcc:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    4bd0:	4607      	mov	r7, r0
	uint8_t len = strlen(str);
    4bd2:	4608      	mov	r0, r1
{
    4bd4:	4615      	mov	r5, r2
    4bd6:	461e      	mov	r6, r3
    4bd8:	460c      	mov	r4, r1
	uint8_t len = strlen(str);
    4bda:	f007 fc78 	bl	c4ce <strlen>
	char_cnt = 0;
    4bde:	2300      	movs	r3, #0
    4be0:	f888 3000 	strb.w	r3, [r8]
	disp_column = x;
    4be4:	4b0d      	ldr	r3, [pc, #52]	; (4c1c <oled_printString+0x5c>)
    4be6:	701d      	strb	r5, [r3, #0]
	disp_row = y / 8;
    4be8:	4b0d      	ldr	r3, [pc, #52]	; (4c20 <oled_printString+0x60>)
    4bea:	08f2      	lsrs	r2, r6, #3
    4bec:	701a      	strb	r2, [r3, #0]
	oled_setCursor(xpos, ypos);
	for (uint8_t i = 0; i < len; i++) {
    4bee:	fa54 fb80 	uxtab	fp, r4, r0
    4bf2:	455c      	cmp	r4, fp
    4bf4:	d105      	bne.n	4c02 <oled_printString+0x42>
		oled_printChar(dev, str[i], xpos, ypos, font_size, Highlight);
	}
	char_cnt = 0;
    4bf6:	2300      	movs	r3, #0
    4bf8:	f888 3000 	strb.w	r3, [r8]
}
    4bfc:	b003      	add	sp, #12
    4bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		oled_printChar(dev, str[i], xpos, ypos, font_size, Highlight);
    4c02:	e9cd 9a00 	strd	r9, sl, [sp]
    4c06:	4633      	mov	r3, r6
    4c08:	f814 1b01 	ldrb.w	r1, [r4], #1
    4c0c:	462a      	mov	r2, r5
    4c0e:	4638      	mov	r0, r7
    4c10:	f7ff ff56 	bl	4ac0 <oled_printChar>
	for (uint8_t i = 0; i < len; i++) {
    4c14:	e7ed      	b.n	4bf2 <oled_printString+0x32>
    4c16:	bf00      	nop
    4c18:	20001b7c 	.word	0x20001b7c
    4c1c:	20001b7a 	.word	0x20001b7a
    4c20:	20001b7b 	.word	0x20001b7b

00004c24 <oled_displayBmp>:
		oled_setPixel(dev, Cx - (sqrt(sq(radius) - sq(i - Cy))), i, set);
	}
}

void oled_displayBmp(const struct device *dev, const uint8_t *binArray)
{
    4c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	disp_row = y / 8;
    4c28:	f8df c050 	ldr.w	ip, [pc, #80]	; 4c7c <oled_displayBmp+0x58>
	disp_column = x;
    4c2c:	4e14      	ldr	r6, [pc, #80]	; (4c80 <oled_displayBmp+0x5c>)
{
    4c2e:	2500      	movs	r5, #0
	disp_column = x;
    4c30:	46ae      	mov	lr, r5
	disp_row = y / 8;
    4c32:	f005 031f 	and.w	r3, r5, #31
    4c36:	f88c 3000 	strb.w	r3, [ip]
	disp_column = x;
    4c3a:	f886 e000 	strb.w	lr, [r6]
		oled_setCursor(0, y);

		for (uint8_t parts = 0; parts < 8; parts++) {

			for (uint8_t column = 0; column < 16; column++) {
				chr = binArray[line * 128 + i];
    4c3e:	2300      	movs	r3, #0
    4c40:	eb01 18c5 	add.w	r8, r1, r5, lsl #7
			for (uint8_t column = 0; column < 16; column++) {
    4c44:	f103 0210 	add.w	r2, r3, #16
    4c48:	b2d2      	uxtb	r2, r2

				FRAME_BUFFER[disp_row][disp_column++] = chr;
    4c4a:	f89c 7000 	ldrb.w	r7, [ip]
    4c4e:	6904      	ldr	r4, [r0, #16]
				chr = binArray[line * 128 + i];
    4c50:	f818 9003 	ldrb.w	r9, [r8, r3]
				FRAME_BUFFER[disp_row][disp_column++] = chr;
    4c54:	eb04 14c7 	add.w	r4, r4, r7, lsl #7

				i++;
    4c58:	3301      	adds	r3, #1
				FRAME_BUFFER[disp_row][disp_column++] = chr;
    4c5a:	7837      	ldrb	r7, [r6, #0]
				i++;
    4c5c:	b2db      	uxtb	r3, r3
				FRAME_BUFFER[disp_row][disp_column++] = chr;
    4c5e:	f107 0a01 	add.w	sl, r7, #1
			for (uint8_t column = 0; column < 16; column++) {
    4c62:	4293      	cmp	r3, r2
				FRAME_BUFFER[disp_row][disp_column++] = chr;
    4c64:	f886 a000 	strb.w	sl, [r6]
    4c68:	f804 9007 	strb.w	r9, [r4, r7]
			for (uint8_t column = 0; column < 16; column++) {
    4c6c:	d1ed      	bne.n	4c4a <oled_displayBmp+0x26>
		for (uint8_t parts = 0; parts < 8; parts++) {
    4c6e:	2b80      	cmp	r3, #128	; 0x80
    4c70:	d1e8      	bne.n	4c44 <oled_displayBmp+0x20>
	for (uint8_t y = 0; y < 64; y += 8) {
    4c72:	3501      	adds	r5, #1
    4c74:	2d08      	cmp	r5, #8
    4c76:	d1dc      	bne.n	4c32 <oled_displayBmp+0xe>
			}
		}
		i = 0;
		line++;
	}
}
    4c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c7c:	20001b7b 	.word	0x20001b7b
    4c80:	20001b7a 	.word	0x20001b7a

00004c84 <oled_printLog>:
	log_scroll = 0;
}

// Print text with auto scroll
void oled_printLog(const struct device *dev, const char *log_msg)
{
    4c84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const sh1106_api *api = dev->api;
	oled_clearPart(dev, log_row >> 3, 0, 127);
    4c88:	4c16      	ldr	r4, [pc, #88]	; (4ce4 <oled_printLog+0x60>)
	const sh1106_api *api = dev->api;
    4c8a:	6887      	ldr	r7, [r0, #8]
	oled_clearPart(dev, log_row >> 3, 0, 127);
    4c8c:	f894 9000 	ldrb.w	r9, [r4]
{
    4c90:	4688      	mov	r8, r1
	oled_clearPart(dev, log_row >> 3, 0, 127);
    4c92:	237f      	movs	r3, #127	; 0x7f
    4c94:	2200      	movs	r2, #0
    4c96:	ea4f 01d9 	mov.w	r1, r9, lsr #3
    4c9a:	f7ff fef5 	bl	4a88 <oled_clearPart>
	oled_printString(dev, log_msg, 0, log_row, 6, false);
    4c9e:	2600      	movs	r6, #0
    4ca0:	2306      	movs	r3, #6
    4ca2:	e9cd 3600 	strd	r3, r6, [sp]
    4ca6:	4632      	mov	r2, r6
    4ca8:	464b      	mov	r3, r9
    4caa:	4641      	mov	r1, r8
{
    4cac:	4605      	mov	r5, r0
	oled_printString(dev, log_msg, 0, log_row, 6, false);
    4cae:	f7ff ff87 	bl	4bc0 <oled_printString>
	log_row += 16;
    4cb2:	7823      	ldrb	r3, [r4, #0]
    4cb4:	3310      	adds	r3, #16
    4cb6:	b2db      	uxtb	r3, r3
	if (log_row == 64) {
    4cb8:	2b40      	cmp	r3, #64	; 0x40
	log_row += 16;
    4cba:	7023      	strb	r3, [r4, #0]
	if (log_row == 64) {
    4cbc:	4b0a      	ldr	r3, [pc, #40]	; (4ce8 <oled_printLog+0x64>)
    4cbe:	d10b      	bne.n	4cd8 <oled_printLog+0x54>
		log_row = 0;
		if (!log_scroll) {
    4cc0:	781a      	ldrb	r2, [r3, #0]
		log_row = 0;
    4cc2:	7026      	strb	r6, [r4, #0]
		if (!log_scroll) {
    4cc4:	b90a      	cbnz	r2, 4cca <oled_printLog+0x46>
			log_scroll = true;
    4cc6:	2201      	movs	r2, #1
    4cc8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (log_scroll) {
		api->set_line_address(dev, log_row);
    4cca:	697b      	ldr	r3, [r7, #20]
    4ccc:	7821      	ldrb	r1, [r4, #0]
    4cce:	4628      	mov	r0, r5
	}
}
    4cd0:	b003      	add	sp, #12
    4cd2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		api->set_line_address(dev, log_row);
    4cd6:	4718      	bx	r3
	if (log_scroll) {
    4cd8:	781b      	ldrb	r3, [r3, #0]
    4cda:	2b00      	cmp	r3, #0
    4cdc:	d1f5      	bne.n	4cca <oled_printLog+0x46>
}
    4cde:	b003      	add	sp, #12
    4ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4ce4:	20001b7e 	.word	0x20001b7e
    4ce8:	20001b7d 	.word	0x20001b7d

00004cec <console_getline>:

static K_FIFO_DEFINE(free_queue);
static K_FIFO_DEFINE(used_queue);

char *console_getline(void)
{
    4cec:	b510      	push	{r4, lr}
	static struct console_input *cmd;

	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    4cee:	4c08      	ldr	r4, [pc, #32]	; (4d10 <console_getline+0x24>)
    4cf0:	6821      	ldr	r1, [r4, #0]
    4cf2:	b111      	cbz	r1, 4cfa <console_getline+0xe>
		k_fifo_put(&free_queue, cmd);
    4cf4:	4807      	ldr	r0, [pc, #28]	; (4d14 <console_getline+0x28>)
    4cf6:	f008 ffdc 	bl	dcb2 <k_queue_append>
	return z_impl_k_queue_get(queue, timeout);
    4cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d02:	4805      	ldr	r0, [pc, #20]	; (4d18 <console_getline+0x2c>)
    4d04:	f005 ff04 	bl	ab10 <z_impl_k_queue_get>
	}

	cmd = k_fifo_get(&used_queue, K_FOREVER);
    4d08:	6020      	str	r0, [r4, #0]
	return cmd->line;
}
    4d0a:	3005      	adds	r0, #5
    4d0c:	bd10      	pop	{r4, pc}
    4d0e:	bf00      	nop
    4d10:	20000d90 	.word	0x20000d90
    4d14:	20000330 	.word	0x20000330
    4d18:	20000350 	.word	0x20000350

00004d1c <console_getline_init>:

void console_getline_init(void)
{
    4d1c:	b538      	push	{r3, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(line_bufs); i++) {
		k_fifo_put(&free_queue, &line_bufs[i]);
    4d1e:	4c09      	ldr	r4, [pc, #36]	; (4d44 <console_getline_init+0x28>)
    4d20:	4d09      	ldr	r5, [pc, #36]	; (4d48 <console_getline_init+0x2c>)
    4d22:	4620      	mov	r0, r4
    4d24:	4629      	mov	r1, r5
    4d26:	f008 ffc4 	bl	dcb2 <k_queue_append>
    4d2a:	f105 0188 	add.w	r1, r5, #136	; 0x88
    4d2e:	4620      	mov	r0, r4
    4d30:	f008 ffbf 	bl	dcb2 <k_queue_append>

	/* Zephyr UART handler takes an empty buffer from free_queue,
	 * stores UART input in it until EOL, and then puts it into
	 * used_queue.
	 */
	uart_register_input(&free_queue, &used_queue, NULL);
    4d34:	4620      	mov	r0, r4
    4d36:	4905      	ldr	r1, [pc, #20]	; (4d4c <console_getline_init+0x30>)
}
    4d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	uart_register_input(&free_queue, &used_queue, NULL);
    4d3c:	2200      	movs	r2, #0
    4d3e:	f001 bf63 	b.w	6c08 <uart_register_input>
    4d42:	bf00      	nop
    4d44:	20000330 	.word	0x20000330
    4d48:	20000d94 	.word	0x20000d94
    4d4c:	20000350 	.word	0x20000350

00004d50 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4d50:	4901      	ldr	r1, [pc, #4]	; (4d58 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4d52:	2210      	movs	r2, #16
	str	r2, [r1]
    4d54:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4d56:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4d58:	e000ed10 	.word	0xe000ed10

00004d5c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4d5c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4d5e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4d60:	f380 8811 	msr	BASEPRI, r0
	isb
    4d64:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    4d68:	f3bf 8f4f 	dsb	sy
    4d6c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4d6e:	b662      	cpsie	i
	isb
    4d70:	f3bf 8f6f 	isb	sy

	bx	lr
    4d74:	4770      	bx	lr
    4d76:	bf00      	nop

00004d78 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4d78:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4d7a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4d7c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    4d80:	f3bf 8f4f 	dsb	sy
    4d84:	bf20      	wfe

	msr	BASEPRI, r0
    4d86:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4d8a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4d8c:	4770      	bx	lr
    4d8e:	bf00      	nop

00004d90 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4d90:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4d92:	2800      	cmp	r0, #0
    4d94:	db07      	blt.n	4da6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d96:	4a04      	ldr	r2, [pc, #16]	; (4da8 <arch_irq_enable+0x18>)
    4d98:	0941      	lsrs	r1, r0, #5
    4d9a:	2301      	movs	r3, #1
    4d9c:	f000 001f 	and.w	r0, r0, #31
    4da0:	4083      	lsls	r3, r0
    4da2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    4da6:	4770      	bx	lr
    4da8:	e000e100 	.word	0xe000e100

00004dac <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    4dac:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4dae:	2800      	cmp	r0, #0
    4db0:	db0c      	blt.n	4dcc <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4db2:	0943      	lsrs	r3, r0, #5
    4db4:	4906      	ldr	r1, [pc, #24]	; (4dd0 <arch_irq_disable+0x24>)
    4db6:	f000 001f 	and.w	r0, r0, #31
    4dba:	3320      	adds	r3, #32
    4dbc:	2201      	movs	r2, #1
    4dbe:	4082      	lsls	r2, r0
    4dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4dc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4dc8:	f3bf 8f6f 	isb	sy
}
    4dcc:	4770      	bx	lr
    4dce:	bf00      	nop
    4dd0:	e000e100 	.word	0xe000e100

00004dd4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4dd4:	4b05      	ldr	r3, [pc, #20]	; (4dec <arch_irq_is_enabled+0x18>)
    4dd6:	0942      	lsrs	r2, r0, #5
    4dd8:	f000 001f 	and.w	r0, r0, #31
    4ddc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4de0:	2301      	movs	r3, #1
    4de2:	fa03 f000 	lsl.w	r0, r3, r0
}
    4de6:	4010      	ands	r0, r2
    4de8:	4770      	bx	lr
    4dea:	bf00      	nop
    4dec:	e000e100 	.word	0xe000e100

00004df0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4df0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4df2:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4df4:	bfa8      	it	ge
    4df6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    4dfa:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4dfe:	bfb8      	it	lt
    4e00:	4b06      	ldrlt	r3, [pc, #24]	; (4e1c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e02:	ea4f 1141 	mov.w	r1, r1, lsl #5
    4e06:	bfac      	ite	ge
    4e08:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e0c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e10:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e12:	bfb4      	ite	lt
    4e14:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e16:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    4e1a:	4770      	bx	lr
    4e1c:	e000ed14 	.word	0xe000ed14

00004e20 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4e20:	bf30      	wfi
    b z_SysNmiOnReset
    4e22:	f7ff bffd 	b.w	4e20 <z_SysNmiOnReset>
    4e26:	bf00      	nop

00004e28 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4e28:	4a0f      	ldr	r2, [pc, #60]	; (4e68 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    4e2a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4e2c:	4b0f      	ldr	r3, [pc, #60]	; (4e6c <z_arm_prep_c+0x44>)
    4e2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4e32:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4e34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e38:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4e3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4e40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    4e48:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    4e4c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    4e50:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    4e54:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4e58:	f005 fbce 	bl	a5f8 <z_bss_zero>
	z_data_copy();
    4e5c:	f006 fbbc 	bl	b5d8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4e60:	f000 fa20 	bl	52a4 <z_arm_interrupt_init>
	z_cstart();
    4e64:	f005 fc1a 	bl	a69c <z_cstart>
    4e68:	00001000 	.word	0x00001000
    4e6c:	e000ed00 	.word	0xe000ed00

00004e70 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4e70:	4a09      	ldr	r2, [pc, #36]	; (4e98 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    4e72:	490a      	ldr	r1, [pc, #40]	; (4e9c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    4e74:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4e76:	6809      	ldr	r1, [r1, #0]
    4e78:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4e7a:	4909      	ldr	r1, [pc, #36]	; (4ea0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    4e7c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4e7e:	684b      	ldr	r3, [r1, #4]
    4e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4e84:	604b      	str	r3, [r1, #4]
    4e86:	2300      	movs	r3, #0
    4e88:	f383 8811 	msr	BASEPRI, r3
    4e8c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4e90:	6893      	ldr	r3, [r2, #8]
}
    4e92:	6f98      	ldr	r0, [r3, #120]	; 0x78
    4e94:	4770      	bx	lr
    4e96:	bf00      	nop
    4e98:	20001aa8 	.word	0x20001aa8
    4e9c:	0000e7c4 	.word	0x0000e7c4
    4ea0:	e000ed00 	.word	0xe000ed00

00004ea4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4ea4:	4912      	ldr	r1, [pc, #72]	; (4ef0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4ea6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4ea8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4eac:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4eae:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4eb2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4eb6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4eb8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4ebc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4ec0:	4f0c      	ldr	r7, [pc, #48]	; (4ef4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4ec2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4ec6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    4ec8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4eca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4ecc:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    4ece:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4ed0:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4ed2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4ed6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4ed8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4eda:	f000 fa29 	bl	5330 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4ede:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4ee2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4ee6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4eea:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4eee:	4770      	bx	lr
    ldr r1, =_kernel
    4ef0:	20001aa8 	.word	0x20001aa8
    ldr v4, =_SCS_ICSR
    4ef4:	e000ed04 	.word	0xe000ed04

00004ef8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4ef8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4efc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4efe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4f02:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4f06:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4f08:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4f0c:	2902      	cmp	r1, #2
    beq _oops
    4f0e:	d0ff      	beq.n	4f10 <_oops>

00004f10 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4f10:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    4f12:	f007 facd 	bl	c4b0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    4f16:	bd01      	pop	{r0, pc}

00004f18 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4f18:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4f1c:	9b00      	ldr	r3, [sp, #0]
    4f1e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    4f22:	490a      	ldr	r1, [pc, #40]	; (4f4c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4f24:	9b01      	ldr	r3, [sp, #4]
    4f26:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4f2a:	9b02      	ldr	r3, [sp, #8]
    4f2c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4f30:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4f38:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4f3c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4f40:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4f42:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4f44:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4f46:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4f48:	4770      	bx	lr
    4f4a:	bf00      	nop
    4f4c:	0000ba31 	.word	0x0000ba31

00004f50 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4f50:	4a09      	ldr	r2, [pc, #36]	; (4f78 <z_check_thread_stack_fail+0x28>)
{
    4f52:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    4f54:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    4f56:	b170      	cbz	r0, 4f76 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4f58:	f113 0f16 	cmn.w	r3, #22
    4f5c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    4f5e:	d005      	beq.n	4f6c <z_check_thread_stack_fail+0x1c>
    4f60:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    4f64:	429a      	cmp	r2, r3
    4f66:	d805      	bhi.n	4f74 <z_check_thread_stack_fail+0x24>
    4f68:	4283      	cmp	r3, r0
    4f6a:	d203      	bcs.n	4f74 <z_check_thread_stack_fail+0x24>
		return 0;
    4f6c:	4281      	cmp	r1, r0
    4f6e:	bf28      	it	cs
    4f70:	2000      	movcs	r0, #0
    4f72:	4770      	bx	lr
    4f74:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    4f76:	4770      	bx	lr
    4f78:	20001aa8 	.word	0x20001aa8

00004f7c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4f7c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4f7e:	4b09      	ldr	r3, [pc, #36]	; (4fa4 <arch_switch_to_main_thread+0x28>)
{
    4f80:	460d      	mov	r5, r1
    4f82:	4614      	mov	r4, r2
	_current = main_thread;
    4f84:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    4f86:	f000 f9d3 	bl	5330 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4f8a:	4620      	mov	r0, r4
    4f8c:	f385 8809 	msr	PSP, r5
    4f90:	2100      	movs	r1, #0
    4f92:	b663      	cpsie	if
    4f94:	f381 8811 	msr	BASEPRI, r1
    4f98:	f3bf 8f6f 	isb	sy
    4f9c:	2200      	movs	r2, #0
    4f9e:	2300      	movs	r3, #0
    4fa0:	f006 fd46 	bl	ba30 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4fa4:	20001aa8 	.word	0x20001aa8

00004fa8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4fa8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4faa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4fac:	4a0b      	ldr	r2, [pc, #44]	; (4fdc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4fae:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    4fb0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4fb2:	bf1e      	ittt	ne
	movne	r1, #0
    4fb4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4fb6:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    4fb8:	f008 fdf7 	blne	dbaa <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4fbc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4fbe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4fc2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4fc6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4fca:	4905      	ldr	r1, [pc, #20]	; (4fe0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4fcc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4fce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4fd0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4fd2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4fd6:	4903      	ldr	r1, [pc, #12]	; (4fe4 <_isr_wrapper+0x3c>)
	bx r1
    4fd8:	4708      	bx	r1
    4fda:	0000      	.short	0x0000
	ldr r2, =_kernel
    4fdc:	20001aa8 	.word	0x20001aa8
	ldr r1, =_sw_isr_table
    4fe0:	0000e278 	.word	0x0000e278
	ldr r1, =z_arm_int_exit
    4fe4:	00004fe9 	.word	0x00004fe9

00004fe8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4fe8:	4b04      	ldr	r3, [pc, #16]	; (4ffc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4fea:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4fec:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    4fee:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4ff0:	d003      	beq.n	4ffa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4ff2:	4903      	ldr	r1, [pc, #12]	; (5000 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4ff8:	600a      	str	r2, [r1, #0]

00004ffa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4ffa:	4770      	bx	lr
	ldr r3, =_kernel
    4ffc:	20001aa8 	.word	0x20001aa8
	ldr r1, =_SCS_ICSR
    5000:	e000ed04 	.word	0xe000ed04

00005004 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    5004:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5006:	4b26      	ldr	r3, [pc, #152]	; (50a0 <mem_manage_fault+0x9c>)
{
    5008:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    500a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    500c:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    5012:	bf14      	ite	ne
    5014:	2411      	movne	r4, #17
    5016:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    5018:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    501c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    501e:	bf18      	it	ne
    5020:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5022:	0792      	lsls	r2, r2, #30
{
    5024:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5026:	d50a      	bpl.n	503e <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    5028:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    502a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    502c:	0614      	lsls	r4, r2, #24
    502e:	d534      	bpl.n	509a <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    5030:	b119      	cbz	r1, 503a <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5038:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    503a:	2413      	movs	r4, #19
    503c:	e001      	b.n	5042 <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
    503e:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5042:	4b17      	ldr	r3, [pc, #92]	; (50a0 <mem_manage_fault+0x9c>)
    5044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    5046:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    504a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    504c:	bf18      	it	ne
    504e:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    5050:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    5056:	bf18      	it	ne
    5058:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    505a:	06d2      	lsls	r2, r2, #27
    505c:	d402      	bmi.n	5064 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5060:	079b      	lsls	r3, r3, #30
    5062:	d50a      	bpl.n	507a <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    5064:	4b0e      	ldr	r3, [pc, #56]	; (50a0 <mem_manage_fault+0x9c>)
    5066:	685b      	ldr	r3, [r3, #4]
    5068:	0519      	lsls	r1, r3, #20
    506a:	d506      	bpl.n	507a <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    506c:	4631      	mov	r1, r6
    506e:	f7ff ff6f 	bl	4f50 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    5072:	b110      	cbz	r0, 507a <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    5074:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    5078:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    507a:	4b09      	ldr	r3, [pc, #36]	; (50a0 <mem_manage_fault+0x9c>)
    507c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    507e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    5080:	bf42      	ittt	mi
    5082:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    5084:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    5088:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    508a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    508c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    5090:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    5092:	2300      	movs	r3, #0
    5094:	702b      	strb	r3, [r5, #0]

	return reason;
}
    5096:	4620      	mov	r0, r4
    5098:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    509a:	f06f 0015 	mvn.w	r0, #21
    509e:	e7cc      	b.n	503a <mem_manage_fault+0x36>
    50a0:	e000ed00 	.word	0xe000ed00

000050a4 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    50a4:	4b13      	ldr	r3, [pc, #76]	; (50f4 <usage_fault.constprop.0+0x50>)
    50a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    50a8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    50ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    50ae:	bf14      	ite	ne
    50b0:	201e      	movne	r0, #30
    50b2:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    50b4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    50b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    50ba:	bf18      	it	ne
    50bc:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    50be:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    50c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    50c4:	bf18      	it	ne
    50c6:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    50c8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    50cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    50ce:	bf18      	it	ne
    50d0:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    50d2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    50d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    50d8:	bf18      	it	ne
    50da:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    50dc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    50e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    50e2:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    50e6:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    50ea:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    50ec:	bf18      	it	ne
    50ee:	2024      	movne	r0, #36	; 0x24
    50f0:	4770      	bx	lr
    50f2:	bf00      	nop
    50f4:	e000ed00 	.word	0xe000ed00

000050f8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    50f8:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    50fa:	4b19      	ldr	r3, [pc, #100]	; (5160 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    50fc:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    50fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5100:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    5102:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    5106:	bf14      	ite	ne
    5108:	2017      	movne	r0, #23
    510a:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    510c:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5110:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    5112:	bf18      	it	ne
    5114:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5116:	05a4      	lsls	r4, r4, #22
    5118:	d509      	bpl.n	512e <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    511a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    511c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    511e:	0400      	lsls	r0, r0, #16
    5120:	d504      	bpl.n	512c <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    5122:	b11a      	cbz	r2, 512c <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    512a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    512c:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    512e:	4b0c      	ldr	r3, [pc, #48]	; (5160 <bus_fault.constprop.0+0x68>)
    5130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    5132:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    5138:	bf18      	it	ne
    513a:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    513c:	05d2      	lsls	r2, r2, #23
    513e:	d40c      	bmi.n	515a <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    5142:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5146:	bf18      	it	ne
    5148:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    514a:	4a05      	ldr	r2, [pc, #20]	; (5160 <bus_fault.constprop.0+0x68>)
    514c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    514e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5152:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5154:	2300      	movs	r3, #0
    5156:	700b      	strb	r3, [r1, #0]
}
    5158:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    515a:	201b      	movs	r0, #27
    515c:	e7f5      	b.n	514a <bus_fault.constprop.0+0x52>
    515e:	bf00      	nop
    5160:	e000ed00 	.word	0xe000ed00

00005164 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5164:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5166:	4b45      	ldr	r3, [pc, #276]	; (527c <z_arm_fault+0x118>)
    5168:	685b      	ldr	r3, [r3, #4]
{
    516a:	b08a      	sub	sp, #40	; 0x28
    516c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    516e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5172:	2600      	movs	r6, #0
    5174:	f386 8811 	msr	BASEPRI, r6
    5178:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    517c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    5180:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    5184:	d111      	bne.n	51aa <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    5186:	f002 000c 	and.w	r0, r2, #12
    518a:	2808      	cmp	r0, #8
    518c:	d00d      	beq.n	51aa <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    518e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    5190:	bf4c      	ite	mi
    5192:	460d      	movmi	r5, r1
			*nested_exc = true;
    5194:	2601      	movpl	r6, #1
	*recoverable = false;
    5196:	2200      	movs	r2, #0
	switch (fault) {
    5198:	3b03      	subs	r3, #3
	*recoverable = false;
    519a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    519e:	2b03      	cmp	r3, #3
    51a0:	d805      	bhi.n	51ae <z_arm_fault+0x4a>
    51a2:	e8df f003 	tbb	[pc, r3]
    51a6:	5d1e      	.short	0x5d1e
    51a8:	5a61      	.short	0x5a61
		return NULL;
    51aa:	4635      	mov	r5, r6
    51ac:	e7f3      	b.n	5196 <z_arm_fault+0x32>
    51ae:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    51b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    51b4:	b99b      	cbnz	r3, 51de <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    51b6:	2220      	movs	r2, #32
    51b8:	4629      	mov	r1, r5
    51ba:	a802      	add	r0, sp, #8
    51bc:	f007 f98e 	bl	c4dc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    51c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    51c2:	2e00      	cmp	r6, #0
    51c4:	d054      	beq.n	5270 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    51c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
    51ca:	b922      	cbnz	r2, 51d6 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    51cc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    51d0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    51d4:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    51d6:	a902      	add	r1, sp, #8
    51d8:	4620      	mov	r0, r4
    51da:	f007 f967 	bl	c4ac <z_arm_fatal_error>
}
    51de:	b00a      	add	sp, #40	; 0x28
    51e0:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    51e2:	4b26      	ldr	r3, [pc, #152]	; (527c <z_arm_fault+0x118>)
    51e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51e6:	0791      	lsls	r1, r2, #30
    51e8:	d4e1      	bmi.n	51ae <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    51ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51ec:	2a00      	cmp	r2, #0
    51ee:	dbde      	blt.n	51ae <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    51f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51f2:	0052      	lsls	r2, r2, #1
    51f4:	d5db      	bpl.n	51ae <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    51f6:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    51f8:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    51fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    51fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    5200:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5204:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    5208:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    520a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    520e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    5212:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    5214:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5218:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    521c:	f64d 7202 	movw	r2, #57090	; 0xdf02
    5220:	4291      	cmp	r1, r2
    5222:	d00a      	beq.n	523a <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    5224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5226:	b2d2      	uxtb	r2, r2
    5228:	b14a      	cbz	r2, 523e <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
    522a:	f10d 0207 	add.w	r2, sp, #7
    522e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    5230:	4628      	mov	r0, r5
    5232:	f7ff fee7 	bl	5004 <mem_manage_fault>
		reason = usage_fault(esf);
    5236:	4604      	mov	r4, r0
		break;
    5238:	e7ba      	b.n	51b0 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    523a:	682c      	ldr	r4, [r5, #0]
    523c:	e7b8      	b.n	51b0 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    523e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5240:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    5244:	d005      	beq.n	5252 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    5246:	f10d 0107 	add.w	r1, sp, #7
    524a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    524c:	f7ff ff54 	bl	50f8 <bus_fault.constprop.0>
    5250:	e7f1      	b.n	5236 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    5252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    5258:	d3a9      	bcc.n	51ae <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    525a:	f7ff ff23 	bl	50a4 <usage_fault.constprop.0>
    525e:	e7ea      	b.n	5236 <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
    5260:	f10d 0207 	add.w	r2, sp, #7
    5264:	2100      	movs	r1, #0
    5266:	e7e3      	b.n	5230 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    5268:	f10d 0107 	add.w	r1, sp, #7
    526c:	2000      	movs	r0, #0
    526e:	e7ed      	b.n	524c <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5270:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    5274:	f023 0301 	bic.w	r3, r3, #1
    5278:	e7ac      	b.n	51d4 <z_arm_fault+0x70>
    527a:	bf00      	nop
    527c:	e000ed00 	.word	0xe000ed00

00005280 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    5280:	4a02      	ldr	r2, [pc, #8]	; (528c <z_arm_fault_init+0xc>)
    5282:	6953      	ldr	r3, [r2, #20]
    5284:	f043 0310 	orr.w	r3, r3, #16
    5288:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    528a:	4770      	bx	lr
    528c:	e000ed00 	.word	0xe000ed00

00005290 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5290:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5294:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    5298:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    529a:	4672      	mov	r2, lr
	bl z_arm_fault
    529c:	f7ff ff62 	bl	5164 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    52a0:	bd01      	pop	{r0, pc}
    52a2:	bf00      	nop

000052a4 <z_arm_interrupt_init>:
    52a4:	4804      	ldr	r0, [pc, #16]	; (52b8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    52a6:	2300      	movs	r3, #0
    52a8:	2120      	movs	r1, #32
    52aa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    52ac:	3301      	adds	r3, #1
    52ae:	2b30      	cmp	r3, #48	; 0x30
    52b0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    52b4:	d1f9      	bne.n	52aa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    52b6:	4770      	bx	lr
    52b8:	e000e100 	.word	0xe000e100

000052bc <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    52bc:	f7fe f9ba 	bl	3634 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    52c0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    52c2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    52c6:	4808      	ldr	r0, [pc, #32]	; (52e8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    52c8:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    52cc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    52ce:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    52d2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    52d6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    52d8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    52da:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    52de:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    52e2:	f7ff fda1 	bl	4e28 <z_arm_prep_c>
    52e6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    52e8:	20003940 	.word	0x20003940

000052ec <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    52ec:	4b08      	ldr	r3, [pc, #32]	; (5310 <z_impl_k_thread_abort+0x24>)
    52ee:	689b      	ldr	r3, [r3, #8]
    52f0:	4283      	cmp	r3, r0
    52f2:	d10b      	bne.n	530c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    52f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    52f8:	b143      	cbz	r3, 530c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    52fa:	4b06      	ldr	r3, [pc, #24]	; (5314 <z_impl_k_thread_abort+0x28>)
    52fc:	685a      	ldr	r2, [r3, #4]
    52fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    5302:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    5304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    530a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    530c:	f006 b8f2 	b.w	b4f4 <z_thread_abort>
    5310:	20001aa8 	.word	0x20001aa8
    5314:	e000ed00 	.word	0xe000ed00

00005318 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5318:	4b02      	ldr	r3, [pc, #8]	; (5324 <z_arm_configure_static_mpu_regions+0xc>)
    531a:	4a03      	ldr	r2, [pc, #12]	; (5328 <z_arm_configure_static_mpu_regions+0x10>)
    531c:	4803      	ldr	r0, [pc, #12]	; (532c <z_arm_configure_static_mpu_regions+0x14>)
    531e:	2101      	movs	r1, #1
    5320:	f000 b870 	b.w	5404 <arm_core_mpu_configure_static_mpu_regions>
    5324:	20040000 	.word	0x20040000
    5328:	20000000 	.word	0x20000000
    532c:	0000e574 	.word	0x0000e574

00005330 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    5330:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    5332:	4b05      	ldr	r3, [pc, #20]	; (5348 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    5334:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    5336:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    5338:	4a04      	ldr	r2, [pc, #16]	; (534c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    533a:	2140      	movs	r1, #64	; 0x40
    533c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    5340:	4618      	mov	r0, r3
    5342:	2101      	movs	r1, #1
    5344:	f000 b868 	b.w	5418 <arm_core_mpu_configure_dynamic_mpu_regions>
    5348:	20000ea4 	.word	0x20000ea4
    534c:	150b0000 	.word	0x150b0000

00005350 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    5350:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    5352:	4e20      	ldr	r6, [pc, #128]	; (53d4 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    5354:	2500      	movs	r5, #0
    5356:	428d      	cmp	r5, r1
    5358:	da39      	bge.n	53ce <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    535a:	6844      	ldr	r4, [r0, #4]
    535c:	b374      	cbz	r4, 53bc <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    535e:	b153      	cbz	r3, 5376 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    5360:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    5364:	ea14 0f0c 	tst.w	r4, ip
    5368:	d12f      	bne.n	53ca <mpu_configure_regions+0x7a>
		&&
    536a:	2c1f      	cmp	r4, #31
    536c:	d92d      	bls.n	53ca <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    536e:	6807      	ldr	r7, [r0, #0]
		&&
    5370:	ea1c 0f07 	tst.w	ip, r7
    5374:	d129      	bne.n	53ca <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    5376:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    5378:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    537a:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    537e:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    5382:	d91e      	bls.n	53c2 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    5384:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    5388:	d81d      	bhi.n	53c6 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    538a:	3c01      	subs	r4, #1
    538c:	fab4 f484 	clz	r4, r4
    5390:	f1c4 041f 	rsb	r4, r4, #31
    5394:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    5396:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    539a:	ea4c 0c04 	orr.w	ip, ip, r4
    539e:	d814      	bhi.n	53ca <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    53a0:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    53a4:	4314      	orrs	r4, r2
    53a6:	f044 0410 	orr.w	r4, r4, #16
    53aa:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    53ae:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    53b2:	f04c 0401 	orr.w	r4, ip, #1
    53b6:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    53ba:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    53bc:	3501      	adds	r5, #1
    53be:	300c      	adds	r0, #12
    53c0:	e7c9      	b.n	5356 <mpu_configure_regions+0x6>
		return REGION_32B;
    53c2:	2408      	movs	r4, #8
    53c4:	e7e7      	b.n	5396 <mpu_configure_regions+0x46>
		return REGION_4G;
    53c6:	243e      	movs	r4, #62	; 0x3e
    53c8:	e7e5      	b.n	5396 <mpu_configure_regions+0x46>
			return -EINVAL;
    53ca:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    53ce:	4610      	mov	r0, r2
    53d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53d2:	bf00      	nop
    53d4:	e000ed00 	.word	0xe000ed00

000053d8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    53d8:	4b04      	ldr	r3, [pc, #16]	; (53ec <arm_core_mpu_enable+0x14>)
    53da:	2205      	movs	r2, #5
    53dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    53e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    53e4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
    53e8:	4770      	bx	lr
    53ea:	bf00      	nop
    53ec:	e000ed00 	.word	0xe000ed00

000053f0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    53f0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
    53f4:	4b02      	ldr	r3, [pc, #8]	; (5400 <arm_core_mpu_disable+0x10>)
    53f6:	2200      	movs	r2, #0
    53f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    53fc:	4770      	bx	lr
    53fe:	bf00      	nop
    5400:	e000ed00 	.word	0xe000ed00

00005404 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    5404:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    5406:	4c03      	ldr	r4, [pc, #12]	; (5414 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5408:	2301      	movs	r3, #1
    540a:	7822      	ldrb	r2, [r4, #0]
    540c:	f7ff ffa0 	bl	5350 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5410:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    5412:	bd10      	pop	{r4, pc}
    5414:	20001b7f 	.word	0x20001b7f

00005418 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    5418:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    541a:	4a09      	ldr	r2, [pc, #36]	; (5440 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    541c:	2300      	movs	r3, #0
    541e:	7812      	ldrb	r2, [r2, #0]
    5420:	f7ff ff96 	bl	5350 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5424:	f110 0f16 	cmn.w	r0, #22
    5428:	d002      	beq.n	5430 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    542a:	4a06      	ldr	r2, [pc, #24]	; (5444 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    542c:	2807      	cmp	r0, #7
    542e:	dd00      	ble.n	5432 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    5430:	bd08      	pop	{r3, pc}
    5432:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    5436:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    543a:	3001      	adds	r0, #1
    543c:	e7f6      	b.n	542c <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    543e:	bf00      	nop
    5440:	20001b7f 	.word	0x20001b7f
    5444:	e000ed00 	.word	0xe000ed00

00005448 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5448:	4914      	ldr	r1, [pc, #80]	; (549c <z_arm_mpu_init+0x54>)
    544a:	6808      	ldr	r0, [r1, #0]
    544c:	2808      	cmp	r0, #8
{
    544e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    5450:	d821      	bhi.n	5496 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5452:	f7ff ffcd 	bl	53f0 <arm_core_mpu_disable>
    5456:	4c12      	ldr	r4, [pc, #72]	; (54a0 <z_arm_mpu_init+0x58>)
    5458:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    545a:	2200      	movs	r2, #0
    545c:	4290      	cmp	r0, r2
    545e:	f101 010c 	add.w	r1, r1, #12
    5462:	d105      	bne.n	5470 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5464:	4b0f      	ldr	r3, [pc, #60]	; (54a4 <z_arm_mpu_init+0x5c>)
    5466:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    5468:	f7ff ffb6 	bl	53d8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    546c:	2000      	movs	r0, #0
}
    546e:	bd10      	pop	{r4, pc}
    5470:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5474:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    5478:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    547c:	4313      	orrs	r3, r2
    547e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5482:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5486:	f851 3c04 	ldr.w	r3, [r1, #-4]
    548a:	f043 0301 	orr.w	r3, r3, #1
    548e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5492:	3201      	adds	r2, #1
    5494:	e7e2      	b.n	545c <z_arm_mpu_init+0x14>
		return -1;
    5496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    549a:	e7e8      	b.n	546e <z_arm_mpu_init+0x26>
    549c:	0000e580 	.word	0x0000e580
    54a0:	e000ed00 	.word	0xe000ed00
    54a4:	20001b7f 	.word	0x20001b7f

000054a8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    54a8:	4b01      	ldr	r3, [pc, #4]	; (54b0 <__stdout_hook_install+0x8>)
    54aa:	6018      	str	r0, [r3, #0]
}
    54ac:	4770      	bx	lr
    54ae:	bf00      	nop
    54b0:	2000011c 	.word	0x2000011c

000054b4 <nordicsemi_nrf52_init>:

static int nordicsemi_nrf52_init(void)
{
#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    54b4:	4a0e      	ldr	r2, [pc, #56]	; (54f0 <nordicsemi_nrf52_init+0x3c>)
    54b6:	2301      	movs	r3, #1
    54b8:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    54bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    54c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    54c4:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    54c8:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
    54cc:	2808      	cmp	r0, #8
    54ce:	d108      	bne.n	54e2 <nordicsemi_nrf52_init+0x2e>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    54d0:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    54d4:	2905      	cmp	r1, #5
    54d6:	d804      	bhi.n	54e2 <nordicsemi_nrf52_init+0x2e>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    54d8:	4806      	ldr	r0, [pc, #24]	; (54f4 <nordicsemi_nrf52_init+0x40>)
    54da:	5c41      	ldrb	r1, [r0, r1]
    54dc:	b109      	cbz	r1, 54e2 <nordicsemi_nrf52_init+0x2e>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    54de:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    54e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    54e6:	2201      	movs	r2, #1
    54e8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRF_POWER_HAS_DCDCEN_VDDH && defined(CONFIG_SOC_DCDC_NRF52X_HV)
	nrf_power_dcdcen_vddh_set(NRF_POWER, true);
#endif

	return 0;
}
    54ec:	2000      	movs	r0, #0
    54ee:	4770      	bx	lr
    54f0:	4001e000 	.word	0x4001e000
    54f4:	0000f60f 	.word	0x0000f60f

000054f8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    54f8:	b120      	cbz	r0, 5504 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    54fa:	4b03      	ldr	r3, [pc, #12]	; (5508 <arch_busy_wait+0x10>)
    54fc:	0180      	lsls	r0, r0, #6
    54fe:	f043 0301 	orr.w	r3, r3, #1
    5502:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    5504:	4770      	bx	lr
    5506:	bf00      	nop
    5508:	0000e520 	.word	0x0000e520

0000550c <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    550c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5510:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    5514:	07db      	lsls	r3, r3, #31
    5516:	d52e      	bpl.n	5576 <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    5518:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    551c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    5520:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    5524:	2b07      	cmp	r3, #7
    5526:	d126      	bne.n	5576 <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    5528:	4a14      	ldr	r2, [pc, #80]	; (557c <board_nrf52840dongle_nrf52840_init+0x70>)
    552a:	2301      	movs	r3, #1
    552c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    5530:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    5534:	2b00      	cmp	r3, #0
    5536:	d0fb      	beq.n	5530 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    5538:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    553c:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
    5540:	f023 0307 	bic.w	r3, r3, #7
    5544:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
    5548:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    554c:	2300      	movs	r3, #0
    554e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    5552:	4a0a      	ldr	r2, [pc, #40]	; (557c <board_nrf52840dongle_nrf52840_init+0x70>)
    5554:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    5558:	2b00      	cmp	r3, #0
    555a:	d0fb      	beq.n	5554 <board_nrf52840dongle_nrf52840_init+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
    555c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5560:	4907      	ldr	r1, [pc, #28]	; (5580 <board_nrf52840dongle_nrf52840_init+0x74>)
    5562:	4b08      	ldr	r3, [pc, #32]	; (5584 <board_nrf52840dongle_nrf52840_init+0x78>)
    5564:	68ca      	ldr	r2, [r1, #12]
    5566:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    556a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    556c:	60cb      	str	r3, [r1, #12]
    556e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5572:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5574:	e7fd      	b.n	5572 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    5576:	2000      	movs	r0, #0
    5578:	4770      	bx	lr
    557a:	bf00      	nop
    557c:	4001e000 	.word	0x4001e000
    5580:	e000ed00 	.word	0xe000ed00
    5584:	05fa0004 	.word	0x05fa0004

00005588 <sd_init_io>:
	}
	return ret;
}

static int sd_init_io(struct sd_card *card)
{
    5588:	b570      	push	{r4, r5, r6, lr}
	struct sdhc_io *bus_io = &card->bus_io;
	int ret;

	/* SD clock should start gated */
	bus_io->clock = 0;
    558a:	2300      	movs	r3, #0
	struct sdhc_io *bus_io = &card->bus_io;
    558c:	1d05      	adds	r5, r0, #4
	bus_io->clock = 0;
    558e:	6043      	str	r3, [r0, #4]
	bus_io->bus_mode = SDHC_BUSMODE_PUSHPULL;
	bus_io->power_mode = SDHC_POWER_ON;
	bus_io->bus_width = SDHC_BUS_WIDTH1BIT;
	/* Cards start with legacy timing and 3.3V signalling at power on */
	bus_io->timing = SDHC_TIMING_LEGACY;
	bus_io->signal_voltage = SD_VOL_3_3_V;
    5590:	2601      	movs	r6, #1
	bus_io->bus_mode = SDHC_BUSMODE_PUSHPULL;
    5592:	f1a3 33fe 	sub.w	r3, r3, #4278124286	; 0xfefefefe
{
    5596:	4604      	mov	r4, r0
	bus_io->signal_voltage = SD_VOL_3_3_V;
    5598:	7346      	strb	r6, [r0, #13]
	bus_io->bus_mode = SDHC_BUSMODE_PUSHPULL;
    559a:	6083      	str	r3, [r0, #8]

	/* Toggle power to card to reset it */
	LOG_DBG("Resetting power to card");
	bus_io->power_mode = SDHC_POWER_OFF;
	ret = sdhc_set_io(card->sdhc, bus_io);
    559c:	4629      	mov	r1, r5
    559e:	6800      	ldr	r0, [r0, #0]
    55a0:	f006 ffce 	bl	c540 <sdhc_set_io>
	if (ret) {
    55a4:	b9b0      	cbnz	r0, 55d4 <sd_init_io+0x4c>
}

/* Delay function for SD subsystem */
static inline void sd_delay(unsigned int millis)
{
	k_msleep(millis);
    55a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    55a8:	f006 ffed 	bl	c586 <k_msleep.isra.0>
		LOG_ERR("Could not disable card power via SDHC");
		return ret;
	}
	sd_delay(card->host_props.power_delay);
	bus_io->power_mode = SDHC_POWER_ON;
    55ac:	2302      	movs	r3, #2
	ret = sdhc_set_io(card->sdhc, bus_io);
    55ae:	6820      	ldr	r0, [r4, #0]
	bus_io->power_mode = SDHC_POWER_ON;
    55b0:	7263      	strb	r3, [r4, #9]
	ret = sdhc_set_io(card->sdhc, bus_io);
    55b2:	4629      	mov	r1, r5
    55b4:	f006 ffc4 	bl	c540 <sdhc_set_io>
	if (ret) {
    55b8:	b960      	cbnz	r0, 55d4 <sd_init_io+0x4c>
		return ret;
	}
	/* After reset or init, card voltage should be 3.3V */
	card->card_voltage = SD_VOL_3_3_V;
	/* Reset card flags */
	card->flags = 0U;
    55ba:	67e0      	str	r0, [r4, #124]	; 0x7c
	card->card_voltage = SD_VOL_3_3_V;
    55bc:	7426      	strb	r6, [r4, #16]
    55be:	6b20      	ldr	r0, [r4, #48]	; 0x30
    55c0:	f006 ffe1 	bl	c586 <k_msleep.isra.0>
	/* Delay so card can power up */
	sd_delay(card->host_props.power_delay);
	/* Start bus clock */
	bus_io->clock = SDMMC_CLOCK_400KHZ;
    55c4:	4b04      	ldr	r3, [pc, #16]	; (55d8 <sd_init_io+0x50>)
    55c6:	6063      	str	r3, [r4, #4]
	ret = sdhc_set_io(card->sdhc, bus_io);
    55c8:	6820      	ldr	r0, [r4, #0]
    55ca:	4629      	mov	r1, r5
	if (ret) {
		LOG_ERR("Could not start bus clock");
		return ret;
	}
	return 0;
}
    55cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = sdhc_set_io(card->sdhc, bus_io);
    55d0:	f006 bfb6 	b.w	c540 <sdhc_set_io>
}
    55d4:	bd70      	pop	{r4, r5, r6, pc}
    55d6:	bf00      	nop
    55d8:	00061a80 	.word	0x00061a80

000055dc <sdmmc_wait_ready>:
	return -EBUSY;
}

/* Waits for SD card to be ready for data. Returns 0 if card is ready */
int sdmmc_wait_ready(struct sd_card *card)
{
    55dc:	b570      	push	{r4, r5, r6, lr}
	int ret, timeout = CONFIG_SD_DATA_TIMEOUT * 1000;
    55de:	4d0d      	ldr	r5, [pc, #52]	; (5614 <sdmmc_wait_ready+0x38>)
{
    55e0:	4604      	mov	r4, r0
	bool busy = true;

	do {
		busy = sdhc_card_busy(card->sdhc);
    55e2:	6820      	ldr	r0, [r4, #0]
    55e4:	f007 f88f 	bl	c706 <sdhc_card_busy>
		if (!busy) {
    55e8:	b138      	cbz	r0, 55fa <sdmmc_wait_ready+0x1e>
	z_impl_k_busy_wait(usec_to_wait);
    55ea:	207d      	movs	r0, #125	; 0x7d
			ret = sd_retry(sdmmc_read_status, card, CONFIG_SD_RETRY_COUNT);
			busy = (ret != 0);
		} else {
			/* Delay 125us before polling again */
			k_busy_wait(125);
			timeout -= 125;
    55ec:	3d7d      	subs	r5, #125	; 0x7d
    55ee:	f008 fcf9 	bl	dfe4 <z_impl_k_busy_wait>
		}
	} while (busy && (timeout > 0));
    55f2:	2d00      	cmp	r5, #0
    55f4:	dcf5      	bgt.n	55e2 <sdmmc_wait_ready+0x6>
    55f6:	2001      	movs	r0, #1
    55f8:	e00b      	b.n	5612 <sdmmc_wait_ready+0x36>
    55fa:	260c      	movs	r6, #12
 */
static inline int sd_retry(int(*cmd)(struct sd_card *card),
	struct sd_card *card,
	int retries)
{
	int ret = -ETIMEDOUT;
    55fc:	f06f 0073 	mvn.w	r0, #115	; 0x73

	while (retries-- >= 0) {
    5600:	3e01      	subs	r6, #1
    5602:	d004      	beq.n	560e <sdmmc_wait_ready+0x32>
		/* Try cmd */
		ret = cmd(card);
    5604:	4620      	mov	r0, r4
    5606:	f007 f8b3 	bl	c770 <sdmmc_read_status>
		 * Functions have 3 possible responses:
		 * 0: success
		 * SD_RETRY: retry command
		 * other: does not retry
		 */
		if (ret != SD_RETRY) {
    560a:	2801      	cmp	r0, #1
    560c:	d0f8      	beq.n	5600 <sdmmc_wait_ready+0x24>
			break;
		}
	}
	return ret == SD_RETRY ? -ETIMEDOUT : ret;
    560e:	2800      	cmp	r0, #0
    5610:	d1e7      	bne.n	55e2 <sdmmc_wait_ready+0x6>
	return busy;
}
    5612:	bd70      	pop	{r4, r5, r6, pc}
    5614:	00989680 	.word	0x00989680

00005618 <card_app_command>:
	return 0;
}

/* Helper to send SD app command */
int card_app_command(struct sd_card *card, int relative_card_address)
{
    5618:	b530      	push	{r4, r5, lr}
    561a:	b08b      	sub	sp, #44	; 0x2c
    561c:	4605      	mov	r5, r0
    561e:	460c      	mov	r4, r1
	struct sdhc_command cmd = {0};
    5620:	2218      	movs	r2, #24
    5622:	2100      	movs	r1, #0
    5624:	a803      	add	r0, sp, #12
    5626:	f006 ff64 	bl	c4f2 <memset>
	int ret;

	cmd.opcode = SD_APP_CMD;
    562a:	2337      	movs	r3, #55	; 0x37
    562c:	9301      	str	r3, [sp, #4]
	cmd.arg = relative_card_address << 16U;
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
    562e:	2311      	movs	r3, #17
	cmd.arg = relative_card_address << 16U;
    5630:	0424      	lsls	r4, r4, #16
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
    5632:	9307      	str	r3, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    5634:	6828      	ldr	r0, [r5, #0]
	cmd.arg = relative_card_address << 16U;
    5636:	9402      	str	r4, [sp, #8]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    5638:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    563a:	2200      	movs	r2, #0
    563c:	a901      	add	r1, sp, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    563e:	9309      	str	r3, [sp, #36]	; 0x24
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    5640:	f007 f85a 	bl	c6f8 <sdhc_request>
	if (ret) {
    5644:	b988      	cbnz	r0, 566a <card_app_command+0x52>
	if (cmd->response_type == SD_RSP_TYPE_R1) {
    5646:	9b07      	ldr	r3, [sp, #28]
    5648:	2b01      	cmp	r3, #1
    564a:	d103      	bne.n	5654 <card_app_command+0x3c>
		/* We want to retry transmission */
		return SD_RETRY;
	}
	ret = sd_check_response(&cmd);
	if (ret) {
    564c:	4b09      	ldr	r3, [pc, #36]	; (5674 <card_app_command+0x5c>)
    564e:	9a03      	ldr	r2, [sp, #12]
    5650:	4013      	ands	r3, r2
    5652:	b963      	cbnz	r3, 566e <card_app_command+0x56>
		LOG_WRN("SD app command failed with R1 response of 0x%X", cmd.response[0]);
		return -EIO;
	}
	/* Check application command flag to determine if card is ready for APP CMD */
	if ((!card->host_props.is_spi) && !(cmd.response[0U] & SD_R1_APP_CMD)) {
    5654:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
    5658:	b92b      	cbnz	r3, 5666 <card_app_command+0x4e>
		/* Command succeeded, but card not ready for app command. No APP CMD support */
		return -ENOTSUP;
    565a:	9b03      	ldr	r3, [sp, #12]
    565c:	f013 0f20 	tst.w	r3, #32
    5660:	bf08      	it	eq
    5662:	f06f 0085 	mvneq.w	r0, #133	; 0x85
	}
	return 0;
}
    5666:	b00b      	add	sp, #44	; 0x2c
    5668:	bd30      	pop	{r4, r5, pc}
		return SD_RETRY;
    566a:	2001      	movs	r0, #1
    566c:	e7fb      	b.n	5666 <card_app_command+0x4e>
		return -EIO;
    566e:	f06f 0004 	mvn.w	r0, #4
    5672:	e7f8      	b.n	5666 <card_app_command+0x4e>
    5674:	fdf98008 	.word	0xfdf98008

00005678 <sdmmc_card_init>:
/*
 * Initializes SDMMC card. Note that the common SD function has already
 * sent CMD0 and CMD8 to the card at function entry.
 */
int sdmmc_card_init(struct sd_card *card)
{
    5678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int ret;
	uint32_t ocr_arg = 0U;

	/* First send a probing OCR */
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
    567c:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
{
    5680:	b091      	sub	sp, #68	; 0x44
    5682:	4605      	mov	r5, r0
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
    5684:	2b00      	cmp	r3, #0
    5686:	f000 816b 	beq.w	5960 <sdmmc_card_init+0x2e8>
		/* Probe SPI card with CMD58*/
		ret = sdmmc_spi_send_ocr(card, ocr_arg);
    568a:	2100      	movs	r1, #0
    568c:	f007 f95d 	bl	c94a <sdmmc_spi_send_ocr>
		/* Probe Native card with ACMD41 */
		ret = sdmmc_send_ocr(card, ocr_arg);
	} else {
		return -ENOTSUP;
	}
	if (ret) {
    5690:	4604      	mov	r4, r0
    5692:	2800      	cmp	r0, #0
    5694:	f040 80ec 	bne.w	5870 <sdmmc_card_init+0x1f8>
		return ret;
	}
	/* Card responded to ACMD41, type is SDMMC */
	card->type = CARD_SDMMC;

	if (card->flags & SD_SDHC_FLAG) {
    5698:	6fee      	ldr	r6, [r5, #124]	; 0x7c
	card->type = CARD_SDMMC;
    569a:	f885 0079 	strb.w	r0, [r5, #121]	; 0x79
	if (card->flags & SD_SDHC_FLAG) {
    569e:	f3c6 06c0 	ubfx	r6, r6, #3, #1
    56a2:	07b6      	lsls	r6, r6, #30
    56a4:	2064      	movs	r0, #100	; 0x64
    56a6:	f008 fc9d 	bl	dfe4 <z_impl_k_busy_wait>
	cmd.opcode = SD_APP_SEND_OP_COND;
    56aa:	2329      	movs	r3, #41	; 0x29
	cmd.arg = ocr;
    56ac:	e9cd 3607 	strd	r3, r6, [sp, #28]
	cmd.response_type = (SD_RSP_TYPE_R3 | SD_SPI_RSP_TYPE_R1);
    56b0:	2314      	movs	r3, #20
    56b2:	930d      	str	r3, [sp, #52]	; 0x34
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    56b4:	23c8      	movs	r3, #200	; 0xc8
    56b6:	930f      	str	r3, [sp, #60]	; 0x3c
	return card_app_command(card, relative_card_address);
    56b8:	2100      	movs	r1, #0
    56ba:	4628      	mov	r0, r5
    56bc:	f7ff ffac 	bl	5618 <card_app_command>
		if (ret == SD_RETRY) {
    56c0:	2801      	cmp	r0, #1
	return card_app_command(card, relative_card_address);
    56c2:	4602      	mov	r2, r0
		if (ret == SD_RETRY) {
    56c4:	f000 8091 	beq.w	57ea <sdmmc_card_init+0x172>
		} else if (ret) {
    56c8:	2800      	cmp	r0, #0
    56ca:	f040 814e 	bne.w	596a <sdmmc_card_init+0x2f2>
		ret = sdhc_request(card->sdhc, &cmd, NULL);
    56ce:	6828      	ldr	r0, [r5, #0]
    56d0:	a907      	add	r1, sp, #28
    56d2:	f007 f92c 	bl	c92e <sdhc_request>
		if (ret) {
    56d6:	4602      	mov	r2, r0
    56d8:	2800      	cmp	r0, #0
    56da:	f040 8146 	bne.w	596a <sdmmc_card_init+0x2f2>
		if (ocr == 0) {
    56de:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
    56e2:	2e00      	cmp	r6, #0
    56e4:	f000 8143 	beq.w	596e <sdmmc_card_init+0x2f6>
			if (!(cmd.response[0] & SD_SPI_R1IDLE_STATE)) {
    56e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
		if (card->host_props.is_spi) {
    56ea:	2a00      	cmp	r2, #0
    56ec:	d075      	beq.n	57da <sdmmc_card_init+0x162>
			if (!(cmd.response[0] & SD_SPI_R1IDLE_STATE)) {
    56ee:	07d8      	lsls	r0, r3, #31
    56f0:	d476      	bmi.n	57e0 <sdmmc_card_init+0x168>
		LOG_ERR("Failed to query card OCR");
		return ret;
	}
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
		/* Send second CMD58 to get CCS bit */
		ret = sdmmc_spi_send_ocr(card, ocr_arg);
    56f2:	4631      	mov	r1, r6
    56f4:	4628      	mov	r0, r5
    56f6:	f007 f928 	bl	c94a <sdmmc_spi_send_ocr>
		if (ret) {
    56fa:	4604      	mov	r4, r0
    56fc:	2800      	cmp	r0, #0
    56fe:	f040 80b7 	bne.w	5870 <sdmmc_card_init+0x1f8>
			return ret;
		}
	}
	/* Check SD high capacity and 1.8V support flags */
	if (card->ocr & SD_OCR_CARD_CAP_FLAG) {
    5702:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    5704:	0059      	lsls	r1, r3, #1
		card->flags |= SD_HIGH_CAPACITY_FLAG;
    5706:	bf42      	ittt	mi
    5708:	6fea      	ldrmi	r2, [r5, #124]	; 0x7c
    570a:	f042 0202 	orrmi.w	r2, r2, #2
    570e:	67ea      	strmi	r2, [r5, #124]	; 0x7c
	}
	if (card->ocr & SD_OCR_SWITCH_18_ACCEPT_FLAG) {
    5710:	01da      	lsls	r2, r3, #7
		LOG_DBG("Card supports 1.8V signaling");
		card->flags |= SD_1800MV_FLAG;
    5712:	bf42      	ittt	mi
    5714:	6fea      	ldrmi	r2, [r5, #124]	; 0x7c
    5716:	f042 0220 	orrmi.w	r2, r2, #32
    571a:	67ea      	strmi	r2, [r5, #124]	; 0x7c
	}
	/* Check OCR voltage window */
	if (card->ocr & SD_OCR_VDD29_30FLAG) {
    571c:	039b      	lsls	r3, r3, #14
		card->flags |= SD_3000MV_FLAG;
    571e:	bf42      	ittt	mi
    5720:	6feb      	ldrmi	r3, [r5, #124]	; 0x7c
    5722:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
    5726:	67eb      	strmi	r3, [r5, #124]	; 0x7c
			card->status = CARD_ERROR;
			return SD_RESTART;
		}
	}
	/* Read the card's CID (card identification register) */
	ret = card_read_cid(card);
    5728:	4628      	mov	r0, r5
    572a:	f007 f897 	bl	c85c <card_read_cid>
	if (ret) {
    572e:	4604      	mov	r4, r0
    5730:	2800      	cmp	r0, #0
    5732:	f040 809d 	bne.w	5870 <sdmmc_card_init+0x1f8>
		if (ret) {
			return ret;
		}
	}
	/* Card has entered data transfer mode. Get card specific data register */
	ret = sdmmc_read_csd(card);
    5736:	4628      	mov	r0, r5
    5738:	f007 f859 	bl	c7ee <sdmmc_read_csd>
	if (ret) {
    573c:	4604      	mov	r4, r0
    573e:	2800      	cmp	r0, #0
    5740:	f040 8096 	bne.w	5870 <sdmmc_card_init+0x1f8>
	}
	/*
	 * With card in data transfer state, we can set SD clock to maximum
	 * frequency for non high speed mode (25Mhz)
	 */
	if (card->host_props.f_max < SD_CLOCK_25MHZ) {
    5744:	462e      	mov	r6, r5
    5746:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5748:	4b8b      	ldr	r3, [pc, #556]	; (5978 <sdmmc_card_init+0x300>)
    574a:	429a      	cmp	r2, r3
    574c:	bf94      	ite	ls
    574e:	f846 2f04 	strls.w	r2, [r6, #4]!
    5752:	f846 3f04 	strhi.w	r3, [r6, #4]!
			card->host_props.f_max);
		card->bus_io.clock = card->host_props.f_max;
	} else {
		card->bus_io.clock = SD_CLOCK_25MHZ;
	}
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
    5756:	6828      	ldr	r0, [r5, #0]
    5758:	4631      	mov	r1, r6
    575a:	f007 f8ef 	bl	c93c <sdhc_set_io>
	if (ret) {
    575e:	4604      	mov	r4, r0
    5760:	2800      	cmp	r0, #0
    5762:	f040 8085 	bne.w	5870 <sdmmc_card_init+0x1f8>
	struct sdhc_command cmd = {0};
    5766:	4601      	mov	r1, r0
    5768:	2224      	movs	r2, #36	; 0x24
    576a:	a807      	add	r0, sp, #28
    576c:	f006 fec1 	bl	c4f2 <memset>
	struct sdhc_data data = {0};
    5770:	4621      	mov	r1, r4
    5772:	2218      	movs	r2, #24
    5774:	a801      	add	r0, sp, #4
    5776:	f006 febc 	bl	c4f2 <memset>
	return card_app_command(card, relative_card_address);
    577a:	6e69      	ldr	r1, [r5, #100]	; 0x64
    577c:	4628      	mov	r0, r5
    577e:	f7ff ff4b 	bl	5618 <card_app_command>
	if (ret) {
    5782:	4604      	mov	r4, r0
    5784:	2800      	cmp	r0, #0
    5786:	d173      	bne.n	5870 <sdmmc_card_init+0x1f8>
	cmd.opcode = SD_APP_SEND_SCR;
    5788:	2333      	movs	r3, #51	; 0x33
	cmd.arg = 0;
    578a:	e9cd 3007 	strd	r3, r0, [sp, #28]
	cmd.response_type =  (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
    578e:	2311      	movs	r3, #17
    5790:	930d      	str	r3, [sp, #52]	; 0x34
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    5792:	23c8      	movs	r3, #200	; 0xc8
    5794:	930f      	str	r3, [sp, #60]	; 0x3c
	data.blocks = 1U;
    5796:	f04f 0808 	mov.w	r8, #8
    579a:	2301      	movs	r3, #1
    579c:	e9cd 8302 	strd	r8, r3, [sp, #8]
	ret = sdhc_request(card->sdhc, &cmd, &data);
    57a0:	6828      	ldr	r0, [r5, #0]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
    57a2:	f242 7310 	movw	r3, #10000	; 0x2710
	uint32_t *scr = (uint32_t *)card->card_buffer;
    57a6:	f105 0780 	add.w	r7, r5, #128	; 0x80
	ret = sdhc_request(card->sdhc, &cmd, &data);
    57aa:	aa01      	add	r2, sp, #4
    57ac:	a907      	add	r1, sp, #28
	data.data = scr;
    57ae:	9705      	str	r7, [sp, #20]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
    57b0:	9306      	str	r3, [sp, #24]
	ret = sdhc_request(card->sdhc, &cmd, &data);
    57b2:	f007 f8bc 	bl	c92e <sdhc_request>
	if (ret) {
    57b6:	4604      	mov	r4, r0
    57b8:	2800      	cmp	r0, #0
    57ba:	d159      	bne.n	5870 <sdmmc_card_init+0x1f8>
	raw_scr[0] = sys_be32_to_cpu(scr[0]);
    57bc:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
    57c0:	ba01      	rev	r1, r0
	if ((uint8_t)((raw_scr[0U] & 0x8000U) >> 15U)) {
    57c2:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	scr->sd_spec = (uint8_t)((raw_scr[0U] & 0xF000000U) >> 24U);
    57c6:	f000 020f 	and.w	r2, r0, #15
	if ((uint8_t)((raw_scr[0U] & 0x8000U) >> 15U)) {
    57ca:	b2c9      	uxtb	r1, r1
    57cc:	d115      	bne.n	57fa <sdmmc_card_init+0x182>
	switch (scr->sd_spec) {
    57ce:	2a01      	cmp	r2, #1
    57d0:	d052      	beq.n	5878 <sdmmc_card_init+0x200>
    57d2:	2a02      	cmp	r2, #2
    57d4:	d115      	bne.n	5802 <sdmmc_card_init+0x18a>
		tmp_version = SD_SPEC_VER2_0;
    57d6:	2304      	movs	r3, #4
    57d8:	e015      	b.n	5806 <sdmmc_card_init+0x18e>
			if ((cmd.response[0U] & SD_OCR_PWR_BUSY_FLAG)) {
    57da:	2b00      	cmp	r3, #0
    57dc:	f2c0 80c3 	blt.w	5966 <sdmmc_card_init+0x2ee>
	return z_impl_k_sleep(timeout);
    57e0:	f44f 70a4 	mov.w	r0, #328	; 0x148
    57e4:	2100      	movs	r1, #0
    57e6:	f005 fe4b 	bl	b480 <z_impl_k_sleep>
	for (retries = 0; retries < CONFIG_SD_OCR_RETRY_COUNT; retries++) {
    57ea:	3401      	adds	r4, #1
    57ec:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
    57f0:	f47f af62 	bne.w	56b8 <sdmmc_card_init+0x40>
		return -ETIMEDOUT;
    57f4:	f06f 0473 	mvn.w	r4, #115	; 0x73
    57f8:	e03a      	b.n	5870 <sdmmc_card_init+0x1f8>
	switch (scr->sd_spec) {
    57fa:	2a01      	cmp	r2, #1
    57fc:	d03c      	beq.n	5878 <sdmmc_card_init+0x200>
    57fe:	2a02      	cmp	r2, #2
    5800:	d03c      	beq.n	587c <sdmmc_card_init+0x204>
    5802:	b90a      	cbnz	r2, 5808 <sdmmc_card_init+0x190>
    5804:	2301      	movs	r3, #1
		*version = tmp_version;
    5806:	672b      	str	r3, [r5, #112]	; 0x70
	if (card_scr.sd_width & 0x4U) {
    5808:	0544      	lsls	r4, r0, #21
		card->flags |= SD_4BITS_WIDTH;
    580a:	bf42      	ittt	mi
    580c:	6feb      	ldrmi	r3, [r5, #124]	; 0x7c
    580e:	f043 0304 	orrmi.w	r3, r3, #4
    5812:	67eb      	strmi	r3, [r5, #124]	; 0x7c
	if (card_scr.cmd_support & 0x1U) {
    5814:	07c8      	lsls	r0, r1, #31
		card->flags |= SD_SPEED_CLASS_CONTROL_FLAG;
    5816:	bf42      	ittt	mi
    5818:	6feb      	ldrmi	r3, [r5, #124]	; 0x7c
    581a:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
    581e:	67eb      	strmi	r3, [r5, #124]	; 0x7c
	if (card_scr.cmd_support & 0x2U) {
    5820:	0789      	lsls	r1, r1, #30
		card->flags |= SD_CMD23_FLAG;
    5822:	bf42      	ittt	mi
    5824:	6feb      	ldrmi	r3, [r5, #124]	; 0x7c
    5826:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    582a:	67eb      	strmi	r3, [r5, #124]	; 0x7c
		ret = sdmmc_init_uhs(card);
		if (ret) {
			LOG_ERR("UHS card init failed");
		}
	} else {
		if ((card->flags & SD_HIGH_CAPACITY_FLAG) == 0) {
    582c:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
    582e:	f011 0402 	ands.w	r4, r1, #2
    5832:	d118      	bne.n	5866 <sdmmc_card_init+0x1ee>
	struct sdhc_command cmd = {0};
    5834:	4621      	mov	r1, r4
    5836:	2218      	movs	r2, #24
    5838:	a809      	add	r0, sp, #36	; 0x24
    583a:	f8d5 9000 	ldr.w	r9, [r5]
	cmd.arg = block_len;
    583e:	f44f 7800 	mov.w	r8, #512	; 0x200
	struct sdhc_command cmd = {0};
    5842:	f006 fe56 	bl	c4f2 <memset>
	cmd.arg = block_len;
    5846:	2310      	movs	r3, #16
    5848:	e9cd 3807 	strd	r3, r8, [sp, #28]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    584c:	23c8      	movs	r3, #200	; 0xc8
    584e:	930f      	str	r3, [sp, #60]	; 0x3c
	return sdhc_request(card->sdhc, &cmd, NULL);
    5850:	4622      	mov	r2, r4
	cmd.response_type =  (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
    5852:	2311      	movs	r3, #17
	return sdhc_request(card->sdhc, &cmd, NULL);
    5854:	a907      	add	r1, sp, #28
    5856:	4648      	mov	r0, r9
	cmd.response_type =  (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
    5858:	930d      	str	r3, [sp, #52]	; 0x34
	return sdhc_request(card->sdhc, &cmd, NULL);
    585a:	f007 f868 	bl	c92e <sdhc_request>
			/* Standard capacity SDSC card. set block length to 512 */
			ret = sdmmc_set_blocklen(card, SDMMC_DEFAULT_BLOCK_SIZE);
			if (ret) {
    585e:	4604      	mov	r4, r0
    5860:	b930      	cbnz	r0, 5870 <sdmmc_card_init+0x1f8>
				LOG_ERR("Could not set SD blocklen to 512");
				return ret;
			}
			card->block_size = 512;
    5862:	f8c5 806c 	str.w	r8, [r5, #108]	; 0x6c
	if ((!card->host_props.host_caps.high_spd_support) ||
    5866:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    586a:	069b      	lsls	r3, r3, #26
    586c:	d408      	bmi.n	5880 <sdmmc_card_init+0x208>
		return 0;
    586e:	2400      	movs	r4, #0
		if (ret) {
			LOG_ERR("HS card init failed");
		}
	}
	return ret;
}
    5870:	4620      	mov	r0, r4
    5872:	b011      	add	sp, #68	; 0x44
    5874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tmp_version = SD_SPEC_VER1_1;
    5878:	2302      	movs	r3, #2
    587a:	e7c4      	b.n	5806 <sdmmc_card_init+0x18e>
			tmp_version = SD_SPEC_VER3_0;
    587c:	4643      	mov	r3, r8
    587e:	e7c2      	b.n	5806 <sdmmc_card_init+0x18e>
	if ((!card->host_props.host_caps.high_spd_support) ||
    5880:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    5882:	2b01      	cmp	r3, #1
    5884:	d9f3      	bls.n	586e <sdmmc_card_init+0x1f6>
		(card->sd_version < SD_SPEC_VER1_1) ||
    5886:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    5888:	2b00      	cmp	r3, #0
    588a:	d0f0      	beq.n	586e <sdmmc_card_init+0x1f6>
		card->switch_caps.uhs_max_dtr = SD_CLOCK_50MHZ;
    588c:	4b3b      	ldr	r3, [pc, #236]	; (597c <sdmmc_card_init+0x304>)
    588e:	65ab      	str	r3, [r5, #88]	; 0x58
	card->card_speed = SD_TIMING_SDR25;
    5890:	2401      	movs	r4, #1
    5892:	676c      	str	r4, [r5, #116]	; 0x74
	struct sdhc_command cmd = {0};
    5894:	2218      	movs	r2, #24
    5896:	2100      	movs	r1, #0
    5898:	a809      	add	r0, sp, #36	; 0x24
    589a:	f8d5 8000 	ldr.w	r8, [r5]
    589e:	f006 fe28 	bl	c4f2 <memset>
	struct sdhc_data data = {0};
    58a2:	2210      	movs	r2, #16
    58a4:	2100      	movs	r1, #0
    58a6:	a801      	add	r0, sp, #4
    58a8:	f006 fe23 	bl	c4f2 <memset>
	cmd.arg |= (value & 0xF) << (group * 4);
    58ac:	4b34      	ldr	r3, [pc, #208]	; (5980 <sdmmc_card_init+0x308>)
	data.data = response;
    58ae:	9705      	str	r7, [sp, #20]
	cmd.arg |= (value & 0xF) << (group * 4);
    58b0:	f04f 0c06 	mov.w	ip, #6
    58b4:	e9cd c307 	strd	ip, r3, [sp, #28]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
    58b8:	2311      	movs	r3, #17
    58ba:	930d      	str	r3, [sp, #52]	; 0x34
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    58bc:	23c8      	movs	r3, #200	; 0xc8
    58be:	930f      	str	r3, [sp, #60]	; 0x3c
	data.block_size = 64U;
    58c0:	2340      	movs	r3, #64	; 0x40
	data.blocks = 1;
    58c2:	e9cd 3402 	strd	r3, r4, [sp, #8]
	return sdhc_request(card->sdhc, &cmd, &data);
    58c6:	aa01      	add	r2, sp, #4
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
    58c8:	f242 7310 	movw	r3, #10000	; 0x2710
	return sdhc_request(card->sdhc, &cmd, &data);
    58cc:	a907      	add	r1, sp, #28
    58ce:	4640      	mov	r0, r8
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
    58d0:	9306      	str	r3, [sp, #24]
	return sdhc_request(card->sdhc, &cmd, &data);
    58d2:	f007 f82c 	bl	c92e <sdhc_request>
	if (ret) {
    58d6:	4604      	mov	r4, r0
    58d8:	2800      	cmp	r0, #0
    58da:	d1c9      	bne.n	5870 <sdmmc_card_init+0x1f8>
	if ((status[16] & 0xF) != card->card_speed) {
    58dc:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
    58e0:	6f6a      	ldr	r2, [r5, #116]	; 0x74
    58e2:	f003 030f 	and.w	r3, r3, #15
    58e6:	4293      	cmp	r3, r2
    58e8:	d02e      	beq.n	5948 <sdmmc_card_init+0x2d0>
	if (card->flags & SD_4BITS_WIDTH) {
    58ea:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    58ec:	075c      	lsls	r4, r3, #29
    58ee:	d5be      	bpl.n	586e <sdmmc_card_init+0x1f6>
	struct sdhc_command cmd = {0};
    58f0:	2224      	movs	r2, #36	; 0x24
    58f2:	2100      	movs	r1, #0
    58f4:	a807      	add	r0, sp, #28
    58f6:	f006 fdfc 	bl	c4f2 <memset>
	return card_app_command(card, relative_card_address);
    58fa:	6e69      	ldr	r1, [r5, #100]	; 0x64
    58fc:	4628      	mov	r0, r5
    58fe:	f7ff fe8b 	bl	5618 <card_app_command>
	if (ret) {
    5902:	4604      	mov	r4, r0
    5904:	2800      	cmp	r0, #0
    5906:	d1b3      	bne.n	5870 <sdmmc_card_init+0x1f8>
	cmd.opcode = SD_APP_SET_BUS_WIDTH;
    5908:	2306      	movs	r3, #6
    590a:	9307      	str	r3, [sp, #28]
	cmd.response_type = SD_RSP_TYPE_R1;
    590c:	2301      	movs	r3, #1
    590e:	930d      	str	r3, [sp, #52]	; 0x34
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    5910:	23c8      	movs	r3, #200	; 0xc8
    5912:	930f      	str	r3, [sp, #60]	; 0x3c
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    5914:	4602      	mov	r2, r0
		cmd.arg = 2U;
    5916:	2302      	movs	r3, #2
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    5918:	6828      	ldr	r0, [r5, #0]
		cmd.arg = 2U;
    591a:	9308      	str	r3, [sp, #32]
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    591c:	a907      	add	r1, sp, #28
    591e:	f007 f806 	bl	c92e <sdhc_request>
	if (ret) {
    5922:	4604      	mov	r4, r0
    5924:	2800      	cmp	r0, #0
    5926:	d1a3      	bne.n	5870 <sdmmc_card_init+0x1f8>
    5928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    592a:	2b01      	cmp	r3, #1
    592c:	d104      	bne.n	5938 <sdmmc_card_init+0x2c0>
		return (cmd->response[0U] & SD_R1_ERR_FLAGS);
    592e:	4c15      	ldr	r4, [pc, #84]	; (5984 <sdmmc_card_init+0x30c>)
    5930:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5932:	401c      	ands	r4, r3
	if (ret) {
    5934:	2c00      	cmp	r4, #0
    5936:	d19b      	bne.n	5870 <sdmmc_card_init+0x1f8>
	card->bus_io.bus_width = width;
    5938:	2304      	movs	r3, #4
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
    593a:	6828      	ldr	r0, [r5, #0]
	card->bus_io.bus_width = width;
    593c:	72ab      	strb	r3, [r5, #10]
	ret = sdhc_set_io(card->sdhc, &card->bus_io);
    593e:	4631      	mov	r1, r6
    5940:	f006 fffc 	bl	c93c <sdhc_set_io>
    5944:	4604      	mov	r4, r0
		if (ret) {
    5946:	e793      	b.n	5870 <sdmmc_card_init+0x1f8>
		card->bus_io.timing = timing;
    5948:	2304      	movs	r3, #4
    594a:	72eb      	strb	r3, [r5, #11]
		card->bus_io.clock = card->switch_caps.uhs_max_dtr;
    594c:	6dab      	ldr	r3, [r5, #88]	; 0x58
		ret = sdhc_set_io(card->sdhc, &card->bus_io);
    594e:	6828      	ldr	r0, [r5, #0]
		card->bus_io.clock = card->switch_caps.uhs_max_dtr;
    5950:	606b      	str	r3, [r5, #4]
		ret = sdhc_set_io(card->sdhc, &card->bus_io);
    5952:	4631      	mov	r1, r6
    5954:	f006 fff2 	bl	c93c <sdhc_set_io>
		if (ret) {
    5958:	4604      	mov	r4, r0
    595a:	2800      	cmp	r0, #0
    595c:	d0c5      	beq.n	58ea <sdmmc_card_init+0x272>
    595e:	e787      	b.n	5870 <sdmmc_card_init+0x1f8>
		return -ENOTSUP;
    5960:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5964:	e784      	b.n	5870 <sdmmc_card_init+0x1f8>
		card->ocr = cmd.response[0U];
    5966:	652b      	str	r3, [r5, #80]	; 0x50
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
    5968:	e6cb      	b.n	5702 <sdmmc_card_init+0x8a>
	if (ret) {
    596a:	4614      	mov	r4, r2
    596c:	e780      	b.n	5870 <sdmmc_card_init+0x1f8>
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
    596e:	2a00      	cmp	r2, #0
    5970:	f43f aec7 	beq.w	5702 <sdmmc_card_init+0x8a>
    5974:	e6bd      	b.n	56f2 <sdmmc_card_init+0x7a>
    5976:	bf00      	nop
    5978:	017d7840 	.word	0x017d7840
    597c:	02faf080 	.word	0x02faf080
    5980:	80fffff1 	.word	0x80fffff1
    5984:	fdf98008 	.word	0xfdf98008

00005988 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    5988:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    598a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    598e:	d512      	bpl.n	59b6 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    5990:	2b08      	cmp	r3, #8
    5992:	d105      	bne.n	59a0 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5994:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    5996:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    599a:	d506      	bpl.n	59aa <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    599c:	480e      	ldr	r0, [pc, #56]	; (59d8 <endpoint_ctx+0x50>)
    599e:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    59a0:	f010 0f78 	tst.w	r0, #120	; 0x78
    59a4:	d112      	bne.n	59cc <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    59a6:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    59aa:	204c      	movs	r0, #76	; 0x4c
    59ac:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    59b0:	4b0a      	ldr	r3, [pc, #40]	; (59dc <endpoint_ctx+0x54>)
    59b2:	4418      	add	r0, r3
    59b4:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    59b6:	2b08      	cmp	r3, #8
    59b8:	d105      	bne.n	59c6 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    59ba:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    59bc:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    59c0:	d506      	bpl.n	59d0 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    59c2:	4807      	ldr	r0, [pc, #28]	; (59e0 <endpoint_ctx+0x58>)
    59c4:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    59c6:	f010 0f78 	tst.w	r0, #120	; 0x78
    59ca:	d0f6      	beq.n	59ba <endpoint_ctx+0x32>
		return NULL;
    59cc:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    59ce:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    59d0:	4804      	ldr	r0, [pc, #16]	; (59e4 <endpoint_ctx+0x5c>)
    59d2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    59d6:	4770      	bx	lr
    59d8:	20000ffc 	.word	0x20000ffc
    59dc:	20000eb0 	.word	0x20000eb0
    59e0:	2000111c 	.word	0x2000111c
    59e4:	2000101c 	.word	0x2000101c

000059e8 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    59e8:	4901      	ldr	r1, [pc, #4]	; (59f0 <usbd_work_schedule+0x8>)
    59ea:	4802      	ldr	r0, [pc, #8]	; (59f4 <usbd_work_schedule+0xc>)
    59ec:	f008 b9c6 	b.w	dd7c <k_work_submit_to_queue>
    59f0:	20000ed8 	.word	0x20000ed8
    59f4:	200005e0 	.word	0x200005e0

000059f8 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    59f8:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    59fa:	4801      	ldr	r0, [pc, #4]	; (5a00 <usbd_evt_put+0x8>)
    59fc:	f008 b959 	b.w	dcb2 <k_queue_append>
    5a00:	20000340 	.word	0x20000340

00005a04 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    5a04:	4802      	ldr	r0, [pc, #8]	; (5a10 <usbd_evt_get+0xc>)
    5a06:	2200      	movs	r2, #0
    5a08:	2300      	movs	r3, #0
    5a0a:	f005 b881 	b.w	ab10 <z_impl_k_queue_get>
    5a0e:	bf00      	nop
    5a10:	20000340 	.word	0x20000340

00005a14 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    5a14:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5a16:	4c05      	ldr	r4, [pc, #20]	; (5a2c <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    5a18:	f7ff fff4 	bl	5a04 <usbd_evt_get>
		if (ev) {
    5a1c:	b120      	cbz	r0, 5a28 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5a1e:	1d01      	adds	r1, r0, #4
    5a20:	4620      	mov	r0, r4
    5a22:	f008 f88e 	bl	db42 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    5a26:	e7f7      	b.n	5a18 <usbd_evt_flush+0x4>
}
    5a28:	bd10      	pop	{r4, pc}
    5a2a:	bf00      	nop
    5a2c:	20000300 	.word	0x20000300

00005a30 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    5a30:	b507      	push	{r0, r1, r2, lr}
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    5a32:	2300      	movs	r3, #0
    5a34:	480e      	ldr	r0, [pc, #56]	; (5a70 <usbd_evt_alloc+0x40>)
    5a36:	2200      	movs	r2, #0
    5a38:	a901      	add	r1, sp, #4
    5a3a:	f004 feaf 	bl	a79c <k_mem_slab_alloc>
    5a3e:	b190      	cbz	r0, 5a66 <usbd_evt_alloc+0x36>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    5a40:	f7ff ffe8 	bl	5a14 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5a44:	480a      	ldr	r0, [pc, #40]	; (5a70 <usbd_evt_alloc+0x40>)
    5a46:	2200      	movs	r2, #0
    5a48:	2300      	movs	r3, #0
    5a4a:	a901      	add	r1, sp, #4
    5a4c:	f004 fea6 	bl	a79c <k_mem_slab_alloc>
    5a50:	b938      	cbnz	r0, 5a62 <usbd_evt_alloc+0x32>
			LOG_ERR("USBD event memory corrupted");
			__ASSERT_NO_MSG(0);
			return NULL;
		}

		ev = (struct usbd_event *)block.data;
    5a52:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    5a54:	2304      	movs	r3, #4
		ev->block = block;
    5a56:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5a58:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    5a5a:	f7ff ffcd 	bl	59f8 <usbd_evt_put>
		usbd_work_schedule();
    5a5e:	f7ff ffc3 	bl	59e8 <usbd_work_schedule>

		return NULL;
    5a62:	2000      	movs	r0, #0
    5a64:	e001      	b.n	5a6a <usbd_evt_alloc+0x3a>
	}

	ev = (struct usbd_event *)block.data;
    5a66:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    5a68:	6040      	str	r0, [r0, #4]

	return ev;
}
    5a6a:	b003      	add	sp, #12
    5a6c:	f85d fb04 	ldr.w	pc, [sp], #4
    5a70:	20000300 	.word	0x20000300

00005a74 <usb_dc_power_event_handler>:

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
	enum usbd_periph_state new_state;

	switch (event) {
    5a74:	2802      	cmp	r0, #2
{
    5a76:	b510      	push	{r4, lr}
    5a78:	d811      	bhi.n	5a9e <usb_dc_power_event_handler+0x2a>
    5a7a:	4b09      	ldr	r3, [pc, #36]	; (5aa0 <usb_dc_power_event_handler+0x2c>)
    5a7c:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    5a7e:	f7ff ffd7 	bl	5a30 <usbd_evt_alloc>
	if (!ev) {
    5a82:	b160      	cbz	r0, 5a9e <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
    5a84:	2200      	movs	r2, #0
    5a86:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    5a88:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    5a8a:	f7ff ffb5 	bl	59f8 <usbd_evt_put>
	if (usbd_ctx.attached) {
    5a8e:	4b05      	ldr	r3, [pc, #20]	; (5aa4 <usb_dc_power_event_handler+0x30>)
    5a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5a94:	b11b      	cbz	r3, 5a9e <usb_dc_power_event_handler+0x2a>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    5a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    5a9a:	f7ff bfa5 	b.w	59e8 <usbd_work_schedule>
}
    5a9e:	bd10      	pop	{r4, pc}
    5aa0:	0000f627 	.word	0x0000f627
    5aa4:	20000eb0 	.word	0x20000eb0

00005aa8 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    5aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    5aaa:	7887      	ldrb	r7, [r0, #2]
{
    5aac:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    5aae:	4638      	mov	r0, r7
    5ab0:	f7ff ff6a 	bl	5988 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5ab4:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    5ab6:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    5ab8:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5aba:	d512      	bpl.n	5ae2 <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    5abc:	2d00      	cmp	r5, #0
    5abe:	d143      	bne.n	5b48 <usbd_event_transfer_data+0xa0>
		case NRFX_USBD_EP_OK: {
			struct usbd_event *ev = usbd_evt_alloc();
    5ac0:	f7ff ffb6 	bl	5a30 <usbd_evt_alloc>

			if (!ev) {
    5ac4:	4603      	mov	r3, r0
    5ac6:	2800      	cmp	r0, #0
    5ac8:	d03e      	beq.n	5b48 <usbd_event_transfer_data+0xa0>

			LOG_DBG("write complete, ep 0x%02x",
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->write_in_progress = false;
			ev->evt_type = USBD_EVT_EP;
    5aca:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    5acc:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    5ace:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5ad0:	2203      	movs	r2, #3
    5ad2:	7302      	strb	r2, [r0, #12]
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->read_pending = true;
			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
			ev->evt.ep_evt.ep = ep_ctx;
    5ad4:	609c      	str	r4, [r3, #8]

			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
			ev->evt.ep_evt.ep = ep_ctx;

			usbd_evt_put(ev);
    5ad6:	f7ff ff8f 	bl	59f8 <usbd_evt_put>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    5ada:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
    5ade:	f7ff bf83 	b.w	59e8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    5ae2:	b14d      	cbz	r5, 5af8 <usbd_event_transfer_data+0x50>
    5ae4:	2d01      	cmp	r5, #1
    5ae6:	d12f      	bne.n	5b48 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    5ae8:	f7ff ffa2 	bl	5a30 <usbd_evt_alloc>
			if (!ev) {
    5aec:	4603      	mov	r3, r0
    5aee:	b358      	cbz	r0, 5b48 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    5af0:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    5af2:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5af4:	7305      	strb	r5, [r0, #12]
    5af6:	e7ed      	b.n	5ad4 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    5af8:	f7ff ff9a 	bl	5a30 <usbd_evt_alloc>
			if (!ev) {
    5afc:	b320      	cbz	r0, 5b48 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    5afe:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    5b00:	4b12      	ldr	r3, [pc, #72]	; (5b4c <usbd_event_transfer_data+0xa4>)
    5b02:	f012 0f80 	tst.w	r2, #128	; 0x80
    5b06:	f002 0108 	and.w	r1, r2, #8
    5b0a:	d011      	beq.n	5b30 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    5b0c:	b141      	cbz	r1, 5b20 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    5b0e:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    5b12:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    5b14:	2301      	movs	r3, #1
    5b16:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    5b18:	2302      	movs	r3, #2
    5b1a:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5b1c:	6084      	str	r4, [r0, #8]
    5b1e:	e7da      	b.n	5ad6 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    5b20:	f002 020f 	and.w	r2, r2, #15
    5b24:	2114      	movs	r1, #20
    5b26:	fb01 3302 	mla	r3, r1, r2, r3
    5b2a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5b2e:	e7f0      	b.n	5b12 <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    5b30:	b111      	cbz	r1, 5b38 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    5b32:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    5b36:	e7ec      	b.n	5b12 <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    5b38:	f002 020f 	and.w	r2, r2, #15
    5b3c:	2114      	movs	r1, #20
    5b3e:	fb01 3302 	mla	r3, r1, r2, r3
    5b42:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    5b46:	e7e4      	b.n	5b12 <usbd_event_transfer_data+0x6a>
}
    5b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b4a:	bf00      	nop
    5b4c:	40027000 	.word	0x40027000

00005b50 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    5b50:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    5b52:	4812      	ldr	r0, [pc, #72]	; (5b9c <usb_init+0x4c>)
    5b54:	f004 f814 	bl	9b80 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    5b58:	4b11      	ldr	r3, [pc, #68]	; (5ba0 <usb_init+0x50>)
    5b5a:	4298      	cmp	r0, r3
    5b5c:	d11a      	bne.n	5b94 <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    5b5e:	4811      	ldr	r0, [pc, #68]	; (5ba4 <usb_init+0x54>)
    5b60:	f003 f82c 	bl	8bbc <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    5b64:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    5b66:	4810      	ldr	r0, [pc, #64]	; (5ba8 <usb_init+0x58>)
    5b68:	f003 f86e 	bl	8c48 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    5b6c:	490f      	ldr	r1, [pc, #60]	; (5bac <usb_init+0x5c>)
    5b6e:	4810      	ldr	r0, [pc, #64]	; (5bb0 <usb_init+0x60>)
    5b70:	9400      	str	r4, [sp, #0]
    5b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5b7a:	f005 f95d 	bl	ae38 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    5b7e:	490d      	ldr	r1, [pc, #52]	; (5bb4 <usb_init+0x64>)
    5b80:	480b      	ldr	r0, [pc, #44]	; (5bb0 <usb_init+0x60>)
    5b82:	f008 f80d 	bl	dba0 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    5b86:	480c      	ldr	r0, [pc, #48]	; (5bb8 <usb_init+0x68>)
    5b88:	490c      	ldr	r1, [pc, #48]	; (5bbc <usb_init+0x6c>)
    5b8a:	f008 f8da 	bl	dd42 <k_work_init>

	return 0;
    5b8e:	4620      	mov	r0, r4
}
    5b90:	b002      	add	sp, #8
    5b92:	bd10      	pop	{r4, pc}
		return -EIO;
    5b94:	f06f 0004 	mvn.w	r0, #4
    5b98:	e7fa      	b.n	5b90 <usb_init+0x40>
    5b9a:	bf00      	nop
    5b9c:	00005c01 	.word	0x00005c01
    5ba0:	0bad0000 	.word	0x0bad0000
    5ba4:	0000f62a 	.word	0x0000f62a
    5ba8:	0000e5a0 	.word	0x0000e5a0
    5bac:	20003500 	.word	0x20003500
    5bb0:	200005e0 	.word	0x200005e0
    5bb4:	0000f61c 	.word	0x0000f61c
    5bb8:	20000ed8 	.word	0x20000ed8
    5bbc:	00005d85 	.word	0x00005d85

00005bc0 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    5bc0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5bc2:	490e      	ldr	r1, [pc, #56]	; (5bfc <hfxo_stop.constprop.0.isra.0+0x3c>)
    5bc4:	f3bf 8f5b 	dmb	ish
    5bc8:	2300      	movs	r3, #0
    5bca:	e851 2f00 	ldrex	r2, [r1]
    5bce:	2a01      	cmp	r2, #1
    5bd0:	d103      	bne.n	5bda <hfxo_stop.constprop.0.isra.0+0x1a>
    5bd2:	e841 3000 	strex	r0, r3, [r1]
    5bd6:	2800      	cmp	r0, #0
    5bd8:	d1f7      	bne.n	5bca <hfxo_stop.constprop.0.isra.0+0xa>
    5bda:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    5bde:	d10c      	bne.n	5bfa <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    5be0:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    5be4:	3914      	subs	r1, #20
    5be6:	4620      	mov	r0, r4
    5be8:	f006 f9ec 	bl	bfc4 <onoff_cancel>

	if (rv == -EALREADY) {
    5bec:	3078      	adds	r0, #120	; 0x78
    5bee:	d104      	bne.n	5bfa <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    5bf0:	4620      	mov	r0, r4
}
    5bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5bf6:	f006 b9c0 	b.w	bf7a <onoff_release>
    5bfa:	bd10      	pop	{r4, pc}
    5bfc:	20000ed0 	.word	0x20000ed0

00005c00 <usbd_event_handler>:
{
    5c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c02:	4606      	mov	r6, r0
    5c04:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    5c06:	2214      	movs	r2, #20
    5c08:	2100      	movs	r1, #0
    5c0a:	a803      	add	r0, sp, #12
    5c0c:	f006 fc71 	bl	c4f2 <memset>
	switch (p_event->type) {
    5c10:	7833      	ldrb	r3, [r6, #0]
    5c12:	3b01      	subs	r3, #1
    5c14:	2b05      	cmp	r3, #5
    5c16:	d821      	bhi.n	5c5c <usbd_event_handler+0x5c>
    5c18:	e8df f003 	tbb	[pc, r3]
    5c1c:	1414037a 	.word	0x1414037a
    5c20:	166a      	.short	0x166a
    5c22:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    5c24:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
    5c28:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    5c2a:	f7ff ff01 	bl	5a30 <usbd_evt_alloc>
		if (!ev) {
    5c2e:	4603      	mov	r3, r0
    5c30:	b1a0      	cbz	r0, 5c5c <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
    5c32:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    5c34:	f100 0208 	add.w	r2, r0, #8
    5c38:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    5c3c:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    5c40:	4618      	mov	r0, r3
    5c42:	e01d      	b.n	5c80 <usbd_event_handler+0x80>
	switch (p_event->type) {
    5c44:	2304      	movs	r3, #4
    5c46:	e7ed      	b.n	5c24 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    5c48:	78b7      	ldrb	r7, [r6, #2]
    5c4a:	4638      	mov	r0, r7
    5c4c:	f7ff fe9c 	bl	5988 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    5c50:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    5c52:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    5c54:	b123      	cbz	r3, 5c60 <usbd_event_handler+0x60>
    5c56:	3b01      	subs	r3, #1
    5c58:	2b02      	cmp	r3, #2
    5c5a:	d943      	bls.n	5ce4 <usbd_event_handler+0xe4>
}
    5c5c:	b009      	add	sp, #36	; 0x24
    5c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5c60:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    5c62:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5c64:	d513      	bpl.n	5c8e <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
    5c66:	2d00      	cmp	r5, #0
    5c68:	d1f8      	bne.n	5c5c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    5c6a:	f7ff fee1 	bl	5a30 <usbd_evt_alloc>
			if (!ev) {
    5c6e:	4603      	mov	r3, r0
    5c70:	2800      	cmp	r0, #0
    5c72:	d0f3      	beq.n	5c5c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    5c74:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    5c76:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    5c78:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5c7a:	2203      	movs	r2, #3
    5c7c:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5c7e:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    5c80:	f7ff feba 	bl	59f8 <usbd_evt_put>
}
    5c84:	b009      	add	sp, #36	; 0x24
    5c86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
    5c8a:	f7ff bead 	b.w	59e8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    5c8e:	b155      	cbz	r5, 5ca6 <usbd_event_handler+0xa6>
    5c90:	2d01      	cmp	r5, #1
    5c92:	d1e3      	bne.n	5c5c <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    5c94:	f7ff fecc 	bl	5a30 <usbd_evt_alloc>
			if (!ev) {
    5c98:	4603      	mov	r3, r0
    5c9a:	2800      	cmp	r0, #0
    5c9c:	d0de      	beq.n	5c5c <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    5c9e:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    5ca0:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5ca2:	7305      	strb	r5, [r0, #12]
    5ca4:	e7eb      	b.n	5c7e <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
    5ca6:	f7ff fec3 	bl	5a30 <usbd_evt_alloc>
			if (!ev) {
    5caa:	4607      	mov	r7, r0
    5cac:	2800      	cmp	r0, #0
    5cae:	d0d5      	beq.n	5c5c <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    5cb0:	2301      	movs	r3, #1
    5cb2:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    5cb4:	2302      	movs	r3, #2
    5cb6:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5cb8:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    5cba:	f104 010c 	add.w	r1, r4, #12
    5cbe:	78b0      	ldrb	r0, [r6, #2]
    5cc0:	f007 feb7 	bl	da32 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    5cc4:	4a13      	ldr	r2, [pc, #76]	; (5d14 <usbd_event_handler+0x114>)
    5cc6:	68e1      	ldr	r1, [r4, #12]
    5cc8:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    5ccc:	428b      	cmp	r3, r1
    5cce:	d906      	bls.n	5cde <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    5cd0:	1a5b      	subs	r3, r3, r1
    5cd2:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    5cd6:	f004 f98f 	bl	9ff8 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    5cda:	4638      	mov	r0, r7
    5cdc:	e7d0      	b.n	5c80 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
    5cde:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    5ce2:	e7fa      	b.n	5cda <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
    5ce4:	4630      	mov	r0, r6
}
    5ce6:	b009      	add	sp, #36	; 0x24
    5ce8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
    5cec:	f7ff bedc 	b.w	5aa8 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
    5cf0:	a801      	add	r0, sp, #4
    5cf2:	f004 f95b 	bl	9fac <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    5cf6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5cfa:	2b05      	cmp	r3, #5
    5cfc:	d104      	bne.n	5d08 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    5cfe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5d02:	f013 0f60 	tst.w	r3, #96	; 0x60
    5d06:	d0a9      	beq.n	5c5c <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    5d08:	4b03      	ldr	r3, [pc, #12]	; (5d18 <usbd_event_handler+0x118>)
    5d0a:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
    5d0c:	2401      	movs	r4, #1
    5d0e:	e78c      	b.n	5c2a <usbd_event_handler+0x2a>
	switch (p_event->type) {
    5d10:	2402      	movs	r4, #2
    5d12:	e78a      	b.n	5c2a <usbd_event_handler+0x2a>
    5d14:	20000eb0 	.word	0x20000eb0
    5d18:	2000101c 	.word	0x2000101c

00005d1c <eps_ctx_init>:
{
    5d1c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5d1e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    5d20:	f064 007f 	orn	r0, r4, #127	; 0x7f
    5d24:	b2c0      	uxtb	r0, r0
    5d26:	f7ff fe2f 	bl	5988 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5d2a:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    5d2c:	f006 fe25 	bl	c97a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5d30:	2c08      	cmp	r4, #8
    5d32:	d1f5      	bne.n	5d20 <eps_ctx_init+0x4>
    5d34:	4d0e      	ldr	r5, [pc, #56]	; (5d70 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5d36:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    5d38:	b2e0      	uxtb	r0, r4
    5d3a:	f7ff fe25 	bl	5988 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    5d3e:	6903      	ldr	r3, [r0, #16]
    5d40:	b903      	cbnz	r3, 5d44 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    5d42:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5d44:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    5d46:	f006 fe18 	bl	c97a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5d4a:	2c08      	cmp	r4, #8
    5d4c:	f105 0540 	add.w	r5, r5, #64	; 0x40
    5d50:	d1f2      	bne.n	5d38 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    5d52:	4808      	ldr	r0, [pc, #32]	; (5d74 <eps_ctx_init+0x58>)
    5d54:	f006 fe11 	bl	c97a <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    5d58:	4b07      	ldr	r3, [pc, #28]	; (5d78 <eps_ctx_init+0x5c>)
    5d5a:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    5d5e:	b912      	cbnz	r2, 5d66 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    5d60:	4a06      	ldr	r2, [pc, #24]	; (5d7c <eps_ctx_init+0x60>)
    5d62:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    5d66:	4806      	ldr	r0, [pc, #24]	; (5d80 <eps_ctx_init+0x64>)
    5d68:	f006 fe07 	bl	c97a <ep_ctx_reset>
}
    5d6c:	2000      	movs	r0, #0
    5d6e:	bd38      	pop	{r3, r4, r5, pc}
    5d70:	20001540 	.word	0x20001540
    5d74:	20000ffc 	.word	0x20000ffc
    5d78:	20000eb0 	.word	0x20000eb0
    5d7c:	20001140 	.word	0x20001140
    5d80:	2000111c 	.word	0x2000111c

00005d84 <usbd_work_handler>:
{
    5d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
    5d88:	4ca7      	ldr	r4, [pc, #668]	; (6028 <usbd_work_handler+0x2a4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5d8a:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 602c <usbd_work_handler+0x2a8>
{
    5d8e:	b085      	sub	sp, #20
    5d90:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
    5d92:	f7ff fe37 	bl	5a04 <usbd_evt_get>
    5d96:	b910      	cbnz	r0, 5d9e <usbd_work_handler+0x1a>
}
    5d98:	b005      	add	sp, #20
    5d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    5d9e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    5da2:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5da4:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    5da8:	b93b      	cbnz	r3, 5dba <usbd_work_handler+0x36>
    5daa:	2a00      	cmp	r2, #0
    5dac:	f000 8088 	beq.w	5ec0 <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5db0:	489e      	ldr	r0, [pc, #632]	; (602c <usbd_work_handler+0x2a8>)
    5db2:	4649      	mov	r1, r9
    5db4:	f007 fec5 	bl	db42 <k_mem_slab_free>
}
    5db8:	e7eb      	b.n	5d92 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    5dba:	2a04      	cmp	r2, #4
    5dbc:	d844      	bhi.n	5e48 <usbd_work_handler+0xc4>
    5dbe:	e8df f012 	tbh	[pc, r2, lsl #1]
    5dc2:	007f      	.short	0x007f
    5dc4:	01020005 	.word	0x01020005
    5dc8:	01410118 	.word	0x01410118
	switch (ep_evt->evt_type) {
    5dcc:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    5dce:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    5dd0:	2b03      	cmp	r3, #3
    5dd2:	d839      	bhi.n	5e48 <usbd_work_handler+0xc4>
    5dd4:	e8df f003 	tbb	[pc, r3]
    5dd8:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    5ddc:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    5dde:	2208      	movs	r2, #8
    5de0:	2100      	movs	r1, #0
    5de2:	4630      	mov	r0, r6
    5de4:	f006 fb85 	bl	c4f2 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    5de8:	4b91      	ldr	r3, [pc, #580]	; (6030 <usbd_work_handler+0x2ac>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5dea:	4892      	ldr	r0, [pc, #584]	; (6034 <usbd_work_handler+0x2b0>)
    5dec:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    5df0:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    5df2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    5df6:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    5df8:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    5dfc:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    5e00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    5e04:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    5e06:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    5e0a:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    5e0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    5e12:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    5e14:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    5e18:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    5e1c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    5e20:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    5e22:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5e24:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    5e26:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5e28:	f006 fb58 	bl	c4dc <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    5e2c:	682b      	ldr	r3, [r5, #0]
    5e2e:	7a68      	ldrb	r0, [r5, #9]
    5e30:	2100      	movs	r1, #0
    5e32:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    5e34:	f996 3000 	ldrsb.w	r3, [r6]
    5e38:	2b00      	cmp	r3, #0
    5e3a:	db08      	blt.n	5e4e <usbd_work_handler+0xca>
    5e3c:	88f3      	ldrh	r3, [r6, #6]
    5e3e:	b133      	cbz	r3, 5e4e <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
    5e40:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    5e44:	f004 f8d8 	bl	9ff8 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5e48:	4649      	mov	r1, r9
    5e4a:	4640      	mov	r0, r8
    5e4c:	e7b2      	b.n	5db4 <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
    5e4e:	2300      	movs	r3, #0
    5e50:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    5e54:	e7f8      	b.n	5e48 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
    5e56:	7f6b      	ldrb	r3, [r5, #29]
    5e58:	2b00      	cmp	r3, #0
    5e5a:	d0f5      	beq.n	5e48 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
    5e5c:	7f2b      	ldrb	r3, [r5, #28]
    5e5e:	2b00      	cmp	r3, #0
    5e60:	d0f2      	beq.n	5e48 <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
    5e62:	2600      	movs	r6, #0
    5e64:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5e6a:	4873      	ldr	r0, [pc, #460]	; (6038 <usbd_work_handler+0x2b4>)
	ep_ctx->read_complete = false;
    5e6c:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5e72:	f006 fd95 	bl	c9a0 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    5e76:	696b      	ldr	r3, [r5, #20]
    5e78:	9301      	str	r3, [sp, #4]
    5e7a:	686b      	ldr	r3, [r5, #4]
    5e7c:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    5e80:	a901      	add	r1, sp, #4
    5e82:	7a68      	ldrb	r0, [r5, #9]
    5e84:	f003 febe 	bl	9c04 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    5e88:	486b      	ldr	r0, [pc, #428]	; (6038 <usbd_work_handler+0x2b4>)
    5e8a:	f006 fd8b 	bl	c9a4 <k_mutex_unlock.isra.0>
    5e8e:	e7db      	b.n	5e48 <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5e90:	682b      	ldr	r3, [r5, #0]
    5e92:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5e94:	7a68      	ldrb	r0, [r5, #9]
    5e96:	4798      	blx	r3
		break;
    5e98:	e7d6      	b.n	5e48 <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    5e9a:	7aab      	ldrb	r3, [r5, #10]
    5e9c:	b96b      	cbnz	r3, 5eba <usbd_work_handler+0x136>
    5e9e:	7feb      	ldrb	r3, [r5, #31]
    5ea0:	b95b      	cbnz	r3, 5eba <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5ea2:	4865      	ldr	r0, [pc, #404]	; (6038 <usbd_work_handler+0x2b4>)
    5ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5eac:	f006 fd78 	bl	c9a0 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    5eb0:	f004 f8d2 	bl	a058 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    5eb4:	4860      	ldr	r0, [pc, #384]	; (6038 <usbd_work_handler+0x2b4>)
    5eb6:	f006 fd75 	bl	c9a4 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5eba:	682b      	ldr	r3, [r5, #0]
    5ebc:	2102      	movs	r1, #2
    5ebe:	e7e9      	b.n	5e94 <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
    5ec0:	7a02      	ldrb	r2, [r0, #8]
    5ec2:	2a04      	cmp	r2, #4
    5ec4:	d8c0      	bhi.n	5e48 <usbd_work_handler+0xc4>
    5ec6:	e8df f002 	tbb	[pc, r2]
    5eca:	0359      	.short	0x0359
    5ecc:	6723      	.short	0x6723
    5ece:	73          	.byte	0x73
    5ecf:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    5ed0:	f003 fe20 	bl	9b14 <nrfx_usbd_is_enabled>
    5ed4:	4605      	mov	r5, r0
    5ed6:	2800      	cmp	r0, #0
    5ed8:	d1b6      	bne.n	5e48 <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
    5eda:	f003 fd57 	bl	998c <nrfx_usbd_enable>
    5ede:	f3bf 8f5b 	dmb	ish
    5ee2:	4956      	ldr	r1, [pc, #344]	; (603c <usbd_work_handler+0x2b8>)
    5ee4:	2301      	movs	r3, #1
    5ee6:	e851 2f00 	ldrex	r2, [r1]
    5eea:	2a00      	cmp	r2, #0
    5eec:	d103      	bne.n	5ef6 <usbd_work_handler+0x172>
    5eee:	e841 3000 	strex	r0, r3, [r1]
    5ef2:	2800      	cmp	r0, #0
    5ef4:	d1f7      	bne.n	5ee6 <usbd_work_handler+0x162>
    5ef6:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    5efa:	d1a5      	bne.n	5e48 <usbd_work_handler+0xc4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5efc:	f841 5c08 	str.w	r5, [r1, #-8]
    5f00:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    5f04:	69e0      	ldr	r0, [r4, #28]
    5f06:	6163      	str	r3, [r4, #20]
    5f08:	3914      	subs	r1, #20
    5f0a:	f005 ffde 	bl	beca <onoff_request>
    5f0e:	e79b      	b.n	5e48 <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
    5f10:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    5f12:	f065 007f 	orn	r0, r5, #127	; 0x7f
    5f16:	b2c0      	uxtb	r0, r0
    5f18:	f7ff fd36 	bl	5988 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    5f1c:	7a03      	ldrb	r3, [r0, #8]
    5f1e:	b113      	cbz	r3, 5f26 <usbd_work_handler+0x1a2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5f20:	7a40      	ldrb	r0, [r0, #9]
    5f22:	f004 fa49 	bl	a3b8 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    5f26:	3501      	adds	r5, #1
    5f28:	2d08      	cmp	r5, #8
    5f2a:	d1f2      	bne.n	5f12 <usbd_work_handler+0x18e>
		if (ep_ctx->cfg.en) {
    5f2c:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    5f30:	b11b      	cbz	r3, 5f3a <usbd_work_handler+0x1b6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5f32:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    5f36:	f004 fa3f 	bl	a3b8 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    5f3a:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    5f3c:	b2e8      	uxtb	r0, r5
    5f3e:	f7ff fd23 	bl	5988 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    5f42:	7a03      	ldrb	r3, [r0, #8]
    5f44:	b113      	cbz	r3, 5f4c <usbd_work_handler+0x1c8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5f46:	7a40      	ldrb	r0, [r0, #9]
    5f48:	f004 fa36 	bl	a3b8 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    5f4c:	3501      	adds	r5, #1
    5f4e:	2d08      	cmp	r5, #8
    5f50:	d1f4      	bne.n	5f3c <usbd_work_handler+0x1b8>
		if (ep_ctx->cfg.en) {
    5f52:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    5f56:	b11b      	cbz	r3, 5f60 <usbd_work_handler+0x1dc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5f58:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    5f5c:	f004 fa2c 	bl	a3b8 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(IS_ENABLED(CONFIG_USB_DEVICE_SOF));
    5f60:	2000      	movs	r0, #0
    5f62:	f003 fdb9 	bl	9ad8 <nrfx_usbd_start>
		ctx->ready = true;
    5f66:	2301      	movs	r3, #1
    5f68:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    5f6c:	6823      	ldr	r3, [r4, #0]
    5f6e:	2b00      	cmp	r3, #0
    5f70:	f43f af6a 	beq.w	5e48 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    5f74:	2100      	movs	r1, #0
    5f76:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    5f78:	4798      	blx	r3
    5f7a:	e765      	b.n	5e48 <usbd_work_handler+0xc4>
		ctx->ready = false;
    5f7c:	2500      	movs	r5, #0
    5f7e:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    5f82:	f004 f9d5 	bl	a330 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    5f86:	f7ff fe1b 	bl	5bc0 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    5f8a:	6823      	ldr	r3, [r4, #0]
    5f8c:	2b00      	cmp	r3, #0
    5f8e:	f43f af5b 	beq.w	5e48 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    5f92:	4629      	mov	r1, r5
    5f94:	2004      	movs	r0, #4
    5f96:	e7ef      	b.n	5f78 <usbd_work_handler+0x1f4>
		if (dev_ready()) {
    5f98:	2b00      	cmp	r3, #0
    5f9a:	f43f af55 	beq.w	5e48 <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
    5f9e:	f003 fdc3 	bl	9b28 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    5fa2:	6823      	ldr	r3, [r4, #0]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	f43f af4f 	beq.w	5e48 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    5faa:	2100      	movs	r1, #0
    5fac:	2005      	movs	r0, #5
    5fae:	e7e3      	b.n	5f78 <usbd_work_handler+0x1f4>
		if (ctx->status_cb && dev_ready()) {
    5fb0:	6822      	ldr	r2, [r4, #0]
    5fb2:	2a00      	cmp	r2, #0
    5fb4:	f43f af48 	beq.w	5e48 <usbd_work_handler+0xc4>
    5fb8:	2b00      	cmp	r3, #0
    5fba:	f43f af45 	beq.w	5e48 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    5fbe:	2100      	movs	r1, #0
    5fc0:	2006      	movs	r0, #6
    5fc2:	4790      	blx	r2
    5fc4:	e740      	b.n	5e48 <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5fc6:	f107 0510 	add.w	r5, r7, #16
    5fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5fd2:	4628      	mov	r0, r5
    5fd4:	f006 fce4 	bl	c9a0 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    5fd8:	f7ff fea0 	bl	5d1c <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    5fdc:	4628      	mov	r0, r5
    5fde:	f006 fce1 	bl	c9a4 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    5fe2:	f857 3c28 	ldr.w	r3, [r7, #-40]
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	f43f af2e 	beq.w	5e48 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
    5fec:	2100      	movs	r1, #0
    5fee:	2001      	movs	r0, #1
    5ff0:	e7c2      	b.n	5f78 <usbd_work_handler+0x1f4>
	if (ep_ctx->cfg.en) {
    5ff2:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    5ff6:	b17b      	cbz	r3, 6018 <usbd_work_handler+0x294>
		ep_ctx->read_pending = true;
    5ff8:	2501      	movs	r5, #1
    5ffa:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    5ffe:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    6002:	f7ff fd15 	bl	5a30 <usbd_evt_alloc>
		if (!ev) {
    6006:	b138      	cbz	r0, 6018 <usbd_work_handler+0x294>
		ev->evt.ep_evt.ep = ep_ctx;
    6008:	4a0d      	ldr	r2, [pc, #52]	; (6040 <usbd_work_handler+0x2bc>)
		ev->evt_type = USBD_EVT_EP;
    600a:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    600c:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    600e:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    6010:	f7ff fcf2 	bl	59f8 <usbd_evt_put>
		usbd_work_schedule();
    6014:	f7ff fce8 	bl	59e8 <usbd_work_schedule>
			if (ctx->status_cb) {
    6018:	f857 3c28 	ldr.w	r3, [r7, #-40]
    601c:	2b00      	cmp	r3, #0
    601e:	f43f af13 	beq.w	5e48 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
    6022:	2100      	movs	r1, #0
    6024:	200a      	movs	r0, #10
    6026:	e7a7      	b.n	5f78 <usbd_work_handler+0x1f4>
    6028:	20000eb0 	.word	0x20000eb0
    602c:	20000300 	.word	0x20000300
    6030:	40027000 	.word	0x40027000
    6034:	20000eb4 	.word	0x20000eb4
    6038:	20000ee8 	.word	0x20000ee8
    603c:	20000ed0 	.word	0x20000ed0
    6040:	2000111c 	.word	0x2000111c
	nrfx_power_usbevt_disable();
    6044:	f007 fb87 	bl	d756 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    6048:	f004 f972 	bl	a330 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    604c:	f003 fc94 	bl	9978 <nrfx_usbd_uninit>
	usbd_evt_flush();
    6050:	f7ff fce0 	bl	5a14 <usbd_evt_flush>
	ret = eps_ctx_init();
    6054:	f7ff fe62 	bl	5d1c <eps_ctx_init>
	nrfx_power_usbevt_enable();
    6058:	f007 fb76 	bl	d748 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    605c:	4801      	ldr	r0, [pc, #4]	; (6064 <usbd_work_handler+0x2e0>)
    605e:	f003 fd8f 	bl	9b80 <nrfx_usbd_init>
}
    6062:	e6f1      	b.n	5e48 <usbd_work_handler+0xc4>
    6064:	00005c01 	.word	0x00005c01

00006068 <usb_dc_attach>:
{
    6068:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    606a:	4d16      	ldr	r5, [pc, #88]	; (60c4 <usb_dc_attach+0x5c>)
    606c:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    6070:	bb2c      	cbnz	r4, 60be <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    6072:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6076:	f007 fda7 	bl	dbc8 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    607a:	4620      	mov	r0, r4
    607c:	f000 fb10 	bl	66a0 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6080:	4622      	mov	r2, r4
    6082:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    6084:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6086:	2027      	movs	r0, #39	; 0x27
    6088:	f7fe feb2 	bl	4df0 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    608c:	f007 fb5c 	bl	d748 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    6090:	f7ff fe44 	bl	5d1c <eps_ctx_init>
	if (ret == 0) {
    6094:	4604      	mov	r4, r0
    6096:	b910      	cbnz	r0, 609e <usb_dc_attach+0x36>
		ctx->attached = true;
    6098:	2301      	movs	r3, #1
    609a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    609e:	4b0a      	ldr	r3, [pc, #40]	; (60c8 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    60a0:	681b      	ldr	r3, [r3, #0]
    60a2:	b10b      	cbz	r3, 60a8 <usb_dc_attach+0x40>
		usbd_work_schedule();
    60a4:	f7ff fca0 	bl	59e8 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    60a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60ac:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    60b0:	07db      	lsls	r3, r3, #31
    60b2:	d502      	bpl.n	60ba <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    60b4:	2000      	movs	r0, #0
    60b6:	f7ff fcdd 	bl	5a74 <usb_dc_power_event_handler>
}
    60ba:	4620      	mov	r0, r4
    60bc:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    60be:	2400      	movs	r4, #0
    60c0:	e7fb      	b.n	60ba <usb_dc_attach+0x52>
    60c2:	bf00      	nop
    60c4:	20000eb0 	.word	0x20000eb0
    60c8:	20000340 	.word	0x20000340

000060cc <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    60cc:	4b07      	ldr	r3, [pc, #28]	; (60ec <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    60ce:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    60d2:	b13a      	cbz	r2, 60e4 <usb_dc_set_address+0x18>
    60d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    60d8:	2b00      	cmp	r3, #0
    60da:	bf14      	ite	ne
    60dc:	2000      	movne	r0, #0
    60de:	f06f 0012 	mvneq.w	r0, #18
    60e2:	4770      	bx	lr
    60e4:	f06f 0012 	mvn.w	r0, #18
}
    60e8:	4770      	bx	lr
    60ea:	bf00      	nop
    60ec:	20000eb0 	.word	0x20000eb0

000060f0 <usb_dc_ep_configure>:
{
    60f0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    60f2:	4b10      	ldr	r3, [pc, #64]	; (6134 <usb_dc_ep_configure+0x44>)
	if (!dev_attached()) {
    60f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    60f8:	4604      	mov	r4, r0
	if (!dev_attached()) {
    60fa:	b1c3      	cbz	r3, 612e <usb_dc_ep_configure+0x3e>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    60fc:	7805      	ldrb	r5, [r0, #0]
    60fe:	4628      	mov	r0, r5
    6100:	f7ff fc42 	bl	5988 <endpoint_ctx>
	if (!ep_ctx) {
    6104:	b910      	cbnz	r0, 610c <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    6106:	f06f 0015 	mvn.w	r0, #21
}
    610a:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    610c:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    610e:	7923      	ldrb	r3, [r4, #4]
    6110:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    6112:	8863      	ldrh	r3, [r4, #2]
    6114:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    6116:	7820      	ldrb	r0, [r4, #0]
    6118:	8861      	ldrh	r1, [r4, #2]
    611a:	f010 0f08 	tst.w	r0, #8
    611e:	d102      	bne.n	6126 <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    6120:	1e4b      	subs	r3, r1, #1
    6122:	420b      	tst	r3, r1
    6124:	d1ef      	bne.n	6106 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    6126:	f007 fc7f 	bl	da28 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    612a:	2000      	movs	r0, #0
    612c:	e7ed      	b.n	610a <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    612e:	f06f 0012 	mvn.w	r0, #18
    6132:	e7ea      	b.n	610a <usb_dc_ep_configure+0x1a>
    6134:	20000eb0 	.word	0x20000eb0

00006138 <usb_dc_ep_set_stall>:
{
    6138:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    613a:	4b12      	ldr	r3, [pc, #72]	; (6184 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
    613c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6140:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    6142:	b1ca      	cbz	r2, 6178 <usb_dc_ep_set_stall+0x40>
    6144:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6148:	b1b3      	cbz	r3, 6178 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    614a:	f7ff fc1d 	bl	5988 <endpoint_ctx>
	if (!ep_ctx) {
    614e:	4604      	mov	r4, r0
    6150:	b1a8      	cbz	r0, 617e <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    6152:	7a83      	ldrb	r3, [r0, #10]
    6154:	2b01      	cmp	r3, #1
    6156:	d012      	beq.n	617e <usb_dc_ep_set_stall+0x46>
    6158:	d907      	bls.n	616a <usb_dc_ep_set_stall+0x32>
    615a:	3b02      	subs	r3, #2
    615c:	2b01      	cmp	r3, #1
    615e:	d907      	bls.n	6170 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    6160:	6963      	ldr	r3, [r4, #20]
    6162:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    6164:	2000      	movs	r0, #0
    6166:	60e0      	str	r0, [r4, #12]
}
    6168:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
    616a:	f003 ff7d 	bl	a068 <nrfx_usbd_setup_stall>
		break;
    616e:	e7f7      	b.n	6160 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    6170:	4628      	mov	r0, r5
    6172:	f003 feed 	bl	9f50 <nrfx_usbd_ep_stall>
		break;
    6176:	e7f3      	b.n	6160 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    6178:	f06f 0012 	mvn.w	r0, #18
    617c:	e7f4      	b.n	6168 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    617e:	f06f 0015 	mvn.w	r0, #21
    6182:	e7f1      	b.n	6168 <usb_dc_ep_set_stall+0x30>
    6184:	20000eb0 	.word	0x20000eb0

00006188 <usb_dc_ep_clear_stall>:
{
    6188:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    618a:	4b0e      	ldr	r3, [pc, #56]	; (61c4 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    618c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6190:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    6192:	b182      	cbz	r2, 61b6 <usb_dc_ep_clear_stall+0x2e>
    6194:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6198:	b16b      	cbz	r3, 61b6 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    619a:	f7ff fbf5 	bl	5988 <endpoint_ctx>
	if (!ep_ctx) {
    619e:	b168      	cbz	r0, 61bc <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    61a0:	f015 0408 	ands.w	r4, r5, #8
    61a4:	d10a      	bne.n	61bc <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    61a6:	4628      	mov	r0, r5
    61a8:	f003 fef4 	bl	9f94 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    61ac:	4628      	mov	r0, r5
    61ae:	f004 f957 	bl	a460 <nrfx_usbd_ep_stall_clear>
	return 0;
    61b2:	4620      	mov	r0, r4
}
    61b4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    61b6:	f06f 0012 	mvn.w	r0, #18
    61ba:	e7fb      	b.n	61b4 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    61bc:	f06f 0015 	mvn.w	r0, #21
    61c0:	e7f8      	b.n	61b4 <usb_dc_ep_clear_stall+0x2c>
    61c2:	bf00      	nop
    61c4:	20000eb0 	.word	0x20000eb0

000061c8 <usb_dc_ep_is_stalled>:
{
    61c8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    61ca:	4b0c      	ldr	r3, [pc, #48]	; (61fc <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    61cc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    61d0:	4605      	mov	r5, r0
    61d2:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    61d4:	b162      	cbz	r2, 61f0 <usb_dc_ep_is_stalled+0x28>
    61d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    61da:	b14b      	cbz	r3, 61f0 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    61dc:	f7ff fbd4 	bl	5988 <endpoint_ctx>
	if (!ep_ctx) {
    61e0:	b148      	cbz	r0, 61f6 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    61e2:	b144      	cbz	r4, 61f6 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    61e4:	4628      	mov	r0, r5
    61e6:	f003 febb 	bl	9f60 <nrfx_usbd_ep_stall_check>
    61ea:	7020      	strb	r0, [r4, #0]
	return 0;
    61ec:	2000      	movs	r0, #0
}
    61ee:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    61f0:	f06f 0012 	mvn.w	r0, #18
    61f4:	e7fb      	b.n	61ee <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    61f6:	f06f 0015 	mvn.w	r0, #21
    61fa:	e7f8      	b.n	61ee <usb_dc_ep_is_stalled+0x26>
    61fc:	20000eb0 	.word	0x20000eb0

00006200 <usb_dc_ep_enable>:
{
    6200:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    6202:	4e13      	ldr	r6, [pc, #76]	; (6250 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    6204:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    6208:	4604      	mov	r4, r0
	if (!dev_attached()) {
    620a:	b1c3      	cbz	r3, 623e <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    620c:	f7ff fbbc 	bl	5988 <endpoint_ctx>
	if (!ep_ctx) {
    6210:	4605      	mov	r5, r0
    6212:	b1b8      	cbz	r0, 6244 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    6214:	0723      	lsls	r3, r4, #28
    6216:	d405      	bmi.n	6224 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6218:	4620      	mov	r0, r4
    621a:	f003 febb 	bl	9f94 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    621e:	4620      	mov	r0, r4
    6220:	f004 f91e 	bl	a460 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    6224:	7a2b      	ldrb	r3, [r5, #8]
    6226:	b983      	cbnz	r3, 624a <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    6228:	2301      	movs	r3, #1
    622a:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    622c:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    6230:	b90b      	cbnz	r3, 6236 <usb_dc_ep_enable+0x36>
	return 0;
    6232:	2000      	movs	r0, #0
}
    6234:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    6236:	4620      	mov	r0, r4
    6238:	f004 f8be 	bl	a3b8 <nrfx_usbd_ep_enable>
    623c:	e7f9      	b.n	6232 <usb_dc_ep_enable+0x32>
		return -ENODEV;
    623e:	f06f 0012 	mvn.w	r0, #18
    6242:	e7f7      	b.n	6234 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    6244:	f06f 0015 	mvn.w	r0, #21
    6248:	e7f4      	b.n	6234 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    624a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    624e:	e7f1      	b.n	6234 <usb_dc_ep_enable+0x34>
    6250:	20000eb0 	.word	0x20000eb0

00006254 <usb_dc_ep_write>:
{
    6254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    6258:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 6340 <usb_dc_ep_write+0xec>
{
    625c:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    625e:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    6262:	b085      	sub	sp, #20
    6264:	4607      	mov	r7, r0
    6266:	4689      	mov	r9, r1
    6268:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    626a:	2b00      	cmp	r3, #0
    626c:	d061      	beq.n	6332 <usb_dc_ep_write+0xde>
    626e:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    6272:	2b00      	cmp	r3, #0
    6274:	d05d      	beq.n	6332 <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    6276:	0603      	lsls	r3, r0, #24
    6278:	d55e      	bpl.n	6338 <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
    627a:	f7ff fb85 	bl	5988 <endpoint_ctx>
	if (!ep_ctx) {
    627e:	4604      	mov	r4, r0
    6280:	2800      	cmp	r0, #0
    6282:	d059      	beq.n	6338 <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
    6284:	7a03      	ldrb	r3, [r0, #8]
    6286:	2b00      	cmp	r3, #0
    6288:	d056      	beq.n	6338 <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    628a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    628e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6292:	f108 0038 	add.w	r0, r8, #56	; 0x38
    6296:	f006 fb83 	bl	c9a0 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    629a:	7fa3      	ldrb	r3, [r4, #30]
    629c:	b14b      	cbz	r3, 62b2 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    629e:	f108 0038 	add.w	r0, r8, #56	; 0x38
    62a2:	f006 fb7f 	bl	c9a4 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    62a6:	f06f 040a 	mvn.w	r4, #10
}
    62aa:	4620      	mov	r0, r4
    62ac:	b005      	add	sp, #20
    62ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    62b2:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    62b4:	b1c5      	cbz	r5, 62e8 <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    62b6:	b33b      	cbz	r3, 6308 <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
    62b8:	2301      	movs	r3, #1
    62ba:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    62bc:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    62c0:	a901      	add	r1, sp, #4
    62c2:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    62c4:	e9cd 9501 	strd	r9, r5, [sp, #4]
    62c8:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    62cc:	f003 fc9a 	bl	9c04 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    62d0:	4b1c      	ldr	r3, [pc, #112]	; (6344 <usb_dc_ep_write+0xf0>)
    62d2:	4298      	cmp	r0, r3
    62d4:	d029      	beq.n	632a <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
    62d6:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
    62da:	bb1e      	cbnz	r6, 6324 <usb_dc_ep_write+0xd0>
		result = -EIO;
    62dc:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    62e0:	4819      	ldr	r0, [pc, #100]	; (6348 <usb_dc_ep_write+0xf4>)
    62e2:	f006 fb5f 	bl	c9a4 <k_mutex_unlock.isra.0>
	return result;
    62e6:	e7e0      	b.n	62aa <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
    62e8:	7fe2      	ldrb	r2, [r4, #31]
    62ea:	b102      	cbz	r2, 62ee <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
    62ec:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    62ee:	2b00      	cmp	r3, #0
    62f0:	d1e2      	bne.n	62b8 <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    62f2:	f003 fec1 	bl	a078 <nrfx_usbd_last_setup_dir_get>
    62f6:	42b8      	cmp	r0, r7
    62f8:	d0de      	beq.n	62b8 <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
    62fa:	f003 fead 	bl	a058 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    62fe:	4812      	ldr	r0, [pc, #72]	; (6348 <usb_dc_ep_write+0xf4>)
    6300:	f006 fb50 	bl	c9a4 <k_mutex_unlock.isra.0>
		return 0;
    6304:	2400      	movs	r4, #0
    6306:	e7d0      	b.n	62aa <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    6308:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    630c:	42ab      	cmp	r3, r5
    630e:	d9f0      	bls.n	62f2 <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    6310:	6862      	ldr	r2, [r4, #4]
    6312:	fbb5 f3f2 	udiv	r3, r5, r2
    6316:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    631a:	2b00      	cmp	r3, #0
    631c:	d1e9      	bne.n	62f2 <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
    631e:	2301      	movs	r3, #1
    6320:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    6322:	e7e6      	b.n	62f2 <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
    6324:	f8c6 8000 	str.w	r8, [r6]
    6328:	e7d8      	b.n	62dc <usb_dc_ep_write+0x88>
		if (ret_bytes) {
    632a:	b106      	cbz	r6, 632e <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
    632c:	6035      	str	r5, [r6, #0]
	int result = 0;
    632e:	2400      	movs	r4, #0
    6330:	e7d6      	b.n	62e0 <usb_dc_ep_write+0x8c>
		return -ENODEV;
    6332:	f06f 0412 	mvn.w	r4, #18
    6336:	e7b8      	b.n	62aa <usb_dc_ep_write+0x56>
		return -EINVAL;
    6338:	f06f 0415 	mvn.w	r4, #21
    633c:	e7b5      	b.n	62aa <usb_dc_ep_write+0x56>
    633e:	bf00      	nop
    6340:	20000eb0 	.word	0x20000eb0
    6344:	0bad0000 	.word	0x0bad0000
    6348:	20000ee8 	.word	0x20000ee8

0000634c <usb_dc_ep_read_wait>:
{
    634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6350:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    6352:	4b20      	ldr	r3, [pc, #128]	; (63d4 <usb_dc_ep_read_wait+0x88>)
{
    6354:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    6356:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    635a:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    635c:	2a00      	cmp	r2, #0
    635e:	d033      	beq.n	63c8 <usb_dc_ep_read_wait+0x7c>
    6360:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6364:	b383      	cbz	r3, 63c8 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    6366:	0603      	lsls	r3, r0, #24
    6368:	d431      	bmi.n	63ce <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    636a:	b901      	cbnz	r1, 636e <usb_dc_ep_read_wait+0x22>
    636c:	bb7f      	cbnz	r7, 63ce <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    636e:	f7ff fb0b 	bl	5988 <endpoint_ctx>
	if (!ep_ctx) {
    6372:	4604      	mov	r4, r0
    6374:	b358      	cbz	r0, 63ce <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    6376:	7a03      	ldrb	r3, [r0, #8]
    6378:	b34b      	cbz	r3, 63ce <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    637a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    637e:	4816      	ldr	r0, [pc, #88]	; (63d8 <usb_dc_ep_read_wait+0x8c>)
    6380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6384:	f006 fb0c 	bl	c9a0 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    6388:	68e3      	ldr	r3, [r4, #12]
    638a:	429f      	cmp	r7, r3
    638c:	46b8      	mov	r8, r7
    638e:	bf28      	it	cs
    6390:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    6392:	b946      	cbnz	r6, 63a6 <usb_dc_ep_read_wait+0x5a>
    6394:	b93f      	cbnz	r7, 63a6 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    6396:	b105      	cbz	r5, 639a <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    6398:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    639a:	480f      	ldr	r0, [pc, #60]	; (63d8 <usb_dc_ep_read_wait+0x8c>)
    639c:	f006 fb02 	bl	c9a4 <k_mutex_unlock.isra.0>
		return 0;
    63a0:	2000      	movs	r0, #0
}
    63a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    63a6:	69a1      	ldr	r1, [r4, #24]
    63a8:	4642      	mov	r2, r8
    63aa:	4630      	mov	r0, r6
    63ac:	f006 f896 	bl	c4dc <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    63b0:	69a3      	ldr	r3, [r4, #24]
    63b2:	4443      	add	r3, r8
    63b4:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    63b6:	68e3      	ldr	r3, [r4, #12]
    63b8:	eba3 0308 	sub.w	r3, r3, r8
    63bc:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    63be:	2d00      	cmp	r5, #0
    63c0:	d0eb      	beq.n	639a <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    63c2:	f8c5 8000 	str.w	r8, [r5]
    63c6:	e7e8      	b.n	639a <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    63c8:	f06f 0012 	mvn.w	r0, #18
    63cc:	e7e9      	b.n	63a2 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    63ce:	f06f 0015 	mvn.w	r0, #21
    63d2:	e7e6      	b.n	63a2 <usb_dc_ep_read_wait+0x56>
    63d4:	20000eb0 	.word	0x20000eb0
    63d8:	20000ee8 	.word	0x20000ee8

000063dc <usb_dc_ep_read_continue>:
{
    63dc:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    63de:	4d1e      	ldr	r5, [pc, #120]	; (6458 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
    63e0:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
    63e4:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    63e6:	b382      	cbz	r2, 644a <usb_dc_ep_read_continue+0x6e>
    63e8:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    63ec:	b36a      	cbz	r2, 644a <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    63ee:	061b      	lsls	r3, r3, #24
    63f0:	d42e      	bmi.n	6450 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    63f2:	f7ff fac9 	bl	5988 <endpoint_ctx>
	if (!ep_ctx) {
    63f6:	4604      	mov	r4, r0
    63f8:	b350      	cbz	r0, 6450 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    63fa:	7a03      	ldrb	r3, [r0, #8]
    63fc:	b343      	cbz	r3, 6450 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    63fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6406:	f105 0038 	add.w	r0, r5, #56	; 0x38
    640a:	f006 fac9 	bl	c9a0 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    640e:	68e3      	ldr	r3, [r4, #12]
    6410:	b9b3      	cbnz	r3, 6440 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    6412:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6414:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    6416:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6418:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    641a:	7f63      	ldrb	r3, [r4, #29]
    641c:	b183      	cbz	r3, 6440 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    641e:	f7ff fb07 	bl	5a30 <usbd_evt_alloc>
			if (!ev) {
    6422:	b930      	cbnz	r0, 6432 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    6424:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6428:	f006 fabc 	bl	c9a4 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    642c:	f06f 000b 	mvn.w	r0, #11
}
    6430:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    6432:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    6434:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6436:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    6438:	f7ff fade 	bl	59f8 <usbd_evt_put>
			usbd_work_schedule();
    643c:	f7ff fad4 	bl	59e8 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    6440:	4806      	ldr	r0, [pc, #24]	; (645c <usb_dc_ep_read_continue+0x80>)
    6442:	f006 faaf 	bl	c9a4 <k_mutex_unlock.isra.0>
	return 0;
    6446:	2000      	movs	r0, #0
    6448:	e7f2      	b.n	6430 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    644a:	f06f 0012 	mvn.w	r0, #18
    644e:	e7ef      	b.n	6430 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    6450:	f06f 0015 	mvn.w	r0, #21
    6454:	e7ec      	b.n	6430 <usb_dc_ep_read_continue+0x54>
    6456:	bf00      	nop
    6458:	20000eb0 	.word	0x20000eb0
    645c:	20000ee8 	.word	0x20000ee8

00006460 <usb_dc_ep_set_callback>:
{
    6460:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    6462:	4b08      	ldr	r3, [pc, #32]	; (6484 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    6464:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    6468:	460c      	mov	r4, r1
	if (!dev_attached()) {
    646a:	b12b      	cbz	r3, 6478 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    646c:	f7ff fa8c 	bl	5988 <endpoint_ctx>
	if (!ep_ctx) {
    6470:	b128      	cbz	r0, 647e <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    6472:	6004      	str	r4, [r0, #0]
	return 0;
    6474:	2000      	movs	r0, #0
}
    6476:	bd10      	pop	{r4, pc}
		return -ENODEV;
    6478:	f06f 0012 	mvn.w	r0, #18
    647c:	e7fb      	b.n	6476 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    647e:	f06f 0015 	mvn.w	r0, #21
    6482:	e7f8      	b.n	6476 <usb_dc_ep_set_callback+0x16>
    6484:	20000eb0 	.word	0x20000eb0

00006488 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    6488:	4b01      	ldr	r3, [pc, #4]	; (6490 <usb_dc_set_status_callback+0x8>)
    648a:	6018      	str	r0, [r3, #0]
}
    648c:	4770      	bx	lr
    648e:	bf00      	nop
    6490:	20000eb0 	.word	0x20000eb0

00006494 <usb_dc_ep_mps>:
{
    6494:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    6496:	4b07      	ldr	r3, [pc, #28]	; (64b4 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    6498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    649c:	b123      	cbz	r3, 64a8 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    649e:	f7ff fa73 	bl	5988 <endpoint_ctx>
	if (!ep_ctx) {
    64a2:	b120      	cbz	r0, 64ae <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    64a4:	6840      	ldr	r0, [r0, #4]
}
    64a6:	bd08      	pop	{r3, pc}
		return -ENODEV;
    64a8:	f06f 0012 	mvn.w	r0, #18
    64ac:	e7fb      	b.n	64a6 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    64ae:	f06f 0015 	mvn.w	r0, #21
    64b2:	e7f8      	b.n	64a6 <usb_dc_ep_mps+0x12>
    64b4:	20000eb0 	.word	0x20000eb0

000064b8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    64b8:	4b08      	ldr	r3, [pc, #32]	; (64dc <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    64ba:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    64bc:	1ac3      	subs	r3, r0, r3
{
    64be:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    64c0:	4907      	ldr	r1, [pc, #28]	; (64e0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    64c2:	109b      	asrs	r3, r3, #2
{
    64c4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    64c6:	4359      	muls	r1, r3
    64c8:	4806      	ldr	r0, [pc, #24]	; (64e4 <onoff_stop+0x2c>)
    64ca:	2240      	movs	r2, #64	; 0x40
    64cc:	f006 fac8 	bl	ca60 <stop>
	notify(mgr, res);
    64d0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    64d2:	4601      	mov	r1, r0
	notify(mgr, res);
    64d4:	4620      	mov	r0, r4
}
    64d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    64da:	4718      	bx	r3
    64dc:	20001754 	.word	0x20001754
    64e0:	b6db6db7 	.word	0xb6db6db7
    64e4:	0000e1c4 	.word	0x0000e1c4

000064e8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    64e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    64ea:	4c0c      	ldr	r4, [pc, #48]	; (651c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    64ec:	4a0c      	ldr	r2, [pc, #48]	; (6520 <onoff_start+0x38>)
    64ee:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    64f0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    64f2:	9300      	str	r3, [sp, #0]
{
    64f4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    64f6:	460b      	mov	r3, r1
    64f8:	490a      	ldr	r1, [pc, #40]	; (6524 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    64fa:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    64fc:	4361      	muls	r1, r4
{
    64fe:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6500:	4809      	ldr	r0, [pc, #36]	; (6528 <onoff_start+0x40>)
    6502:	f006 fada 	bl	caba <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6506:	1e01      	subs	r1, r0, #0
    6508:	da05      	bge.n	6516 <onoff_start+0x2e>
		notify(mgr, err);
    650a:	4630      	mov	r0, r6
    650c:	462b      	mov	r3, r5
	}
}
    650e:	b002      	add	sp, #8
    6510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    6514:	4718      	bx	r3
}
    6516:	b002      	add	sp, #8
    6518:	bd70      	pop	{r4, r5, r6, pc}
    651a:	bf00      	nop
    651c:	20001754 	.word	0x20001754
    6520:	0000cb27 	.word	0x0000cb27
    6524:	b6db6db7 	.word	0xb6db6db7
    6528:	0000e1c4 	.word	0x0000e1c4

0000652c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    652c:	2200      	movs	r2, #0
{
    652e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6530:	2101      	movs	r1, #1
{
    6532:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6534:	4610      	mov	r0, r2
    6536:	f7fe fc5b 	bl	4df0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    653a:	480f      	ldr	r0, [pc, #60]	; (6578 <clk_init+0x4c>)
    653c:	f001 ff84 	bl	8448 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6540:	4b0e      	ldr	r3, [pc, #56]	; (657c <clk_init+0x50>)
    6542:	4298      	cmp	r0, r3
    6544:	d115      	bne.n	6572 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6546:	f001 ff8f 	bl	8468 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    654a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    654c:	490c      	ldr	r1, [pc, #48]	; (6580 <clk_init+0x54>)
    654e:	4630      	mov	r0, r6
    6550:	f005 fca8 	bl	bea4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6554:	2800      	cmp	r0, #0
    6556:	db0b      	blt.n	6570 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6558:	2501      	movs	r5, #1
    655a:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    655c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    655e:	4908      	ldr	r1, [pc, #32]	; (6580 <clk_init+0x54>)
    6560:	f104 001c 	add.w	r0, r4, #28
    6564:	f005 fc9e 	bl	bea4 <onoff_manager_init>
		if (err < 0) {
    6568:	2800      	cmp	r0, #0
    656a:	db01      	blt.n	6570 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    656c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    656e:	2000      	movs	r0, #0
}
    6570:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6572:	f06f 0004 	mvn.w	r0, #4
    6576:	e7fb      	b.n	6570 <clk_init+0x44>
    6578:	000065b9 	.word	0x000065b9
    657c:	0bad0000 	.word	0x0bad0000
    6580:	0000e5a4 	.word	0x0000e5a4

00006584 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    6584:	b570      	push	{r4, r5, r6, lr}
    6586:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    6588:	230c      	movs	r3, #12
    658a:	4809      	ldr	r0, [pc, #36]	; (65b0 <clkstarted_handle.constprop.0+0x2c>)
    658c:	434b      	muls	r3, r1
    658e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    6590:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    6594:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    6596:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    6598:	4418      	add	r0, r3
	sub_data->cb = NULL;
    659a:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    659c:	f006 fa4d 	bl	ca3a <set_on_state>
	if (callback) {
    65a0:	b12d      	cbz	r5, 65ae <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    65a2:	4632      	mov	r2, r6
    65a4:	462b      	mov	r3, r5
    65a6:	4803      	ldr	r0, [pc, #12]	; (65b4 <clkstarted_handle.constprop.0+0x30>)
}
    65a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    65ac:	4718      	bx	r3
}
    65ae:	bd70      	pop	{r4, r5, r6, pc}
    65b0:	20001754 	.word	0x20001754
    65b4:	0000e1c4 	.word	0x0000e1c4

000065b8 <clock_event_handler>:
	switch (event) {
    65b8:	b110      	cbz	r0, 65c0 <clock_event_handler+0x8>
    65ba:	2801      	cmp	r0, #1
    65bc:	d004      	beq.n	65c8 <clock_event_handler+0x10>
    65be:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    65c0:	4b03      	ldr	r3, [pc, #12]	; (65d0 <clock_event_handler+0x18>)
    65c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    65c4:	075b      	lsls	r3, r3, #29
    65c6:	d101      	bne.n	65cc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    65c8:	f7ff bfdc 	b.w	6584 <clkstarted_handle.constprop.0>
}
    65cc:	4770      	bx	lr
    65ce:	bf00      	nop
    65d0:	20001754 	.word	0x20001754

000065d4 <generic_hfclk_start>:
{
    65d4:	b508      	push	{r3, lr}
	__asm__ volatile(
    65d6:	f04f 0320 	mov.w	r3, #32
    65da:	f3ef 8111 	mrs	r1, BASEPRI
    65de:	f383 8812 	msr	BASEPRI_MAX, r3
    65e2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    65e6:	4a12      	ldr	r2, [pc, #72]	; (6630 <generic_hfclk_start+0x5c>)
    65e8:	6813      	ldr	r3, [r2, #0]
    65ea:	f043 0002 	orr.w	r0, r3, #2
    65ee:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    65f0:	07da      	lsls	r2, r3, #31
    65f2:	d408      	bmi.n	6606 <generic_hfclk_start+0x32>
	__asm__ volatile(
    65f4:	f381 8811 	msr	BASEPRI, r1
    65f8:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    65fc:	2001      	movs	r0, #1
}
    65fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6602:	f006 bfff 	b.w	d604 <nrfx_clock_start>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
            }
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
    6606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    660a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                 * It has to be derived from HFCLK state. */
                (*(nrf_clock_hfclk_t *)p_clk_src) = clock_running ? NRF_CLOCK_HFCLK_HIGH_ACCURACY :
                                                                    NRF_CLOCK_HFCLK_LOW_ACCURACY;
#else
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_SRC_Msk)
    660e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    6612:	07db      	lsls	r3, r3, #31
    6614:	d5ee      	bpl.n	65f4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    6616:	4807      	ldr	r0, [pc, #28]	; (6634 <generic_hfclk_start+0x60>)
    6618:	f006 fa0f 	bl	ca3a <set_on_state>
    661c:	f381 8811 	msr	BASEPRI, r1
    6620:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    6624:	2000      	movs	r0, #0
}
    6626:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    662a:	f7ff bfab 	b.w	6584 <clkstarted_handle.constprop.0>
    662e:	bf00      	nop
    6630:	200017a4 	.word	0x200017a4
    6634:	20001794 	.word	0x20001794

00006638 <api_blocking_start>:
{
    6638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    663a:	2200      	movs	r2, #0
    663c:	2301      	movs	r3, #1
    663e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6642:	4a09      	ldr	r2, [pc, #36]	; (6668 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6644:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6648:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    664a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    664e:	f006 fa63 	bl	cb18 <api_start>
	if (err < 0) {
    6652:	2800      	cmp	r0, #0
    6654:	db05      	blt.n	6662 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    6656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    665a:	2300      	movs	r3, #0
    665c:	4668      	mov	r0, sp
    665e:	f004 faaf 	bl	abc0 <z_impl_k_sem_take>
}
    6662:	b005      	add	sp, #20
    6664:	f85d fb04 	ldr.w	pc, [sp], #4
    6668:	0000cb45 	.word	0x0000cb45

0000666c <generic_hfclk_stop>:
{
    666c:	b510      	push	{r4, lr}
	__asm__ volatile(
    666e:	f04f 0320 	mov.w	r3, #32
    6672:	f3ef 8411 	mrs	r4, BASEPRI
    6676:	f383 8812 	msr	BASEPRI_MAX, r3
    667a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    667e:	4a07      	ldr	r2, [pc, #28]	; (669c <generic_hfclk_stop+0x30>)
    6680:	6813      	ldr	r3, [r2, #0]
    6682:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    6686:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    6688:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    668a:	d402      	bmi.n	6692 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    668c:	2001      	movs	r0, #1
    668e:	f006 fff5 	bl	d67c <nrfx_clock_stop>
	__asm__ volatile(
    6692:	f384 8811 	msr	BASEPRI, r4
    6696:	f3bf 8f6f 	isb	sy
}
    669a:	bd10      	pop	{r4, pc}
    669c:	200017a4 	.word	0x200017a4

000066a0 <z_nrf_clock_control_get_onoff>:
}
    66a0:	4a02      	ldr	r2, [pc, #8]	; (66ac <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    66a2:	b2c3      	uxtb	r3, r0
}
    66a4:	201c      	movs	r0, #28
    66a6:	fb03 2000 	mla	r0, r3, r0, r2
    66aa:	4770      	bx	lr
    66ac:	20001754 	.word	0x20001754

000066b0 <z_nrf_clock_control_lf_on>:
{
    66b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    66b4:	4938      	ldr	r1, [pc, #224]	; (6798 <z_nrf_clock_control_lf_on+0xe8>)
    66b6:	f3bf 8f5b 	dmb	ish
    66ba:	4607      	mov	r7, r0
    66bc:	2201      	movs	r2, #1
    66be:	e851 3f00 	ldrex	r3, [r1]
    66c2:	e841 2000 	strex	r0, r2, [r1]
    66c6:	2800      	cmp	r0, #0
    66c8:	d1f9      	bne.n	66be <z_nrf_clock_control_lf_on+0xe>
    66ca:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    66ce:	b933      	cbnz	r3, 66de <z_nrf_clock_control_lf_on+0x2e>
    66d0:	4932      	ldr	r1, [pc, #200]	; (679c <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    66d2:	4833      	ldr	r0, [pc, #204]	; (67a0 <z_nrf_clock_control_lf_on+0xf0>)
    66d4:	604b      	str	r3, [r1, #4]
    66d6:	60cb      	str	r3, [r1, #12]
    66d8:	608a      	str	r2, [r1, #8]
    66da:	f005 fbf6 	bl	beca <onoff_request>
	switch (start_mode) {
    66de:	1e7b      	subs	r3, r7, #1
    66e0:	2b01      	cmp	r3, #1
    66e2:	d82b      	bhi.n	673c <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    66e4:	2f01      	cmp	r7, #1
    66e6:	d107      	bne.n	66f8 <z_nrf_clock_control_lf_on+0x48>
}

#if NRF_CLOCK_HAS_LFCLKSRCCOPY
NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    66e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    66ec:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    66f0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_XTAL) &&
    66f4:	2b01      	cmp	r3, #1
    66f6:	d021      	beq.n	673c <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    66f8:	f007 fa4c 	bl	db94 <k_is_in_isr>
    66fc:	4605      	mov	r5, r0
    66fe:	b9f8      	cbnz	r0, 6740 <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    6700:	4b28      	ldr	r3, [pc, #160]	; (67a4 <z_nrf_clock_control_lf_on+0xf4>)
    6702:	781b      	ldrb	r3, [r3, #0]
    6704:	b1e3      	cbz	r3, 6740 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    6706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    670a:	2202      	movs	r2, #2
    670c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    6710:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6712:	f8df 8094 	ldr.w	r8, [pc, #148]	; 67a8 <z_nrf_clock_control_lf_on+0xf8>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    6716:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    671a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    671e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6722:	03d2      	lsls	r2, r2, #15
    6724:	d516      	bpl.n	6754 <z_nrf_clock_control_lf_on+0xa4>
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
    6726:	f003 0303 	and.w	r3, r3, #3
    672a:	2b01      	cmp	r3, #1
    672c:	d001      	beq.n	6732 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    672e:	2f01      	cmp	r7, #1
    6730:	d110      	bne.n	6754 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    6732:	b35d      	cbz	r5, 678c <z_nrf_clock_control_lf_on+0xdc>
    6734:	f386 8811 	msr	BASEPRI, r6
    6738:	f3bf 8f6f 	isb	sy
}
    673c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    6740:	f04f 0320 	mov.w	r3, #32
    6744:	f3ef 8611 	mrs	r6, BASEPRI
    6748:	f383 8812 	msr	BASEPRI_MAX, r3
    674c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6750:	2501      	movs	r5, #1
    6752:	e7de      	b.n	6712 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    6754:	b1ad      	cbz	r5, 6782 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    6756:	4630      	mov	r0, r6
    6758:	f7fe fb0e 	bl	4d78 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->NRF_LFCLKSRC);
    675c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_XTAL)
    6760:	2b00      	cmp	r3, #0
    6762:	d1da      	bne.n	671a <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6764:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    6768:	2a00      	cmp	r2, #0
    676a:	d0d6      	beq.n	671a <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    676c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    6770:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    6774:	2301      	movs	r3, #1
    6776:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    677a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    677e:	60a3      	str	r3, [r4, #8]
}
    6780:	e7cb      	b.n	671a <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    6782:	2100      	movs	r1, #0
    6784:	2021      	movs	r0, #33	; 0x21
    6786:	f004 fe7b 	bl	b480 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    678a:	e7e7      	b.n	675c <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    678c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6790:	2202      	movs	r2, #2
    6792:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6796:	e7d1      	b.n	673c <z_nrf_clock_control_lf_on+0x8c>
    6798:	20001750 	.word	0x20001750
    679c:	20001740 	.word	0x20001740
    67a0:	20001770 	.word	0x20001770
    67a4:	2000202c 	.word	0x2000202c
    67a8:	e000e100 	.word	0xe000e100

000067ac <z_impl_uart_irq_rx_disable.constprop.0>:
__syscall void uart_irq_rx_disable(const struct device *dev);

static inline void z_impl_uart_irq_rx_disable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    67ac:	4802      	ldr	r0, [pc, #8]	; (67b8 <z_impl_uart_irq_rx_disable.constprop.0+0xc>)
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_disable != NULL) {
    67ae:	6883      	ldr	r3, [r0, #8]
    67b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    67b2:	b103      	cbz	r3, 67b6 <z_impl_uart_irq_rx_disable.constprop.0+0xa>
		api->irq_rx_disable(dev);
    67b4:	4718      	bx	r3
	}
#else
	ARG_UNUSED(dev);
#endif
}
    67b6:	4770      	bx	lr
    67b8:	0000e200 	.word	0x0000e200

000067bc <uart_poll_out.constprop.0>:


extern void z_impl_uart_poll_out(const struct device * dev, unsigned char out_char);

__pinned_func
static inline void uart_poll_out(const struct device * dev, unsigned char out_char)
    67bc:	4601      	mov	r1, r0
	api->poll_out(dev, out_char);
    67be:	4802      	ldr	r0, [pc, #8]	; (67c8 <uart_poll_out.constprop.0+0xc>)
    67c0:	6883      	ldr	r3, [r0, #8]
    67c2:	685b      	ldr	r3, [r3, #4]
    67c4:	4718      	bx	r3
    67c6:	bf00      	nop
    67c8:	0000e200 	.word	0x0000e200

000067cc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    67cc:	b508      	push	{r3, lr}
    67ce:	4807      	ldr	r0, [pc, #28]	; (67ec <uart_console_init+0x20>)
    67d0:	f007 f96b 	bl	daaa <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    67d4:	b138      	cbz	r0, 67e6 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    67d6:	4806      	ldr	r0, [pc, #24]	; (67f0 <uart_console_init+0x24>)
    67d8:	f7fe fe66 	bl	54a8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    67dc:	4804      	ldr	r0, [pc, #16]	; (67f0 <uart_console_init+0x24>)
    67de:	f7fc fa55 	bl	2c8c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    67e2:	2000      	movs	r0, #0
}
    67e4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    67e6:	f06f 0012 	mvn.w	r0, #18
    67ea:	e7fb      	b.n	67e4 <uart_console_init+0x18>
    67ec:	0000e200 	.word	0x0000e200
    67f0:	0000cb69 	.word	0x0000cb69

000067f4 <del_char>:
{
    67f4:	b538      	push	{r3, r4, r5, lr}
    67f6:	4604      	mov	r4, r0
    67f8:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    67fa:	2008      	movs	r0, #8
    67fc:	f7ff ffde 	bl	67bc <uart_poll_out.constprop.0>
	if (end == 0U) {
    6800:	b93d      	cbnz	r5, 6812 <del_char+0x1e>
		uart_poll_out(uart_console_dev, ' ');
    6802:	2020      	movs	r0, #32
    6804:	f7ff ffda 	bl	67bc <uart_poll_out.constprop.0>
}
    6808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart_poll_out(uart_console_dev, '\b');
    680c:	2008      	movs	r0, #8
    680e:	f7ff bfd5 	b.w	67bc <uart_poll_out.constprop.0>
	printk("\x1b[s");
    6812:	480a      	ldr	r0, [pc, #40]	; (683c <del_char+0x48>)
    6814:	f005 f8ff 	bl	ba16 <printk>
	while (end-- > 0) {
    6818:	4425      	add	r5, r4
    681a:	b2ed      	uxtb	r5, r5
		*pos = *(pos + 1);
    681c:	7860      	ldrb	r0, [r4, #1]
    681e:	f804 0b01 	strb.w	r0, [r4], #1
		uart_poll_out(uart_console_dev, *(pos++));
    6822:	f7ff ffcb 	bl	67bc <uart_poll_out.constprop.0>
	while (end-- > 0) {
    6826:	b2e3      	uxtb	r3, r4
    6828:	42ab      	cmp	r3, r5
    682a:	d1f7      	bne.n	681c <del_char+0x28>
	uart_poll_out(uart_console_dev, ' ');
    682c:	2020      	movs	r0, #32
    682e:	f7ff ffc5 	bl	67bc <uart_poll_out.constprop.0>
}
    6832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printk("\x1b[u");
    6836:	4802      	ldr	r0, [pc, #8]	; (6840 <del_char+0x4c>)
    6838:	f005 b8ed 	b.w	ba16 <printk>
    683c:	0000f651 	.word	0x0000f651
    6840:	0000f655 	.word	0x0000f655

00006844 <uart_console_isr>:
{
    6844:	e92d 4eff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    6848:	4e99      	ldr	r6, [pc, #612]	; (6ab0 <uart_console_isr+0x26c>)
		if (!cmd) {
    684a:	4f9a      	ldr	r7, [pc, #616]	; (6ab4 <uart_console_isr+0x270>)
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    684c:	68b3      	ldr	r3, [r6, #8]
    684e:	9301      	str	r3, [sp, #4]
    6850:	9b01      	ldr	r3, [sp, #4]
    6852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6854:	2b00      	cmp	r3, #0
    6856:	f040 81be 	bne.w	6bd6 <uart_console_isr+0x392>
	const struct uart_driver_api *api =
    685a:	68b4      	ldr	r4, [r6, #8]
	if (api->irq_is_pending == NULL) {
    685c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    685e:	2b00      	cmp	r3, #0
    6860:	f040 81bf 	bne.w	6be2 <uart_console_isr+0x39e>
	if (api->irq_rx_ready == NULL) {
    6864:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6866:	b933      	cbnz	r3, 6876 <uart_console_isr+0x32>
	if (api->fifo_read == NULL) {
    6868:	69a3      	ldr	r3, [r4, #24]
    686a:	b94b      	cbnz	r3, 6880 <uart_console_isr+0x3c>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
    686c:	f7ff ff9e 	bl	67ac <z_impl_uart_irq_rx_disable.constprop.0>
}
    6870:	b004      	add	sp, #16
    6872:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
	return api->irq_rx_ready(dev);
    6876:	4630      	mov	r0, r6
    6878:	4798      	blx	r3
		if (!uart_irq_rx_ready(uart_console_dev)) {
    687a:	2800      	cmp	r0, #0
    687c:	d0e8      	beq.n	6850 <uart_console_isr+0xc>
    687e:	e7f3      	b.n	6868 <uart_console_isr+0x24>
	return api->fifo_read(dev, rx_data, size);
    6880:	2201      	movs	r2, #1
    6882:	f10d 010f 	add.w	r1, sp, #15
    6886:	4630      	mov	r0, r6
    6888:	4798      	blx	r3
	if (rx < 0) {
    688a:	2800      	cmp	r0, #0
    688c:	dbee      	blt.n	686c <uart_console_isr+0x28>
		if (!cmd) {
    688e:	683b      	ldr	r3, [r7, #0]
    6890:	b393      	cbz	r3, 68f8 <uart_console_isr+0xb4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6892:	f3bf 8f5b 	dmb	ish
    6896:	4c88      	ldr	r4, [pc, #544]	; (6ab8 <uart_console_isr+0x274>)
    6898:	6823      	ldr	r3, [r4, #0]
    689a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    689e:	f013 0f02 	tst.w	r3, #2
    68a2:	4623      	mov	r3, r4
    68a4:	f000 80d5 	beq.w	6a52 <uart_console_isr+0x20e>
			handle_ansi(byte, cmd->line);
    68a8:	f89d 500f 	ldrb.w	r5, [sp, #15]
    68ac:	f8d7 9000 	ldr.w	r9, [r7]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    68b0:	f3bf 8f5b 	dmb	ish
    68b4:	e853 2f00 	ldrex	r2, [r3]
    68b8:	f022 0104 	bic.w	r1, r2, #4
    68bc:	e843 1000 	strex	r0, r1, [r3]
    68c0:	2800      	cmp	r0, #0
    68c2:	d1f7      	bne.n	68b4 <uart_console_isr+0x70>
    68c4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    68c8:	0751      	lsls	r1, r2, #29
    68ca:	d529      	bpl.n	6920 <uart_console_isr+0xdc>
    68cc:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
		if (isdigit(byte) == 0) {
    68d0:	f1bb 0f09 	cmp.w	fp, #9
    68d4:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 6abc <uart_console_isr+0x278>
    68d8:	d918      	bls.n	690c <uart_console_isr+0xc8>
			ansi_val = 1U;
    68da:	2301      	movs	r3, #1
    68dc:	f8ca 3000 	str.w	r3, [sl]
	switch (byte) {
    68e0:	2d48      	cmp	r5, #72	; 0x48
    68e2:	d85b      	bhi.n	699c <uart_console_isr+0x158>
    68e4:	2d42      	cmp	r5, #66	; 0x42
    68e6:	d95b      	bls.n	69a0 <uart_console_isr+0x15c>
    68e8:	3d43      	subs	r5, #67	; 0x43
    68ea:	2d05      	cmp	r5, #5
    68ec:	d858      	bhi.n	69a0 <uart_console_isr+0x15c>
    68ee:	e8df f005 	tbb	[pc, r5]
    68f2:	6475      	.short	0x6475
    68f4:	84579357 	.word	0x84579357
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    68f8:	4b71      	ldr	r3, [pc, #452]	; (6ac0 <uart_console_isr+0x27c>)
    68fa:	6818      	ldr	r0, [r3, #0]
	return z_impl_k_queue_get(queue, timeout);
    68fc:	2200      	movs	r2, #0
    68fe:	2300      	movs	r3, #0
    6900:	f004 f906 	bl	ab10 <z_impl_k_queue_get>
    6904:	6038      	str	r0, [r7, #0]
			if (!cmd) {
    6906:	2800      	cmp	r0, #0
    6908:	d1c3      	bne.n	6892 <uart_console_isr+0x4e>
    690a:	e7b1      	b.n	6870 <uart_console_isr+0x2c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    690c:	2108      	movs	r1, #8
    690e:	4620      	mov	r0, r4
    6910:	f006 f91b 	bl	cb4a <atomic_or>
		ansi_val_2 = 0U;
    6914:	4b6b      	ldr	r3, [pc, #428]	; (6ac4 <uart_console_isr+0x280>)
		ansi_val = byte - '0';
    6916:	f8ca b000 	str.w	fp, [sl]
		ansi_val_2 = 0U;
    691a:	2200      	movs	r2, #0
    691c:	601a      	str	r2, [r3, #0]
		return;
    691e:	e797      	b.n	6850 <uart_console_isr+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6920:	f3bf 8f5b 	dmb	ish
    6924:	6823      	ldr	r3, [r4, #0]
    6926:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    692a:	071a      	lsls	r2, r3, #28
    692c:	d5d8      	bpl.n	68e0 <uart_console_isr+0x9c>
    692e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
		if (isdigit(byte) != 0) {
    6932:	2b09      	cmp	r3, #9
    6934:	d810      	bhi.n	6958 <uart_console_isr+0x114>
    6936:	f3bf 8f5b 	dmb	ish
    693a:	6823      	ldr	r3, [r4, #0]
    693c:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    6940:	f013 0f10 	tst.w	r3, #16
				ansi_val_2 += byte - '0';
    6944:	bf14      	ite	ne
    6946:	4a5f      	ldrne	r2, [pc, #380]	; (6ac4 <uart_console_isr+0x280>)
				ansi_val += byte - '0';
    6948:	4a5c      	ldreq	r2, [pc, #368]	; (6abc <uart_console_isr+0x278>)
				ansi_val *= 10U;
    694a:	6813      	ldr	r3, [r2, #0]
    694c:	210a      	movs	r1, #10
				ansi_val += byte - '0';
    694e:	fb01 5303 	mla	r3, r1, r3, r5
    6952:	3b30      	subs	r3, #48	; 0x30
    6954:	6013      	str	r3, [r2, #0]
    6956:	e77b      	b.n	6850 <uart_console_isr+0xc>
		if (byte == ';' &&
    6958:	2d3b      	cmp	r5, #59	; 0x3b
    695a:	d018      	beq.n	698e <uart_console_isr+0x14a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    695c:	f3bf 8f5b 	dmb	ish
    6960:	e854 3f00 	ldrex	r3, [r4]
    6964:	f023 0308 	bic.w	r3, r3, #8
    6968:	e844 3200 	strex	r2, r3, [r4]
    696c:	2a00      	cmp	r2, #0
    696e:	d1f7      	bne.n	6960 <uart_console_isr+0x11c>
    6970:	f3bf 8f5b 	dmb	ish
    6974:	f3bf 8f5b 	dmb	ish
    6978:	e854 3f00 	ldrex	r3, [r4]
    697c:	f023 0310 	bic.w	r3, r3, #16
    6980:	e844 3200 	strex	r2, r3, [r4]
    6984:	2a00      	cmp	r2, #0
    6986:	d1f7      	bne.n	6978 <uart_console_isr+0x134>
    6988:	f3bf 8f5b 	dmb	ish
    698c:	e7a8      	b.n	68e0 <uart_console_isr+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    698e:	2110      	movs	r1, #16
    6990:	4620      	mov	r0, r4
    6992:	f006 f8da 	bl	cb4a <atomic_or>
    6996:	06c3      	lsls	r3, r0, #27
    6998:	d4e0      	bmi.n	695c <uart_console_isr+0x118>
    699a:	e759      	b.n	6850 <uart_console_isr+0xc>
	switch (byte) {
    699c:	2d7e      	cmp	r5, #126	; 0x7e
    699e:	d044      	beq.n	6a2a <uart_console_isr+0x1e6>
    69a0:	f3bf 8f5b 	dmb	ish
    69a4:	e854 3f00 	ldrex	r3, [r4]
    69a8:	f023 0302 	bic.w	r3, r3, #2
    69ac:	e844 3200 	strex	r2, r3, [r4]
    69b0:	2a00      	cmp	r2, #0
    69b2:	d1f7      	bne.n	69a4 <uart_console_isr+0x160>
    69b4:	f3bf 8f5b 	dmb	ish
    69b8:	e74a      	b.n	6850 <uart_console_isr+0xc>
		if (ansi_val > cur) {
    69ba:	4843      	ldr	r0, [pc, #268]	; (6ac8 <uart_console_isr+0x284>)
    69bc:	4a3f      	ldr	r2, [pc, #252]	; (6abc <uart_console_isr+0x278>)
    69be:	7803      	ldrb	r3, [r0, #0]
    69c0:	6811      	ldr	r1, [r2, #0]
    69c2:	428b      	cmp	r3, r1
    69c4:	d3ec      	bcc.n	69a0 <uart_console_isr+0x15c>
		end += ansi_val;
    69c6:	4d41      	ldr	r5, [pc, #260]	; (6acc <uart_console_isr+0x288>)
    69c8:	782a      	ldrb	r2, [r5, #0]
		cur -= ansi_val;
    69ca:	1a5b      	subs	r3, r3, r1
		end += ansi_val;
    69cc:	fa52 f281 	uxtab	r2, r2, r1
		cur -= ansi_val;
    69d0:	7003      	strb	r3, [r0, #0]
	printk("\x1b[%uD", count);
    69d2:	483f      	ldr	r0, [pc, #252]	; (6ad0 <uart_console_isr+0x28c>)
		end += ansi_val;
    69d4:	702a      	strb	r2, [r5, #0]
	printk("\x1b[%uC", count);
    69d6:	f005 f81e 	bl	ba16 <printk>
}
    69da:	e7e1      	b.n	69a0 <uart_console_isr+0x15c>
		if (ansi_val > end) {
    69dc:	483b      	ldr	r0, [pc, #236]	; (6acc <uart_console_isr+0x288>)
    69de:	4b37      	ldr	r3, [pc, #220]	; (6abc <uart_console_isr+0x278>)
    69e0:	7802      	ldrb	r2, [r0, #0]
    69e2:	6819      	ldr	r1, [r3, #0]
    69e4:	428a      	cmp	r2, r1
    69e6:	d3db      	bcc.n	69a0 <uart_console_isr+0x15c>
		end -= ansi_val;
    69e8:	b2cb      	uxtb	r3, r1
    69ea:	1ad2      	subs	r2, r2, r3
    69ec:	7002      	strb	r2, [r0, #0]
		cur += ansi_val;
    69ee:	4a36      	ldr	r2, [pc, #216]	; (6ac8 <uart_console_isr+0x284>)
    69f0:	7810      	ldrb	r0, [r2, #0]
    69f2:	4403      	add	r3, r0
    69f4:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uC", count);
    69f6:	4837      	ldr	r0, [pc, #220]	; (6ad4 <uart_console_isr+0x290>)
    69f8:	e7ed      	b.n	69d6 <uart_console_isr+0x192>
		if (!cur) {
    69fa:	4d33      	ldr	r5, [pc, #204]	; (6ac8 <uart_console_isr+0x284>)
    69fc:	7829      	ldrb	r1, [r5, #0]
    69fe:	2900      	cmp	r1, #0
    6a00:	d0ce      	beq.n	69a0 <uart_console_isr+0x15c>
	printk("\x1b[%uD", count);
    6a02:	4833      	ldr	r0, [pc, #204]	; (6ad0 <uart_console_isr+0x28c>)
    6a04:	f005 f807 	bl	ba16 <printk>
		end += cur;
    6a08:	4a30      	ldr	r2, [pc, #192]	; (6acc <uart_console_isr+0x288>)
		cur += end;
    6a0a:	7813      	ldrb	r3, [r2, #0]
    6a0c:	7829      	ldrb	r1, [r5, #0]
    6a0e:	440b      	add	r3, r1
    6a10:	7013      	strb	r3, [r2, #0]
		end = 0U;
    6a12:	2300      	movs	r3, #0
    6a14:	702b      	strb	r3, [r5, #0]
		break;
    6a16:	e7c3      	b.n	69a0 <uart_console_isr+0x15c>
		if (!end) {
    6a18:	4d2c      	ldr	r5, [pc, #176]	; (6acc <uart_console_isr+0x288>)
    6a1a:	7829      	ldrb	r1, [r5, #0]
    6a1c:	2900      	cmp	r1, #0
    6a1e:	d0bf      	beq.n	69a0 <uart_console_isr+0x15c>
	printk("\x1b[%uC", count);
    6a20:	482c      	ldr	r0, [pc, #176]	; (6ad4 <uart_console_isr+0x290>)
    6a22:	f004 fff8 	bl	ba16 <printk>
		cur += end;
    6a26:	4a28      	ldr	r2, [pc, #160]	; (6ac8 <uart_console_isr+0x284>)
    6a28:	e7ef      	b.n	6a0a <uart_console_isr+0x1c6>
		if (!end) {
    6a2a:	4d28      	ldr	r5, [pc, #160]	; (6acc <uart_console_isr+0x288>)
    6a2c:	782b      	ldrb	r3, [r5, #0]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d0b6      	beq.n	69a0 <uart_console_isr+0x15c>
	printk("\x1b[%uC", count);
    6a32:	4828      	ldr	r0, [pc, #160]	; (6ad4 <uart_console_isr+0x290>)
    6a34:	2101      	movs	r1, #1
    6a36:	f004 ffee 	bl	ba16 <printk>
		del_char(&line[cur], --end);
    6a3a:	4a23      	ldr	r2, [pc, #140]	; (6ac8 <uart_console_isr+0x284>)
    6a3c:	7829      	ldrb	r1, [r5, #0]
    6a3e:	7810      	ldrb	r0, [r2, #0]
			handle_ansi(byte, cmd->line);
    6a40:	f109 0905 	add.w	r9, r9, #5
		del_char(&line[cur], --end);
    6a44:	3901      	subs	r1, #1
    6a46:	b2c9      	uxtb	r1, r1
    6a48:	4448      	add	r0, r9
    6a4a:	7029      	strb	r1, [r5, #0]
    6a4c:	f7ff fed2 	bl	67f4 <del_char>
		break;
    6a50:	e7a6      	b.n	69a0 <uart_console_isr+0x15c>
    6a52:	f3bf 8f5b 	dmb	ish
    6a56:	e854 3f00 	ldrex	r3, [r4]
    6a5a:	f023 0201 	bic.w	r2, r3, #1
    6a5e:	e844 2100 	strex	r1, r2, [r4]
    6a62:	2900      	cmp	r1, #0
    6a64:	d1f7      	bne.n	6a56 <uart_console_isr+0x212>
    6a66:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    6a6a:	f013 0f01 	tst.w	r3, #1
    6a6e:	f89d 500f 	ldrb.w	r5, [sp, #15]
    6a72:	d00b      	beq.n	6a8c <uart_console_isr+0x248>
			if (byte == ANSI_ESC) {
    6a74:	2d5b      	cmp	r5, #91	; 0x5b
    6a76:	f47f aeeb 	bne.w	6850 <uart_console_isr+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6a7a:	2102      	movs	r1, #2
    6a7c:	4620      	mov	r0, r4
    6a7e:	f006 f864 	bl	cb4a <atomic_or>
    6a82:	2104      	movs	r1, #4
    6a84:	4620      	mov	r0, r4
    6a86:	f006 f860 	bl	cb4a <atomic_or>
}
    6a8a:	e6e1      	b.n	6850 <uart_console_isr+0xc>
	return (int)((((unsigned)c) >= ' ') &&
    6a8c:	f1a5 0320 	sub.w	r3, r5, #32
		if (isprint(byte) == 0) {
    6a90:	2b5e      	cmp	r3, #94	; 0x5e
    6a92:	d96e      	bls.n	6b72 <uart_console_isr+0x32e>
			switch (byte) {
    6a94:	2d0d      	cmp	r5, #13
    6a96:	f8df 9040 	ldr.w	r9, [pc, #64]	; 6ad8 <uart_console_isr+0x294>
    6a9a:	d81f      	bhi.n	6adc <uart_console_isr+0x298>
    6a9c:	2d07      	cmp	r5, #7
    6a9e:	d92e      	bls.n	6afe <uart_console_isr+0x2ba>
    6aa0:	3d08      	subs	r5, #8
    6aa2:	2d05      	cmp	r5, #5
    6aa4:	d82b      	bhi.n	6afe <uart_console_isr+0x2ba>
    6aa6:	e8df f005 	tbb	[pc, r5]
    6aaa:	531d      	.short	0x531d
    6aac:	382a2a34 	.word	0x382a2a34
    6ab0:	0000e200 	.word	0x0000e200
    6ab4:	200017a8 	.word	0x200017a8
    6ab8:	200017b4 	.word	0x200017b4
    6abc:	200017b0 	.word	0x200017b0
    6ac0:	200017c0 	.word	0x200017c0
    6ac4:	200017ac 	.word	0x200017ac
    6ac8:	20001b82 	.word	0x20001b82
    6acc:	20001b81 	.word	0x20001b81
    6ad0:	0000f659 	.word	0x0000f659
    6ad4:	0000f65f 	.word	0x0000f65f
    6ad8:	20001b80 	.word	0x20001b80
    6adc:	2d1b      	cmp	r5, #27
    6ade:	d013      	beq.n	6b08 <uart_console_isr+0x2c4>
    6ae0:	2d7f      	cmp	r5, #127	; 0x7f
    6ae2:	d10c      	bne.n	6afe <uart_console_isr+0x2ba>
				if (cur > 0) {
    6ae4:	4942      	ldr	r1, [pc, #264]	; (6bf0 <uart_console_isr+0x3ac>)
    6ae6:	780b      	ldrb	r3, [r1, #0]
    6ae8:	b14b      	cbz	r3, 6afe <uart_console_isr+0x2ba>
					del_char(&cmd->line[--cur], end);
    6aea:	3b01      	subs	r3, #1
    6aec:	b2db      	uxtb	r3, r3
    6aee:	700b      	strb	r3, [r1, #0]
    6af0:	1d58      	adds	r0, r3, #5
    6af2:	683a      	ldr	r2, [r7, #0]
    6af4:	4b3f      	ldr	r3, [pc, #252]	; (6bf4 <uart_console_isr+0x3b0>)
    6af6:	4410      	add	r0, r2
    6af8:	7819      	ldrb	r1, [r3, #0]
    6afa:	f7ff fe7b 	bl	67f4 <del_char>
			last_char = byte;
    6afe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b02:	f889 3000 	strb.w	r3, [r9]
			continue;
    6b06:	e6a3      	b.n	6850 <uart_console_isr+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6b08:	2101      	movs	r1, #1
    6b0a:	4620      	mov	r0, r4
    6b0c:	f006 f81d 	bl	cb4a <atomic_or>
}
    6b10:	e7f5      	b.n	6afe <uart_console_isr+0x2ba>
				if (last_char == '\r') {
    6b12:	f899 3000 	ldrb.w	r3, [r9]
    6b16:	2b0d      	cmp	r3, #13
    6b18:	d0f1      	beq.n	6afe <uart_console_isr+0x2ba>
				cmd->line[cur + end] = '\0';
    6b1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 6bf0 <uart_console_isr+0x3ac>
    6b1e:	4d35      	ldr	r5, [pc, #212]	; (6bf4 <uart_console_isr+0x3b0>)
    6b20:	f89a 1000 	ldrb.w	r1, [sl]
    6b24:	683b      	ldr	r3, [r7, #0]
    6b26:	782a      	ldrb	r2, [r5, #0]
    6b28:	440b      	add	r3, r1
    6b2a:	4413      	add	r3, r2
    6b2c:	2400      	movs	r4, #0
    6b2e:	715c      	strb	r4, [r3, #5]
				uart_poll_out(uart_console_dev, '\r');
    6b30:	200d      	movs	r0, #13
    6b32:	f7ff fe43 	bl	67bc <uart_poll_out.constprop.0>
				uart_poll_out(uart_console_dev, '\n');
    6b36:	200a      	movs	r0, #10
    6b38:	f7ff fe40 	bl	67bc <uart_poll_out.constprop.0>
				k_fifo_put(lines_queue, cmd);
    6b3c:	4b2e      	ldr	r3, [pc, #184]	; (6bf8 <uart_console_isr+0x3b4>)
    6b3e:	6839      	ldr	r1, [r7, #0]
    6b40:	6818      	ldr	r0, [r3, #0]
				cur = 0U;
    6b42:	f88a 4000 	strb.w	r4, [sl]
				end = 0U;
    6b46:	702c      	strb	r4, [r5, #0]
				k_fifo_put(lines_queue, cmd);
    6b48:	f007 f8b3 	bl	dcb2 <k_queue_append>
				cmd = NULL;
    6b4c:	603c      	str	r4, [r7, #0]
				break;
    6b4e:	e7d6      	b.n	6afe <uart_console_isr+0x2ba>
				if (completion_cb && !end) {
    6b50:	4b2a      	ldr	r3, [pc, #168]	; (6bfc <uart_console_isr+0x3b8>)
    6b52:	681b      	ldr	r3, [r3, #0]
    6b54:	2b00      	cmp	r3, #0
    6b56:	d0d2      	beq.n	6afe <uart_console_isr+0x2ba>
    6b58:	4a26      	ldr	r2, [pc, #152]	; (6bf4 <uart_console_isr+0x3b0>)
    6b5a:	7812      	ldrb	r2, [r2, #0]
    6b5c:	2a00      	cmp	r2, #0
    6b5e:	d1ce      	bne.n	6afe <uart_console_isr+0x2ba>
					cur += completion_cb(cmd->line, cur);
    6b60:	4c23      	ldr	r4, [pc, #140]	; (6bf0 <uart_console_isr+0x3ac>)
    6b62:	6838      	ldr	r0, [r7, #0]
    6b64:	7821      	ldrb	r1, [r4, #0]
    6b66:	3005      	adds	r0, #5
    6b68:	4798      	blx	r3
    6b6a:	7823      	ldrb	r3, [r4, #0]
    6b6c:	4418      	add	r0, r3
    6b6e:	7020      	strb	r0, [r4, #0]
    6b70:	e7c5      	b.n	6afe <uart_console_isr+0x2ba>
		if (cur + end < sizeof(cmd->line) - 1) {
    6b72:	4a20      	ldr	r2, [pc, #128]	; (6bf4 <uart_console_isr+0x3b0>)
    6b74:	4b1e      	ldr	r3, [pc, #120]	; (6bf0 <uart_console_isr+0x3ac>)
    6b76:	7814      	ldrb	r4, [r2, #0]
    6b78:	f893 b000 	ldrb.w	fp, [r3]
    6b7c:	eb04 020b 	add.w	r2, r4, fp
    6b80:	2a7e      	cmp	r2, #126	; 0x7e
    6b82:	f73f ae65 	bgt.w	6850 <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    6b86:	f8d7 a000 	ldr.w	sl, [r7]
    6b8a:	f10b 0201 	add.w	r2, fp, #1
	uart_poll_out(uart_console_dev, c);
    6b8e:	4628      	mov	r0, r5
			insert_char(&cmd->line[cur++], byte, end);
    6b90:	701a      	strb	r2, [r3, #0]
	uart_poll_out(uart_console_dev, c);
    6b92:	f7ff fe13 	bl	67bc <uart_poll_out.constprop.0>
	if (end == 0U) {
    6b96:	eb0a 030b 	add.w	r3, sl, fp
    6b9a:	b90c      	cbnz	r4, 6ba0 <uart_console_isr+0x35c>
		*pos = c;
    6b9c:	715d      	strb	r5, [r3, #5]
		return;
    6b9e:	e657      	b.n	6850 <uart_console_isr+0xc>
	tmp = *pos;
    6ba0:	f893 9005 	ldrb.w	r9, [r3, #5]
	printk("\x1b[s");
    6ba4:	4816      	ldr	r0, [pc, #88]	; (6c00 <uart_console_isr+0x3bc>)
	*(pos++) = c;
    6ba6:	715d      	strb	r5, [r3, #5]
	printk("\x1b[s");
    6ba8:	f004 ff35 	bl	ba16 <printk>
	*(pos++) = c;
    6bac:	f10b 0b06 	add.w	fp, fp, #6
	while (end-- > 0) {
    6bb0:	3c01      	subs	r4, #1
	*(pos++) = c;
    6bb2:	44da      	add	sl, fp
	while (end-- > 0) {
    6bb4:	b2e4      	uxtb	r4, r4
    6bb6:	3c01      	subs	r4, #1
		uart_poll_out(uart_console_dev, tmp);
    6bb8:	4648      	mov	r0, r9
	while (end-- > 0) {
    6bba:	b2e4      	uxtb	r4, r4
		uart_poll_out(uart_console_dev, tmp);
    6bbc:	f7ff fdfe 	bl	67bc <uart_poll_out.constprop.0>
		c = *pos;
    6bc0:	464b      	mov	r3, r9
	while (end-- > 0) {
    6bc2:	2cff      	cmp	r4, #255	; 0xff
		c = *pos;
    6bc4:	f89a 9000 	ldrb.w	r9, [sl]
		*(pos++) = tmp;
    6bc8:	f80a 3b01 	strb.w	r3, [sl], #1
	while (end-- > 0) {
    6bcc:	d1f3      	bne.n	6bb6 <uart_console_isr+0x372>
	printk("\x1b[u");
    6bce:	480d      	ldr	r0, [pc, #52]	; (6c04 <uart_console_isr+0x3c0>)
    6bd0:	f004 ff21 	bl	ba16 <printk>
}
    6bd4:	e63c      	b.n	6850 <uart_console_isr+0xc>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    6bd6:	4630      	mov	r0, r6
    6bd8:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    6bda:	2800      	cmp	r0, #0
    6bdc:	f47f ae3d 	bne.w	685a <uart_console_isr+0x16>
    6be0:	e646      	b.n	6870 <uart_console_isr+0x2c>
	return api->irq_is_pending(dev);
    6be2:	4630      	mov	r0, r6
    6be4:	4798      	blx	r3
    6be6:	2800      	cmp	r0, #0
    6be8:	f47f ae3c 	bne.w	6864 <uart_console_isr+0x20>
    6bec:	e640      	b.n	6870 <uart_console_isr+0x2c>
    6bee:	bf00      	nop
    6bf0:	20001b82 	.word	0x20001b82
    6bf4:	20001b81 	.word	0x20001b81
    6bf8:	200017bc 	.word	0x200017bc
    6bfc:	200017b8 	.word	0x200017b8
    6c00:	0000f651 	.word	0x0000f651
    6c04:	0000f655 	.word	0x0000f655

00006c08 <uart_register_input>:
	avail_queue = avail;
    6c08:	4b15      	ldr	r3, [pc, #84]	; (6c60 <uart_register_input+0x58>)
{
    6c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	avail_queue = avail;
    6c0c:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    6c0e:	4b15      	ldr	r3, [pc, #84]	; (6c64 <uart_register_input+0x5c>)
    6c10:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    6c12:	4b15      	ldr	r3, [pc, #84]	; (6c68 <uart_register_input+0x60>)
    6c14:	601a      	str	r2, [r3, #0]
    6c16:	f7ff fdc9 	bl	67ac <z_impl_uart_irq_rx_disable.constprop.0>
	const struct uart_driver_api *api =
    6c1a:	4d14      	ldr	r5, [pc, #80]	; (6c6c <uart_register_input+0x64>)
    6c1c:	68ac      	ldr	r4, [r5, #8]
	if (api->irq_tx_disable != NULL) {
    6c1e:	6a23      	ldr	r3, [r4, #32]
    6c20:	b10b      	cbz	r3, 6c26 <uart_register_input+0x1e>
		api->irq_tx_disable(dev);
    6c22:	4628      	mov	r0, r5
    6c24:	4798      	blx	r3
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    6c26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6c28:	b11b      	cbz	r3, 6c32 <uart_register_input+0x2a>
		api->irq_callback_set(dev, cb, user_data);
    6c2a:	4911      	ldr	r1, [pc, #68]	; (6c70 <uart_register_input+0x68>)
    6c2c:	480f      	ldr	r0, [pc, #60]	; (6c6c <uart_register_input+0x64>)
    6c2e:	2200      	movs	r2, #0
    6c30:	4798      	blx	r3
	return api->irq_rx_ready(dev);
    6c32:	4e0e      	ldr	r6, [pc, #56]	; (6c6c <uart_register_input+0x64>)
	if (api->irq_rx_ready == NULL) {
    6c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6c36:	b14b      	cbz	r3, 6c4c <uart_register_input+0x44>
	return api->irq_rx_ready(dev);
    6c38:	4630      	mov	r0, r6
    6c3a:	4798      	blx	r3
	while (uart_irq_rx_ready(uart_console_dev)) {
    6c3c:	b930      	cbnz	r0, 6c4c <uart_register_input+0x44>
	if (api->irq_rx_enable != NULL) {
    6c3e:	68ab      	ldr	r3, [r5, #8]
    6c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c42:	b10b      	cbz	r3, 6c48 <uart_register_input+0x40>
		api->irq_rx_enable(dev);
    6c44:	4809      	ldr	r0, [pc, #36]	; (6c6c <uart_register_input+0x64>)
    6c46:	4798      	blx	r3
}
    6c48:	b002      	add	sp, #8
    6c4a:	bd70      	pop	{r4, r5, r6, pc}
	if (api->fifo_read == NULL) {
    6c4c:	69a3      	ldr	r3, [r4, #24]
    6c4e:	2b00      	cmp	r3, #0
    6c50:	d0f0      	beq.n	6c34 <uart_register_input+0x2c>
	return api->fifo_read(dev, rx_data, size);
    6c52:	2201      	movs	r2, #1
    6c54:	f10d 0107 	add.w	r1, sp, #7
    6c58:	4630      	mov	r0, r6
    6c5a:	4798      	blx	r3
    6c5c:	e7ea      	b.n	6c34 <uart_register_input+0x2c>
    6c5e:	bf00      	nop
    6c60:	200017c0 	.word	0x200017c0
    6c64:	200017bc 	.word	0x200017bc
    6c68:	200017b8 	.word	0x200017b8
    6c6c:	0000e200 	.word	0x0000e200
    6c70:	00006845 	.word	0x00006845

00006c74 <writeBuffer>:
	// set higher column address (10H - 1FH) => 0x10 | (2 >> 4) = 10
	sendCommand(dev, 0x10 + (x >> 4));
}

static void writeBuffer(const struct device *dev)
{
    6c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const sh1106_config_t* config=dev->config;
	for (uint8_t page = 0; page < 8; page++) {
		i2c_tx_buf_temp[0] = TYPE_DATA;
    6c78:	4f13      	ldr	r7, [pc, #76]	; (6cc8 <writeBuffer+0x54>)
	const sh1106_config_t* config=dev->config;
    6c7a:	6846      	ldr	r6, [r0, #4]
{
    6c7c:	4604      	mov	r4, r0
	const sh1106_config_t* config=dev->config;
    6c7e:	2500      	movs	r5, #0
		i2c_tx_buf_temp[0] = TYPE_DATA;
    6c80:	f04f 0840 	mov.w	r8, #64	; 0x40
		memcpy(&i2c_tx_buf_temp[1], FRAME_BUFFER[page], 128);
    6c84:	6921      	ldr	r1, [r4, #16]
    6c86:	4811      	ldr	r0, [pc, #68]	; (6ccc <writeBuffer+0x58>)
		i2c_tx_buf_temp[0] = TYPE_DATA;
    6c88:	f887 8000 	strb.w	r8, [r7]
		memcpy(&i2c_tx_buf_temp[1], FRAME_BUFFER[page], 128);
    6c8c:	2280      	movs	r2, #128	; 0x80
    6c8e:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
    6c92:	f005 fc23 	bl	c4dc <memcpy>
	sendCommand(dev, 0xB0 + (y >> 3));
    6c96:	f005 011f 	and.w	r1, r5, #31
    6c9a:	3950      	subs	r1, #80	; 0x50
    6c9c:	6860      	ldr	r0, [r4, #4]
    6c9e:	b2c9      	uxtb	r1, r1
    6ca0:	f005 ff7e 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, (x & 0x0F));
    6ca4:	6860      	ldr	r0, [r4, #4]
    6ca6:	2102      	movs	r1, #2
    6ca8:	f005 ff7a 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, 0x10 + (x >> 4));
    6cac:	6860      	ldr	r0, [r4, #4]
    6cae:	2110      	movs	r1, #16
    6cb0:	f005 ff76 	bl	cba0 <sendCommand.isra.0>
	for (uint8_t page = 0; page < 8; page++) {
    6cb4:	3501      	adds	r5, #1

		setCursorPos(dev, 0, page * 8);
		i2c_write_dt(&config->bus, i2c_tx_buf_temp, 129);
    6cb6:	4904      	ldr	r1, [pc, #16]	; (6cc8 <writeBuffer+0x54>)
    6cb8:	2281      	movs	r2, #129	; 0x81
    6cba:	4630      	mov	r0, r6
    6cbc:	f005 ff60 	bl	cb80 <i2c_write_dt.isra.0>
	for (uint8_t page = 0; page < 8; page++) {
    6cc0:	2d08      	cmp	r5, #8
    6cc2:	d1df      	bne.n	6c84 <writeBuffer+0x10>
	}
}
    6cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cc8:	20001f83 	.word	0x20001f83
    6ccc:	20001f84 	.word	0x20001f84

00006cd0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    6cd0:	b530      	push	{r4, r5, lr}
	return port->config;
    6cd2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6cd4:	7b05      	ldrb	r5, [r0, #12]
    6cd6:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    6cda:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    6cde:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6ce0:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    6ce4:	d105      	bne.n	6cf2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    6ce6:	4620      	mov	r0, r4
    6ce8:	f001 fe3e 	bl	8968 <nrfx_gpiote_trigger_disable>

		return 0;
    6cec:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    6cee:	b005      	add	sp, #20
    6cf0:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    6cf2:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    6cf4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    6cf8:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    6cfc:	d114      	bne.n	6d28 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    6cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    6d02:	bf0c      	ite	eq
    6d04:	2304      	moveq	r3, #4
    6d06:	2305      	movne	r3, #5
    6d08:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6d0c:	2300      	movs	r3, #0
    6d0e:	4619      	mov	r1, r3
    6d10:	aa02      	add	r2, sp, #8
    6d12:	4620      	mov	r0, r4
    6d14:	f001 fc70 	bl	85f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6d18:	4b23      	ldr	r3, [pc, #140]	; (6da8 <gpio_nrfx_pin_interrupt_configure+0xd8>)
    6d1a:	4298      	cmp	r0, r3
    6d1c:	d13d      	bne.n	6d9a <gpio_nrfx_pin_interrupt_configure+0xca>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    6d1e:	2101      	movs	r1, #1
    6d20:	4620      	mov	r0, r4
    6d22:	f001 fddb 	bl	88dc <nrfx_gpiote_trigger_enable>
	return 0;
    6d26:	e7e1      	b.n	6cec <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6d28:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    6d2c:	d027      	beq.n	6d7e <gpio_nrfx_pin_interrupt_configure+0xae>
    6d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    6d32:	bf14      	ite	ne
    6d34:	2301      	movne	r3, #1
    6d36:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    6d38:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    6d3c:	6883      	ldr	r3, [r0, #8]
    6d3e:	fa23 f101 	lsr.w	r1, r3, r1
    6d42:	f011 0101 	ands.w	r1, r1, #1
    6d46:	d1e1      	bne.n	6d0c <gpio_nrfx_pin_interrupt_configure+0x3c>
    6d48:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    6d4c:	d1de      	bne.n	6d0c <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    6d4e:	f004 031f 	and.w	r3, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d52:	0962      	lsrs	r2, r4, #5
    6d54:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6d58:	d013      	beq.n	6d82 <gpio_nrfx_pin_interrupt_configure+0xb2>
    6d5a:	2a01      	cmp	r2, #1
    6d5c:	d120      	bne.n	6da0 <gpio_nrfx_pin_interrupt_configure+0xd0>
    6d5e:	4a13      	ldr	r2, [pc, #76]	; (6dac <gpio_nrfx_pin_interrupt_configure+0xdc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    6d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    6d64:	07db      	lsls	r3, r3, #31
    6d66:	d4d1      	bmi.n	6d0c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6d68:	f10d 0507 	add.w	r5, sp, #7
    6d6c:	4629      	mov	r1, r5
    6d6e:	4620      	mov	r0, r4
    6d70:	f001 fd64 	bl	883c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    6d74:	4b0e      	ldr	r3, [pc, #56]	; (6db0 <gpio_nrfx_pin_interrupt_configure+0xe0>)
    6d76:	4298      	cmp	r0, r3
    6d78:	d006      	beq.n	6d88 <gpio_nrfx_pin_interrupt_configure+0xb8>
		trigger_config.p_in_channel = &ch;
    6d7a:	9503      	str	r5, [sp, #12]
    6d7c:	e7c6      	b.n	6d0c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6d7e:	2303      	movs	r3, #3
    6d80:	e7da      	b.n	6d38 <gpio_nrfx_pin_interrupt_configure+0x68>
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
    6d82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6d86:	e7eb      	b.n	6d60 <gpio_nrfx_pin_interrupt_configure+0x90>
			err = nrfx_gpiote_channel_alloc(&ch);
    6d88:	4628      	mov	r0, r5
    6d8a:	f001 fda1 	bl	88d0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    6d8e:	4b06      	ldr	r3, [pc, #24]	; (6da8 <gpio_nrfx_pin_interrupt_configure+0xd8>)
    6d90:	4298      	cmp	r0, r3
    6d92:	d0f2      	beq.n	6d7a <gpio_nrfx_pin_interrupt_configure+0xaa>
				return -ENOMEM;
    6d94:	f06f 000b 	mvn.w	r0, #11
    6d98:	e7a9      	b.n	6cee <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    6d9a:	f06f 0015 	mvn.w	r0, #21
    6d9e:	e7a6      	b.n	6cee <gpio_nrfx_pin_interrupt_configure+0x1e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    6da0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    6da4:	deff      	udf	#255	; 0xff
    6da6:	bf00      	nop
    6da8:	0bad0000 	.word	0x0bad0000
    6dac:	50000300 	.word	0x50000300
    6db0:	0bad0004 	.word	0x0bad0004

00006db4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    6db4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    6db6:	f001 fd7b 	bl	88b0 <nrfx_gpiote_is_init>
    6dba:	4604      	mov	r4, r0
    6dbc:	b968      	cbnz	r0, 6dda <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    6dbe:	f001 fd4f 	bl	8860 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    6dc2:	4b08      	ldr	r3, [pc, #32]	; (6de4 <gpio_nrfx_init+0x30>)
    6dc4:	4298      	cmp	r0, r3
    6dc6:	d10a      	bne.n	6dde <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    6dc8:	4807      	ldr	r0, [pc, #28]	; (6de8 <gpio_nrfx_init+0x34>)
    6dca:	4621      	mov	r1, r4
    6dcc:	f001 fd30 	bl	8830 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    6dd0:	4622      	mov	r2, r4
    6dd2:	2105      	movs	r1, #5
    6dd4:	2006      	movs	r0, #6
    6dd6:	f7fe f80b 	bl	4df0 <z_arm_irq_priority_set>
		return 0;
    6dda:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    6ddc:	bd10      	pop	{r4, pc}
		return -EIO;
    6dde:	f06f 0004 	mvn.w	r0, #4
    6de2:	e7fb      	b.n	6ddc <gpio_nrfx_init+0x28>
    6de4:	0bad0000 	.word	0x0bad0000
    6de8:	00006ded 	.word	0x00006ded

00006dec <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6dec:	0942      	lsrs	r2, r0, #5
{
    6dee:	b570      	push	{r4, r5, r6, lr}
    6df0:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6df2:	d002      	beq.n	6dfa <nrfx_gpio_handler+0xe>
    6df4:	2a01      	cmp	r2, #1
    6df6:	d017      	beq.n	6e28 <nrfx_gpio_handler+0x3c>
}
    6df8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6dfa:	4e0d      	ldr	r6, [pc, #52]	; (6e30 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    6dfc:	6932      	ldr	r2, [r6, #16]
    6dfe:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6e00:	2900      	cmp	r1, #0
    6e02:	d0f9      	beq.n	6df8 <nrfx_gpio_handler+0xc>
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    6e04:	f003 031f 	and.w	r3, r3, #31
    6e08:	2501      	movs	r5, #1
	return node->next;
    6e0a:	680c      	ldr	r4, [r1, #0]
    6e0c:	409d      	lsls	r5, r3
    6e0e:	2900      	cmp	r1, #0
    6e10:	d0f2      	beq.n	6df8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    6e12:	688a      	ldr	r2, [r1, #8]
    6e14:	402a      	ands	r2, r5
    6e16:	d002      	beq.n	6e1e <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    6e18:	684b      	ldr	r3, [r1, #4]
    6e1a:	4630      	mov	r0, r6
    6e1c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6e1e:	b12c      	cbz	r4, 6e2c <nrfx_gpio_handler+0x40>
    6e20:	6823      	ldr	r3, [r4, #0]
    6e22:	4621      	mov	r1, r4
    6e24:	461c      	mov	r4, r3
    6e26:	e7f2      	b.n	6e0e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6e28:	4e02      	ldr	r6, [pc, #8]	; (6e34 <nrfx_gpio_handler+0x48>)
    6e2a:	e7e7      	b.n	6dfc <nrfx_gpio_handler+0x10>
    6e2c:	4623      	mov	r3, r4
    6e2e:	e7f8      	b.n	6e22 <nrfx_gpio_handler+0x36>
    6e30:	0000e1ec 	.word	0x0000e1ec
    6e34:	0000e1d8 	.word	0x0000e1d8

00006e38 <gpio_nrfx_pin_configure>:
{
    6e38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    6e3c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6e3e:	7b3b      	ldrb	r3, [r7, #12]
    6e40:	f001 051f 	and.w	r5, r1, #31
    6e44:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    6e48:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6e4a:	4628      	mov	r0, r5
    6e4c:	f10d 0103 	add.w	r1, sp, #3
{
    6e50:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6e52:	f001 fcf3 	bl	883c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    6e56:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6e5a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    6e5c:	d10b      	bne.n	6e76 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    6e5e:	4628      	mov	r0, r5
    6e60:	f001 fda4 	bl	89ac <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    6e64:	4b3d      	ldr	r3, [pc, #244]	; (6f5c <gpio_nrfx_pin_configure+0x124>)
    6e66:	4598      	cmp	r8, r3
    6e68:	d103      	bne.n	6e72 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    6e6a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    6e6e:	f001 fd29 	bl	88c4 <nrfx_gpiote_channel_free>
		return 0;
    6e72:	2000      	movs	r0, #0
    6e74:	e00c      	b.n	6e90 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    6e76:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6e78:	4619      	mov	r1, r3
    6e7a:	aa02      	add	r2, sp, #8
    6e7c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    6e7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6e82:	f001 fbb9 	bl	85f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6e86:	4b35      	ldr	r3, [pc, #212]	; (6f5c <gpio_nrfx_pin_configure+0x124>)
    6e88:	4298      	cmp	r0, r3
    6e8a:	d004      	beq.n	6e96 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    6e8c:	f06f 0015 	mvn.w	r0, #21
}
    6e90:	b004      	add	sp, #16
    6e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    6e96:	4580      	cmp	r8, r0
    6e98:	d103      	bne.n	6ea2 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    6e9a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    6e9e:	f001 fd11 	bl	88c4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    6ea2:	03a3      	lsls	r3, r4, #14
    6ea4:	d54b      	bpl.n	6f3e <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6ea6:	f240 3306 	movw	r3, #774	; 0x306
    6eaa:	4023      	ands	r3, r4
    6eac:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    6eb0:	d019      	beq.n	6ee6 <gpio_nrfx_pin_configure+0xae>
    6eb2:	d80c      	bhi.n	6ece <gpio_nrfx_pin_configure+0x96>
    6eb4:	2b06      	cmp	r3, #6
    6eb6:	d017      	beq.n	6ee8 <gpio_nrfx_pin_configure+0xb0>
    6eb8:	d804      	bhi.n	6ec4 <gpio_nrfx_pin_configure+0x8c>
    6eba:	b1ab      	cbz	r3, 6ee8 <gpio_nrfx_pin_configure+0xb0>
    6ebc:	2b02      	cmp	r3, #2
    6ebe:	d1e5      	bne.n	6e8c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    6ec0:	2304      	movs	r3, #4
    6ec2:	e011      	b.n	6ee8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6ec8:	d1e0      	bne.n	6e8c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    6eca:	2301      	movs	r3, #1
    6ecc:	e00c      	b.n	6ee8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6ece:	f240 2202 	movw	r2, #514	; 0x202
    6ed2:	4293      	cmp	r3, r2
    6ed4:	d027      	beq.n	6f26 <gpio_nrfx_pin_configure+0xee>
    6ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    6eda:	d026      	beq.n	6f2a <gpio_nrfx_pin_configure+0xf2>
    6edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6ee0:	d1d4      	bne.n	6e8c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    6ee2:	2302      	movs	r3, #2
    6ee4:	e000      	b.n	6ee8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    6ee6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    6ee8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    6eec:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    6ef0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    6ef4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    6ef6:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    6efa:	bf54      	ite	pl
    6efc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    6f00:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    6f02:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    6f04:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    6f08:	d511      	bpl.n	6f2e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    6f0a:	687a      	ldr	r2, [r7, #4]
    6f0c:	2301      	movs	r3, #1
    6f0e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    6f10:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    6f14:	2200      	movs	r2, #0
    6f16:	a901      	add	r1, sp, #4
    6f18:	4628      	mov	r0, r5
    6f1a:	f001 fc19 	bl	8750 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6f1e:	4b0f      	ldr	r3, [pc, #60]	; (6f5c <gpio_nrfx_pin_configure+0x124>)
    6f20:	4298      	cmp	r0, r3
    6f22:	d0a6      	beq.n	6e72 <gpio_nrfx_pin_configure+0x3a>
    6f24:	e7b2      	b.n	6e8c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    6f26:	2305      	movs	r3, #5
    6f28:	e7de      	b.n	6ee8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6f2a:	2303      	movs	r3, #3
    6f2c:	e7dc      	b.n	6ee8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    6f2e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    6f30:	bf41      	itttt	mi
    6f32:	2301      	movmi	r3, #1
    6f34:	687a      	ldrmi	r2, [r7, #4]
    6f36:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    6f38:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    6f3c:	e7ea      	b.n	6f14 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    6f3e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6f40:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    6f44:	bf54      	ite	pl
    6f46:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    6f4a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6f4c:	461a      	mov	r2, r3
    6f4e:	a901      	add	r1, sp, #4
    6f50:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    6f52:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6f56:	f001 fb4f 	bl	85f8 <nrfx_gpiote_input_configure>
    6f5a:	e7e0      	b.n	6f1e <gpio_nrfx_pin_configure+0xe6>
    6f5c:	0bad0000 	.word	0x0bad0000

00006f60 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    6f60:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
    6f62:	6843      	ldr	r3, [r0, #4]
    6f64:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
    6f66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
    6f6a:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    6f6e:	f003 fa97 	bl	a4a0 <nrfx_twi_twim_bus_recover>
	sda_pin = nrf_twi_sda_pin_get(config->twi.p_twi);

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    6f72:	4b03      	ldr	r3, [pc, #12]	; (6f80 <i2c_nrfx_twi_recover_bus+0x20>)
    6f74:	4298      	cmp	r0, r3
}
    6f76:	bf14      	ite	ne
    6f78:	f06f 000f 	mvnne.w	r0, #15
    6f7c:	2000      	moveq	r0, #0
    6f7e:	bd08      	pop	{r3, pc}
    6f80:	0bad0000 	.word	0x0bad0000

00006f84 <twi_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWI
I2C_NRFX_TWI_DEVICE(1);
    6f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6f86:	4604      	mov	r4, r0
    6f88:	2200      	movs	r2, #0
    6f8a:	2101      	movs	r1, #1
    6f8c:	2004      	movs	r0, #4
    6f8e:	f7fd ff2f 	bl	4df0 <z_arm_irq_priority_set>
    6f92:	6863      	ldr	r3, [r4, #4]
    6f94:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    6f96:	aa01      	add	r2, sp, #4
    6f98:	2100      	movs	r1, #0
    6f9a:	4628      	mov	r0, r5
    6f9c:	f005 ff0e 	bl	cdbc <pinctrl_lookup_state>
	if (ret < 0) {
    6fa0:	2800      	cmp	r0, #0
    6fa2:	db14      	blt.n	6fce <twi_1_init+0x4a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    6fa4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    6fa6:	682a      	ldr	r2, [r5, #0]
    6fa8:	7919      	ldrb	r1, [r3, #4]
    6faa:	6818      	ldr	r0, [r3, #0]
    6fac:	f000 f8c0 	bl	7130 <pinctrl_configure_pins>
    6fb0:	2800      	cmp	r0, #0
    6fb2:	db0c      	blt.n	6fce <twi_1_init+0x4a>
	const struct i2c_nrfx_twi_config *config = dev->config;
    6fb4:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    6fb6:	6923      	ldr	r3, [r4, #16]
    6fb8:	4a06      	ldr	r2, [pc, #24]	; (6fd4 <twi_1_init+0x50>)
    6fba:	f100 0108 	add.w	r1, r0, #8
    6fbe:	f002 f9af 	bl	9320 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    6fc2:	4b05      	ldr	r3, [pc, #20]	; (6fd8 <twi_1_init+0x54>)
	return 0;
    6fc4:	4298      	cmp	r0, r3
    6fc6:	bf14      	ite	ne
    6fc8:	f06f 000f 	mvnne.w	r0, #15
    6fcc:	2000      	moveq	r0, #0
I2C_NRFX_TWI_DEVICE(1);
    6fce:	b003      	add	sp, #12
    6fd0:	bd30      	pop	{r4, r5, pc}
    6fd2:	bf00      	nop
    6fd4:	00006fdd 	.word	0x00006fdd
    6fd8:	0bad0000 	.word	0x0bad0000

00006fdc <event_handler>:
	switch (p_event->type) {
    6fdc:	7803      	ldrb	r3, [r0, #0]
    6fde:	2b01      	cmp	r3, #1
    6fe0:	d008      	beq.n	6ff4 <event_handler+0x18>
    6fe2:	2b02      	cmp	r3, #2
    6fe4:	d008      	beq.n	6ff8 <event_handler+0x1c>
    6fe6:	b94b      	cbnz	r3, 6ffc <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    6fe8:	4b05      	ldr	r3, [pc, #20]	; (7000 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    6fea:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    6fec:	f101 0010 	add.w	r0, r1, #16
    6ff0:	f003 bdc2 	b.w	ab78 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    6ff4:	4b03      	ldr	r3, [pc, #12]	; (7004 <event_handler+0x28>)
    6ff6:	e7f8      	b.n	6fea <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    6ff8:	4b03      	ldr	r3, [pc, #12]	; (7008 <event_handler+0x2c>)
    6ffa:	e7f6      	b.n	6fea <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    6ffc:	4b03      	ldr	r3, [pc, #12]	; (700c <event_handler+0x30>)
    6ffe:	e7f4      	b.n	6fea <event_handler+0xe>
    7000:	0bad0000 	.word	0x0bad0000
    7004:	0bae0001 	.word	0x0bae0001
    7008:	0bae0002 	.word	0x0bae0002
    700c:	0bad0001 	.word	0x0bad0001

00007010 <i2c_nrfx_twi_transfer>:
{
    7010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7014:	b08b      	sub	sp, #44	; 0x2c
    7016:	4605      	mov	r5, r0
    7018:	460c      	mov	r4, r1
    701a:	4690      	mov	r8, r2
    701c:	9301      	str	r3, [sp, #4]
	const struct i2c_nrfx_twi_config *config = dev->config;
    701e:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    7020:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    7022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    702a:	4630      	mov	r0, r6
    702c:	f003 fdc8 	bl	abc0 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    7030:	f106 0a10 	add.w	sl, r6, #16
    7034:	2200      	movs	r2, #0
    7036:	2300      	movs	r3, #0
    7038:	4650      	mov	r0, sl
    703a:	f003 fdc1 	bl	abc0 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    703e:	4638      	mov	r0, r7
    7040:	f002 f9b2 	bl	93a8 <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    7044:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 7108 <i2c_nrfx_twi_transfer+0xf8>
	for (size_t i = 0; i < num_msgs; i++) {
    7048:	f04f 0900 	mov.w	r9, #0
    704c:	45c1      	cmp	r9, r8
    704e:	d301      	bcc.n	7054 <i2c_nrfx_twi_transfer+0x44>
    7050:	2400      	movs	r4, #0
    7052:	e02e      	b.n	70b2 <i2c_nrfx_twi_transfer+0xa2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    7054:	7a23      	ldrb	r3, [r4, #8]
    7056:	9303      	str	r3, [sp, #12]
    7058:	f013 0108 	ands.w	r1, r3, #8
    705c:	d14d      	bne.n	70fa <i2c_nrfx_twi_transfer+0xea>
		nrfx_twi_xfer_desc_t cur_xfer = {
    705e:	2212      	movs	r2, #18
    7060:	f10d 0016 	add.w	r0, sp, #22
    7064:	9102      	str	r1, [sp, #8]
    7066:	f005 fa44 	bl	c4f2 <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    706a:	9b03      	ldr	r3, [sp, #12]
		nrfx_twi_xfer_desc_t cur_xfer = {
    706c:	6860      	ldr	r0, [r4, #4]
    706e:	9901      	ldr	r1, [sp, #4]
    7070:	9006      	str	r0, [sp, #24]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    7072:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    7076:	6820      	ldr	r0, [r4, #0]
    7078:	f88d 1015 	strb.w	r1, [sp, #21]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    707c:	f013 0f02 	tst.w	r3, #2
    7080:	9902      	ldr	r1, [sp, #8]
		nrfx_twi_xfer_desc_t cur_xfer = {
    7082:	f88d 2014 	strb.w	r2, [sp, #20]
    7086:	9008      	str	r0, [sp, #32]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    7088:	d11d      	bne.n	70c6 <i2c_nrfx_twi_transfer+0xb6>
			if ((i < (num_msgs - 1)) &&
    708a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    708e:	454b      	cmp	r3, r9
    7090:	d902      	bls.n	7098 <i2c_nrfx_twi_transfer+0x88>
    7092:	7d23      	ldrb	r3, [r4, #20]
    7094:	075b      	lsls	r3, r3, #29
    7096:	d518      	bpl.n	70ca <i2c_nrfx_twi_transfer+0xba>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    7098:	bb7a      	cbnz	r2, 70fa <i2c_nrfx_twi_transfer+0xea>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    709a:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    709c:	a905      	add	r1, sp, #20
    709e:	4638      	mov	r0, r7
    70a0:	f002 f9ae 	bl	9400 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    70a4:	4558      	cmp	r0, fp
    70a6:	d012      	beq.n	70ce <i2c_nrfx_twi_transfer+0xbe>
			if (res == NRFX_ERROR_BUSY) {
    70a8:	4b18      	ldr	r3, [pc, #96]	; (710c <i2c_nrfx_twi_transfer+0xfc>)
    70aa:	4298      	cmp	r0, r3
    70ac:	d028      	beq.n	7100 <i2c_nrfx_twi_transfer+0xf0>
				ret = -EIO;
    70ae:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    70b2:	4638      	mov	r0, r7
    70b4:	f002 f988 	bl	93c8 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    70b8:	4630      	mov	r0, r6
    70ba:	f003 fd5d 	bl	ab78 <z_impl_k_sem_give>
}
    70be:	4620      	mov	r0, r4
    70c0:	b00b      	add	sp, #44	; 0x2c
    70c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    70c6:	460a      	mov	r2, r1
    70c8:	e7e8      	b.n	709c <i2c_nrfx_twi_transfer+0x8c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    70ca:	2240      	movs	r2, #64	; 0x40
    70cc:	e7e6      	b.n	709c <i2c_nrfx_twi_transfer+0x8c>
	return z_impl_k_sem_take(sem, timeout);
    70ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    70d2:	2300      	movs	r3, #0
    70d4:	4650      	mov	r0, sl
    70d6:	f003 fd73 	bl	abc0 <z_impl_k_sem_take>
		if (ret != 0) {
    70da:	b130      	cbz	r0, 70ea <i2c_nrfx_twi_transfer+0xda>
			nrfx_twi_disable(&config->twi);
    70dc:	4638      	mov	r0, r7
    70de:	f002 f973 	bl	93c8 <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
    70e2:	4628      	mov	r0, r5
    70e4:	f7ff ff3c 	bl	6f60 <i2c_nrfx_twi_recover_bus>
			break;
    70e8:	e7e1      	b.n	70ae <i2c_nrfx_twi_transfer+0x9e>
		res = data->res;
    70ea:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    70ec:	455b      	cmp	r3, fp
    70ee:	f104 040c 	add.w	r4, r4, #12
    70f2:	d1dc      	bne.n	70ae <i2c_nrfx_twi_transfer+0x9e>
	for (size_t i = 0; i < num_msgs; i++) {
    70f4:	f109 0901 	add.w	r9, r9, #1
    70f8:	e7a8      	b.n	704c <i2c_nrfx_twi_transfer+0x3c>
			ret = -ENOTSUP;
    70fa:	f06f 0485 	mvn.w	r4, #133	; 0x85
    70fe:	e7d8      	b.n	70b2 <i2c_nrfx_twi_transfer+0xa2>
				ret = -EBUSY;
    7100:	f06f 040f 	mvn.w	r4, #15
    7104:	e7d5      	b.n	70b2 <i2c_nrfx_twi_transfer+0xa2>
    7106:	bf00      	nop
    7108:	0bad0000 	.word	0x0bad0000
    710c:	0bad000b 	.word	0x0bad000b

00007110 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    7110:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    7112:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7116:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    7118:	6002      	str	r2, [r0, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    711a:	d004      	beq.n	7126 <nrf_gpio_pin_port_decode+0x16>
    NRF_GPIO_Type * p_port = NULL;
    711c:	2b01      	cmp	r3, #1
    711e:	4803      	ldr	r0, [pc, #12]	; (712c <nrf_gpio_pin_port_decode+0x1c>)
    7120:	bf18      	it	ne
    7122:	2000      	movne	r0, #0
    7124:	4770      	bx	lr
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7126:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    712a:	4770      	bx	lr
    712c:	50000300 	.word	0x50000300

00007130 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    7130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cnf &= ~to_update;
    7134:	f8df 8158 	ldr.w	r8, [pc, #344]	; 7290 <pinctrl_configure_pins+0x160>
    7138:	b085      	sub	sp, #20
    713a:	4615      	mov	r5, r2
    713c:	4681      	mov	r9, r0
    713e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7142:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7144:	4549      	cmp	r1, r9
    7146:	d103      	bne.n	7150 <pinctrl_configure_pins+0x20>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    7148:	2000      	movs	r0, #0
}
    714a:	b005      	add	sp, #20
    714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7150:	f8d9 3000 	ldr.w	r3, [r9]
		uint32_t psel = NRF_GET_PIN(pins[i]);
    7154:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7158:	f3c3 2643 	ubfx	r6, r3, #9, #4
			psel = PSEL_DISCONNECTED;
    715c:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    715e:	ea4f 4313 	mov.w	r3, r3, lsr #16
			psel = PSEL_DISCONNECTED;
    7162:	bf08      	it	eq
    7164:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    7168:	2b19      	cmp	r3, #25
    716a:	f200 808d 	bhi.w	7288 <pinctrl_configure_pins+0x158>
    716e:	e8df f003 	tbb	[pc, r3]
    7172:	140d      	.short	0x140d
    7174:	28211e1b 	.word	0x28211e1b
    7178:	8b8b8b1e 	.word	0x8b8b8b1e
    717c:	8b683a8b 	.word	0x8b683a8b
    7180:	8b8b8b8b 	.word	0x8b8b8b8b
    7184:	8b8b8b8b 	.word	0x8b8b8b8b
    7188:	8885826b 	.word	0x8885826b
			NRF_PSEL_UART(reg, TXD) = psel;
    718c:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
		if (psel != PSEL_DISCONNECTED) {
    7190:	1c60      	adds	r0, r4, #1
    7192:	d163      	bne.n	725c <pinctrl_configure_pins+0x12c>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7194:	f109 0904 	add.w	r9, r9, #4
    7198:	e7d4      	b.n	7144 <pinctrl_configure_pins+0x14>
			NRF_PSEL_UART(reg, RXD) = psel;
    719a:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
		if (psel != PSEL_DISCONNECTED) {
    719e:	1c62      	adds	r2, r4, #1
    71a0:	d0f8      	beq.n	7194 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    71a2:	f04f 0a00 	mov.w	sl, #0
    71a6:	e064      	b.n	7272 <pinctrl_configure_pins+0x142>
			NRF_PSEL_UART(reg, RTS) = psel;
    71a8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    71ac:	e7f0      	b.n	7190 <pinctrl_configure_pins+0x60>
			NRF_PSEL_UART(reg, CTS) = psel;
    71ae:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
    71b2:	e7f4      	b.n	719e <pinctrl_configure_pins+0x6e>
		if (psel != PSEL_DISCONNECTED) {
    71b4:	1c63      	adds	r3, r4, #1
			NRF_PSEL_SPIM(reg, SCK) = psel;
    71b6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
		if (psel != PSEL_DISCONNECTED) {
    71ba:	d0eb      	beq.n	7194 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    71bc:	f04f 0a00 	mov.w	sl, #0
    71c0:	e005      	b.n	71ce <pinctrl_configure_pins+0x9e>
		if (psel != PSEL_DISCONNECTED) {
    71c2:	1c60      	adds	r0, r4, #1
			NRF_PSEL_SPIM(reg, MOSI) = psel;
    71c4:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
		if (psel != PSEL_DISCONNECTED) {
    71c8:	d0e4      	beq.n	7194 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    71ca:	f04f 0a01 	mov.w	sl, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    71ce:	a803      	add	r0, sp, #12
    71d0:	9403      	str	r4, [sp, #12]
    71d2:	f7ff ff9d 	bl	7110 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    71d6:	9b03      	ldr	r3, [sp, #12]
    71d8:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    71dc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    71e0:	f04f 0b01 	mov.w	fp, #1
    71e4:	e009      	b.n	71fa <pinctrl_configure_pins+0xca>
			NRF_PSEL_TWIM(reg, SCL) = psel;
    71e6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    71ea:	2e00      	cmp	r6, #0
    71ec:	d1d7      	bne.n	719e <pinctrl_configure_pins+0x6e>
		if (psel != PSEL_DISCONNECTED) {
    71ee:	1c63      	adds	r3, r4, #1
    71f0:	d0d0      	beq.n	7194 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    71f2:	f04f 0a00 	mov.w	sl, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    71f6:	46d3      	mov	fp, sl
				drive = NRF_DRIVE_S0D1;
    71f8:	2606      	movs	r6, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    71fa:	f8d9 3000 	ldr.w	r3, [r9]
    71fe:	9301      	str	r3, [sp, #4]
    7200:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7204:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7206:	a803      	add	r0, sp, #12
    7208:	bf1c      	itt	ne
    720a:	f04f 0a01 	movne.w	sl, #1
    720e:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    7212:	9403      	str	r4, [sp, #12]
    7214:	f7ff ff7c 	bl	7110 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7218:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
    721a:	9b01      	ldr	r3, [sp, #4]
    721c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    7220:	f3c3 14c1 	ubfx	r4, r3, #7, #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7224:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)  |
    7228:	0233      	lsls	r3, r6, #8
    722a:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
    722e:	ea43 030b 	orr.w	r3, r3, fp
    cnf &= ~to_update;
    7232:	ea02 0208 	and.w	r2, r2, r8
    7236:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    7238:	ea43 034a 	orr.w	r3, r3, sl, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    723c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    7240:	e7a8      	b.n	7194 <pinctrl_configure_pins+0x64>
			NRF_PSEL_TWIM(reg, SDA) = psel;
    7242:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    7246:	e7d0      	b.n	71ea <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = psel;
    7248:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
		if (psel != PSEL_DISCONNECTED) {
    724c:	1c62      	adds	r2, r4, #1
			write = NRF_GET_INVERT(pins[i]);
    724e:	f8d9 3000 	ldr.w	r3, [r9]
		if (psel != PSEL_DISCONNECTED) {
    7252:	d09f      	beq.n	7194 <pinctrl_configure_pins+0x64>
			write = NRF_GET_INVERT(pins[i]);
    7254:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
    7258:	2b00      	cmp	r3, #0
    725a:	d0b6      	beq.n	71ca <pinctrl_configure_pins+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    725c:	a803      	add	r0, sp, #12
    725e:	9403      	str	r4, [sp, #12]
    7260:	f7ff ff56 	bl	7110 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7264:	9b03      	ldr	r3, [sp, #12]
    7266:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
    726a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
    726e:	f04f 0a01 	mov.w	sl, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7272:	46d3      	mov	fp, sl
    7274:	e7c1      	b.n	71fa <pinctrl_configure_pins+0xca>
			NRF_PSEL_PWM(reg, OUT[1]) = psel;
    7276:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    727a:	e7e7      	b.n	724c <pinctrl_configure_pins+0x11c>
			NRF_PSEL_PWM(reg, OUT[2]) = psel;
    727c:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    7280:	e7e4      	b.n	724c <pinctrl_configure_pins+0x11c>
			NRF_PSEL_PWM(reg, OUT[3]) = psel;
    7282:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
    7286:	e7e1      	b.n	724c <pinctrl_configure_pins+0x11c>
		switch (NRF_GET_FUN(pins[i])) {
    7288:	f06f 0085 	mvn.w	r0, #133	; 0x85
    728c:	e75d      	b.n	714a <pinctrl_configure_pins+0x1a>
    728e:	bf00      	nop
    7290:	fffcf8f0 	.word	0xfffcf8f0

00007294 <sdhc_spi_rx>:
};

/* Receives a block of bytes */
static int sdhc_spi_rx(const struct device *spi_dev, struct spi_config *spi_cfg,
	uint8_t *buf, int len)
{
    7294:	b510      	push	{r4, lr}
	struct spi_buf tx_bufs[] = {
    7296:	4c09      	ldr	r4, [pc, #36]	; (72bc <sdhc_spi_rx+0x28>)
{
    7298:	b088      	sub	sp, #32
	struct spi_buf tx_bufs[] = {
    729a:	e9cd 4300 	strd	r4, r3, [sp]
	const struct spi_buf_set tx = {
		.buffers = tx_bufs,
		.count = 1,
	};

	struct spi_buf rx_bufs[] = {
    729e:	9305      	str	r3, [sp, #20]
	const struct spi_buf_set tx = {
    72a0:	2401      	movs	r4, #1
			.buf = buf,
			.len = len
		}
	};

	const struct spi_buf_set rx = {
    72a2:	ab04      	add	r3, sp, #16
	struct spi_buf rx_bufs[] = {
    72a4:	e9cd 4203 	strd	r4, r2, [sp, #12]
	const struct spi_buf_set rx = {
    72a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
		.buffers = rx_bufs,
		.count = 1,
	};

	return spi_transceive(spi_dev, spi_cfg, &tx, &rx);
    72ac:	aa02      	add	r2, sp, #8
    72ae:	ab06      	add	r3, sp, #24
	const struct spi_buf_set tx = {
    72b0:	f8cd d008 	str.w	sp, [sp, #8]
	return spi_transceive(spi_dev, spi_cfg, &tx, &rx);
    72b4:	f005 fda9 	bl	ce0a <spi_transceive>
}
    72b8:	b008      	add	sp, #32
    72ba:	bd10      	pop	{r4, pc}
    72bc:	0000f6cd 	.word	0x0000f6cd

000072c0 <sdhc_spi_reset>:
static int sdhc_spi_reset(const struct device *dev)
{
	struct sdhc_spi_data *data = dev->data;

	/* Reset host I/O */
	data->spi_cfg->frequency = SDMMC_CLOCK_400KHZ;
    72c0:	6903      	ldr	r3, [r0, #16]
    72c2:	4a02      	ldr	r2, [pc, #8]	; (72cc <sdhc_spi_reset+0xc>)
    72c4:	685b      	ldr	r3, [r3, #4]
	return 0;
}
    72c6:	2000      	movs	r0, #0
	data->spi_cfg->frequency = SDMMC_CLOCK_400KHZ;
    72c8:	601a      	str	r2, [r3, #0]
}
    72ca:	4770      	bx	lr
    72cc:	00061a80 	.word	0x00061a80

000072d0 <sdhc_spi_get_host_props>:
{
    72d0:	b538      	push	{r3, r4, r5, lr}
    72d2:	460c      	mov	r4, r1
	const struct sdhc_spi_config *cfg = dev->config;
    72d4:	6845      	ldr	r5, [r0, #4]
	memset(props, 0, sizeof(struct sdhc_host_props));
    72d6:	2228      	movs	r2, #40	; 0x28
    72d8:	2100      	movs	r1, #0
    72da:	4620      	mov	r0, r4
    72dc:	f005 f909 	bl	c4f2 <memset>
	props->f_min = SDMMC_CLOCK_400KHZ;
    72e0:	4b07      	ldr	r3, [pc, #28]	; (7300 <sdhc_spi_get_host_props+0x30>)
    72e2:	6063      	str	r3, [r4, #4]
	props->f_max = cfg->spi_max_freq;
    72e4:	68eb      	ldr	r3, [r5, #12]
    72e6:	6023      	str	r3, [r4, #0]
	props->power_delay = cfg->power_delay_ms;
    72e8:	692b      	ldr	r3, [r5, #16]
    72ea:	60a3      	str	r3, [r4, #8]
	props->host_caps.vol_330_support = true;
    72ec:	7be3      	ldrb	r3, [r4, #15]
    72ee:	f043 0301 	orr.w	r3, r3, #1
    72f2:	73e3      	strb	r3, [r4, #15]
	props->is_spi = true;
    72f4:	2301      	movs	r3, #1
    72f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
    72fa:	2000      	movs	r0, #0
    72fc:	bd38      	pop	{r3, r4, r5, pc}
    72fe:	bf00      	nop
    7300:	00061a80 	.word	0x00061a80

00007304 <sdhc_spi_set_io>:
{
    7304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct sdhc_spi_data *data = dev->data;
    7308:	6906      	ldr	r6, [r0, #16]
	if (ios->clock != data->spi_cfg->frequency) {
    730a:	680b      	ldr	r3, [r1, #0]
	const struct sdhc_spi_config *cfg = dev->config;
    730c:	6847      	ldr	r7, [r0, #4]
{
    730e:	460d      	mov	r5, r1
	if (ios->clock != data->spi_cfg->frequency) {
    7310:	6871      	ldr	r1, [r6, #4]
    7312:	680a      	ldr	r2, [r1, #0]
    7314:	4293      	cmp	r3, r2
{
    7316:	4604      	mov	r4, r0
	if (ios->clock != data->spi_cfg->frequency) {
    7318:	d014      	beq.n	7344 <sdhc_spi_set_io+0x40>
		if (ios->clock > cfg->spi_max_freq) {
    731a:	68fa      	ldr	r2, [r7, #12]
    731c:	4293      	cmp	r3, r2
    731e:	d903      	bls.n	7328 <sdhc_spi_set_io+0x24>
			return -ENOTSUP;
    7320:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    7324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ios->clock != 0) {
    7328:	b163      	cbz	r3, 7344 <sdhc_spi_set_io+0x40>
			if (data->spi_cfg == &data->cfg_a) {
    732a:	f106 0808 	add.w	r8, r6, #8
    732e:	4541      	cmp	r1, r8
				memcpy(&data->cfg_b, &data->cfg_a,
    7330:	f106 091c 	add.w	r9, r6, #28
			if (data->spi_cfg == &data->cfg_a) {
    7334:	d11d      	bne.n	7372 <sdhc_spi_set_io+0x6e>
				data->cfg_a.frequency = ios->clock;
    7336:	60b3      	str	r3, [r6, #8]
				memcpy(&data->cfg_b, &data->cfg_a,
    7338:	2214      	movs	r2, #20
    733a:	4648      	mov	r0, r9
    733c:	f005 f8ce 	bl	c4dc <memcpy>
				data->spi_cfg = &data->cfg_b;
    7340:	f8c6 9004 	str.w	r9, [r6, #4]
	if (ios->bus_mode != SDHC_BUSMODE_PUSHPULL) {
    7344:	792b      	ldrb	r3, [r5, #4]
    7346:	2b02      	cmp	r3, #2
    7348:	d1ea      	bne.n	7320 <sdhc_spi_set_io+0x1c>
	if (data->power_mode != ios->power_mode) {
    734a:	796b      	ldrb	r3, [r5, #5]
    734c:	7832      	ldrb	r2, [r6, #0]
    734e:	429a      	cmp	r2, r3
    7350:	d007      	beq.n	7362 <sdhc_spi_set_io+0x5e>
		if (ios->power_mode == SDHC_POWER_ON) {
    7352:	2b02      	cmp	r3, #2
    7354:	d016      	beq.n	7384 <sdhc_spi_set_io+0x80>
		if (cfg->pwr_gpio.port) {
    7356:	687a      	ldr	r2, [r7, #4]
			if (ios->power_mode == SDHC_POWER_ON) {
    7358:	796b      	ldrb	r3, [r5, #5]
		if (cfg->pwr_gpio.port) {
    735a:	2a00      	cmp	r2, #0
    735c:	d13a      	bne.n	73d4 <sdhc_spi_set_io+0xd0>
		data->power_mode = ios->power_mode;
    735e:	796b      	ldrb	r3, [r5, #5]
    7360:	7033      	strb	r3, [r6, #0]
	if (ios->bus_width != SDHC_BUS_WIDTH1BIT) {
    7362:	79ab      	ldrb	r3, [r5, #6]
    7364:	2b01      	cmp	r3, #1
    7366:	d1db      	bne.n	7320 <sdhc_spi_set_io+0x1c>
	if (ios->signal_voltage != SD_VOL_3_3_V) {
    7368:	7a6b      	ldrb	r3, [r5, #9]
    736a:	2b01      	cmp	r3, #1
    736c:	d1d8      	bne.n	7320 <sdhc_spi_set_io+0x1c>
	return 0;
    736e:	2000      	movs	r0, #0
    7370:	e7d8      	b.n	7324 <sdhc_spi_set_io+0x20>
				data->cfg_b.frequency = ios->clock;
    7372:	61f3      	str	r3, [r6, #28]
				memcpy(&data->cfg_a, &data->cfg_b,
    7374:	2214      	movs	r2, #20
    7376:	4649      	mov	r1, r9
    7378:	4640      	mov	r0, r8
    737a:	f005 f8af 	bl	c4dc <memcpy>
				data->spi_cfg = &data->cfg_a;
    737e:	f8c6 8004 	str.w	r8, [r6, #4]
    7382:	e7df      	b.n	7344 <sdhc_spi_set_io+0x40>
	struct sdhc_spi_data *data = dev->data;
    7384:	6922      	ldr	r2, [r4, #16]
	const struct sdhc_spi_config *config = dev->config;
    7386:	f8d4 8004 	ldr.w	r8, [r4, #4]
	struct spi_config *spi_cfg = data->spi_cfg;
    738a:	6854      	ldr	r4, [r2, #4]
	if (spi_cfg->frequency == 0) {
    738c:	6823      	ldr	r3, [r4, #0]
    738e:	b90b      	cbnz	r3, 7394 <sdhc_spi_set_io+0x90>
		spi_cfg->frequency = SDMMC_CLOCK_400KHZ;
    7390:	4b15      	ldr	r3, [pc, #84]	; (73e8 <sdhc_spi_set_io+0xe4>)
    7392:	6023      	str	r3, [r4, #0]
	spi_cfg->operation |= SPI_CS_ACTIVE_HIGH;
    7394:	88a3      	ldrh	r3, [r4, #4]
    7396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    739a:	80a3      	strh	r3, [r4, #4]
	ret = sdhc_spi_rx(config->spi_dev, spi_cfg, data->scratch, 10);
    739c:	f8d8 0000 	ldr.w	r0, [r8]
    73a0:	230a      	movs	r3, #10
    73a2:	3230      	adds	r2, #48	; 0x30
    73a4:	4621      	mov	r1, r4
    73a6:	f7ff ff75 	bl	7294 <sdhc_spi_rx>
	if (ret != 0) {
    73aa:	b130      	cbz	r0, 73ba <sdhc_spi_set_io+0xb6>
		spi_cfg->operation &= ~SPI_CS_ACTIVE_HIGH;
    73ac:	88a3      	ldrh	r3, [r4, #4]
    73ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    73b2:	80a3      	strh	r3, [r4, #4]
				return -EIO;
    73b4:	f06f 0004 	mvn.w	r0, #4
    73b8:	e7b4      	b.n	7324 <sdhc_spi_set_io+0x20>
	ret = spi_release(config->spi_dev, spi_cfg);
    73ba:	f8d8 0000 	ldr.w	r0, [r8]
				     const struct spi_config *config)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->release(dev, config);
    73be:	6883      	ldr	r3, [r0, #8]
    73c0:	4621      	mov	r1, r4
    73c2:	685b      	ldr	r3, [r3, #4]
    73c4:	4798      	blx	r3
	spi_cfg->operation &= ~SPI_CS_ACTIVE_HIGH;
    73c6:	88a3      	ldrh	r3, [r4, #4]
    73c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    73cc:	80a3      	strh	r3, [r4, #4]
			if (sdhc_spi_init_card(dev) != 0) {
    73ce:	2800      	cmp	r0, #0
    73d0:	d0c1      	beq.n	7356 <sdhc_spi_set_io+0x52>
    73d2:	e7ef      	b.n	73b4 <sdhc_spi_set_io+0xb0>
			if (ios->power_mode == SDHC_POWER_ON) {
    73d4:	2b02      	cmp	r3, #2
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 1)) {
    73d6:	bf0c      	ite	eq
    73d8:	2101      	moveq	r1, #1
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 0)) {
    73da:	2100      	movne	r1, #0
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 1)) {
    73dc:	1d38      	adds	r0, r7, #4
				if (gpio_pin_set_dt(&cfg->pwr_gpio, 0)) {
    73de:	f005 fd00 	bl	cde2 <gpio_pin_set_dt>
    73e2:	2800      	cmp	r0, #0
    73e4:	d0bb      	beq.n	735e <sdhc_spi_set_io+0x5a>
    73e6:	e7e5      	b.n	73b4 <sdhc_spi_set_io+0xb0>
    73e8:	00061a80 	.word	0x00061a80

000073ec <sdhc_skip.constprop.0>:
static int sdhc_skip(const struct device *dev, uint8_t skip_val)
    73ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t retries = SD_SPI_SKIP_RETRIES;
    73ee:	4c0c      	ldr	r4, [pc, #48]	; (7420 <sdhc_skip.constprop.0+0x34>)
	const struct sdhc_spi_config *config = dev->config;
    73f0:	6845      	ldr	r5, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
    73f2:	6906      	ldr	r6, [r0, #16]
		ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg,
    73f4:	6871      	ldr	r1, [r6, #4]
    73f6:	6828      	ldr	r0, [r5, #0]
    73f8:	2301      	movs	r3, #1
    73fa:	f10d 0207 	add.w	r2, sp, #7
    73fe:	f7ff ff49 	bl	7294 <sdhc_spi_rx>
		if (ret) {
    7402:	b928      	cbnz	r0, 7410 <sdhc_skip.constprop.0+0x24>
	} while (buf == skip_val && retries--);
    7404:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7408:	28ff      	cmp	r0, #255	; 0xff
    740a:	d103      	bne.n	7414 <sdhc_skip.constprop.0+0x28>
    740c:	3c01      	subs	r4, #1
    740e:	d2f1      	bcs.n	73f4 <sdhc_skip.constprop.0+0x8>
}
    7410:	b002      	add	sp, #8
    7412:	bd70      	pop	{r4, r5, r6, pc}
	if (retries == 0) {
    7414:	2c00      	cmp	r4, #0
    7416:	d1fb      	bne.n	7410 <sdhc_skip.constprop.0+0x24>
		return -ETIMEDOUT;
    7418:	f06f 0073 	mvn.w	r0, #115	; 0x73
    741c:	e7f8      	b.n	7410 <sdhc_skip.constprop.0+0x24>
    741e:	bf00      	nop
    7420:	000f4240 	.word	0x000f4240

00007424 <sdhc_spi_request>:
{
    7424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7428:	b09b      	sub	sp, #108	; 0x6c
	const struct sdhc_spi_config *config = dev->config;
    742a:	6843      	ldr	r3, [r0, #4]
	int ret, retries = cmd->retries;
    742c:	f8d1 901c 	ldr.w	r9, [r1, #28]
	const struct sdhc_spi_config *config = dev->config;
    7430:	9301      	str	r3, [sp, #4]
{
    7432:	4604      	mov	r4, r0
	struct sdhc_spi_data *dev_data = dev->data;
    7434:	6903      	ldr	r3, [r0, #16]
    7436:	9302      	str	r3, [sp, #8]
{
    7438:	4688      	mov	r8, r1
    743a:	4615      	mov	r5, r2
	const struct sdhc_command stop_cmd = {
    743c:	2100      	movs	r1, #0
    743e:	2214      	movs	r2, #20
    7440:	a812      	add	r0, sp, #72	; 0x48
    7442:	f005 f856 	bl	c4f2 <memset>
    7446:	230c      	movs	r3, #12
    7448:	9311      	str	r3, [sp, #68]	; 0x44
    744a:	2120      	movs	r1, #32
    744c:	2301      	movs	r3, #1
    744e:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
    7452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7456:	9319      	str	r3, [sp, #100]	; 0x64
	if (data == NULL) {
    7458:	2d00      	cmp	r5, #0
    745a:	d05b      	beq.n	7514 <sdhc_spi_request+0xf0>
			ret = sdhc_spi_send_cmd(dev, cmd, true);
    745c:	2201      	movs	r2, #1
    745e:	4641      	mov	r1, r8
    7460:	4620      	mov	r0, r4
    7462:	f005 fd3d 	bl	cee0 <sdhc_spi_send_cmd>
			if (ret) {
    7466:	4603      	mov	r3, r0
    7468:	2800      	cmp	r0, #0
    746a:	f040 808f 	bne.w	758c <sdhc_spi_request+0x168>
			if ((cmd->opcode == SD_WRITE_SINGLE_BLOCK) ||
    746e:	f8d8 2000 	ldr.w	r2, [r8]
	const struct sdhc_spi_config *config = dev->config;
    7472:	f8d4 a004 	ldr.w	sl, [r4, #4]
	struct sdhc_spi_data *dev_data = dev->data;
    7476:	f8d4 b010 	ldr.w	fp, [r4, #16]
	uint8_t *write_location = data->data, crc[SD_SPI_CRC16_SIZE];
    747a:	692e      	ldr	r6, [r5, #16]
			if ((cmd->opcode == SD_WRITE_SINGLE_BLOCK) ||
    747c:	3a18      	subs	r2, #24
    747e:	2a01      	cmp	r2, #1
			.len = data->block_size,
    7480:	e9d5 3701 	ldrd	r3, r7, [r5, #4]
			if ((cmd->opcode == SD_WRITE_SINGLE_BLOCK) ||
    7484:	f200 809e 	bhi.w	75c4 <sdhc_spi_request+0x1a0>
	struct spi_buf tx_bufs[] = {
    7488:	930e      	str	r3, [sp, #56]	; 0x38
    748a:	ab07      	add	r3, sp, #28
    748c:	aa04      	add	r2, sp, #16
    748e:	930f      	str	r3, [sp, #60]	; 0x3c
    7490:	2302      	movs	r3, #2
    7492:	920b      	str	r2, [sp, #44]	; 0x2c
    7494:	9310      	str	r3, [sp, #64]	; 0x40
    7496:	2201      	movs	r2, #1
	struct spi_buf_set tx = {
    7498:	ab0b      	add	r3, sp, #44	; 0x2c
		token = SD_SPI_TOKEN_MULTI_WRITE;
    749a:	2f02      	cmp	r7, #2
	struct spi_buf_set tx = {
    749c:	9309      	str	r3, [sp, #36]	; 0x24
	struct spi_buf tx_bufs[] = {
    749e:	e9cd 260c 	strd	r2, r6, [sp, #48]	; 0x30
	struct spi_buf_set tx = {
    74a2:	f04f 0303 	mov.w	r3, #3
    74a6:	930a      	str	r3, [sp, #40]	; 0x28
		token = SD_SPI_TOKEN_MULTI_WRITE;
    74a8:	bf34      	ite	cc
    74aa:	23fe      	movcc	r3, #254	; 0xfe
    74ac:	23fc      	movcs	r3, #252	; 0xfc
    74ae:	f88d 3010 	strb.w	r3, [sp, #16]
	while (remaining--) {
    74b2:	2f00      	cmp	r7, #0
    74b4:	d13f      	bne.n	7536 <sdhc_spi_request+0x112>
	if (data->blocks > 1) {
    74b6:	68ab      	ldr	r3, [r5, #8]
    74b8:	2b01      	cmp	r3, #1
    74ba:	d917      	bls.n	74ec <sdhc_spi_request+0xc8>
		token = SD_SPI_TOKEN_STOP_TRAN;
    74bc:	23fd      	movs	r3, #253	; 0xfd
    74be:	f88d 3010 	strb.w	r3, [sp, #16]
		tx.count = 1;
    74c2:	2301      	movs	r3, #1
    74c4:	930a      	str	r3, [sp, #40]	; 0x28
	return spi_transceive(dev, config, tx_bufs, NULL);
    74c6:	f8db 1004 	ldr.w	r1, [fp, #4]
    74ca:	f8da 0000 	ldr.w	r0, [sl]
    74ce:	463b      	mov	r3, r7
    74d0:	aa09      	add	r2, sp, #36	; 0x24
    74d2:	f005 fc9a 	bl	ce0a <spi_transceive>
		if (ret) {
    74d6:	4603      	mov	r3, r0
    74d8:	2800      	cmp	r0, #0
    74da:	d16b      	bne.n	75b4 <sdhc_spi_request+0x190>
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
    74dc:	6969      	ldr	r1, [r5, #20]
    74de:	463a      	mov	r2, r7
    74e0:	4620      	mov	r0, r4
    74e2:	f005 fcc2 	bl	ce6a <sdhc_spi_wait_unbusy>
		if (ret) {
    74e6:	4603      	mov	r3, r0
			if (ret || (cmd->opcode == SD_READ_MULTIPLE_BLOCK)) {
    74e8:	2b00      	cmp	r3, #0
    74ea:	d163      	bne.n	75b4 <sdhc_spi_request+0x190>
    74ec:	f8d8 3000 	ldr.w	r3, [r8]
    74f0:	2b12      	cmp	r3, #18
    74f2:	d104      	bne.n	74fe <sdhc_spi_request+0xda>
				sdhc_spi_send_cmd(dev,
    74f4:	2200      	movs	r2, #0
    74f6:	a911      	add	r1, sp, #68	; 0x44
    74f8:	4620      	mov	r0, r4
    74fa:	f005 fcf1 	bl	cee0 <sdhc_spi_send_cmd>
	return spi_release(config->spi_dev, dev_data->spi_cfg);
    74fe:	9b01      	ldr	r3, [sp, #4]
    7500:	6818      	ldr	r0, [r3, #0]
    7502:	9b02      	ldr	r3, [sp, #8]
    7504:	6859      	ldr	r1, [r3, #4]
	return api->release(dev, config);
    7506:	6883      	ldr	r3, [r0, #8]
    7508:	685b      	ldr	r3, [r3, #4]
}
    750a:	b01b      	add	sp, #108	; 0x6c
    750c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7510:	4718      	bx	r3
		} while ((ret != 0) && (retries-- > 0));
    7512:	4691      	mov	r9, r2
			ret = sdhc_spi_send_cmd(dev, cmd, false);
    7514:	2200      	movs	r2, #0
    7516:	4641      	mov	r1, r8
    7518:	4620      	mov	r0, r4
    751a:	f005 fce1 	bl	cee0 <sdhc_spi_send_cmd>
		} while ((ret != 0) && (retries-- > 0));
    751e:	4603      	mov	r3, r0
    7520:	2800      	cmp	r0, #0
    7522:	d0ec      	beq.n	74fe <sdhc_spi_request+0xda>
    7524:	f1b9 0f00 	cmp.w	r9, #0
    7528:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    752c:	dcf1      	bgt.n	7512 <sdhc_spi_request+0xee>
}
    752e:	4618      	mov	r0, r3
    7530:	b01b      	add	sp, #108	; 0x6c
    7532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_put_be16(crc16_itu_t(0, write_location, data->block_size),
    7536:	686a      	ldr	r2, [r5, #4]
    7538:	4631      	mov	r1, r6
    753a:	2000      	movs	r0, #0
    753c:	f004 fd7c 	bl	c038 <crc16_itu_t>
	dst[0] = val >> 8;
    7540:	ba40      	rev16	r0, r0
    7542:	f8ad 001c 	strh.w	r0, [sp, #28]
	return spi_transceive(dev, config, tx_bufs, NULL);
    7546:	2300      	movs	r3, #0
    7548:	f8db 1004 	ldr.w	r1, [fp, #4]
    754c:	f8da 0000 	ldr.w	r0, [sl]
    7550:	aa09      	add	r2, sp, #36	; 0x24
    7552:	f005 fc5a 	bl	ce0a <spi_transceive>
		if (ret) {
    7556:	4603      	mov	r3, r0
    7558:	bb60      	cbnz	r0, 75b4 <sdhc_spi_request+0x190>
		ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
    755a:	2301      	movs	r3, #1
    755c:	f8db 1004 	ldr.w	r1, [fp, #4]
    7560:	f8da 0000 	ldr.w	r0, [sl]
    7564:	aa05      	add	r2, sp, #20
    7566:	f7ff fe95 	bl	7294 <sdhc_spi_rx>
		if (ret) {
    756a:	4603      	mov	r3, r0
    756c:	bb10      	cbnz	r0, 75b4 <sdhc_spi_request+0x190>
		if ((resp & 0xF) != SD_SPI_RESPONSE_ACCEPTED) {
    756e:	f89d 2014 	ldrb.w	r2, [sp, #20]
    7572:	f002 020f 	and.w	r2, r2, #15
    7576:	2a05      	cmp	r2, #5
    7578:	d00f      	beq.n	759a <sdhc_spi_request+0x176>
			if ((resp & 0xF) == SD_SPI_RESPONSE_CRC_ERR) {
    757a:	2a0b      	cmp	r2, #11
    757c:	d13b      	bne.n	75f6 <sdhc_spi_request+0x1d2>
				sdhc_spi_send_cmd(dev,
    757e:	4602      	mov	r2, r0
    7580:	a911      	add	r1, sp, #68	; 0x44
    7582:	4620      	mov	r0, r4
    7584:	f005 fcac 	bl	cee0 <sdhc_spi_send_cmd>
    7588:	f06f 0389 	mvn.w	r3, #137	; 0x89
		} while ((ret != 0) && (retries-- > 0));
    758c:	f1b9 0f00 	cmp.w	r9, #0
    7590:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    7594:	ddcb      	ble.n	752e <sdhc_spi_request+0x10a>
    7596:	4691      	mov	r9, r2
    7598:	e760      	b.n	745c <sdhc_spi_request+0x38>
		write_location += data->block_size;
    759a:	686a      	ldr	r2, [r5, #4]
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
    759c:	6969      	ldr	r1, [r5, #20]
		write_location += data->block_size;
    759e:	4416      	add	r6, r2
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
    75a0:	4602      	mov	r2, r0
    75a2:	4620      	mov	r0, r4
		tx_bufs[1].buf = write_location;
    75a4:	960d      	str	r6, [sp, #52]	; 0x34
		ret = sdhc_spi_wait_unbusy(dev, data->timeout_ms, 0);
    75a6:	f005 fc60 	bl	ce6a <sdhc_spi_wait_unbusy>
		if (ret) {
    75aa:	3f01      	subs	r7, #1
    75ac:	4603      	mov	r3, r0
    75ae:	2800      	cmp	r0, #0
    75b0:	f43f af7f 	beq.w	74b2 <sdhc_spi_request+0x8e>
				sdhc_spi_send_cmd(dev,
    75b4:	2200      	movs	r2, #0
    75b6:	a911      	add	r1, sp, #68	; 0x44
    75b8:	4620      	mov	r0, r4
    75ba:	9300      	str	r3, [sp, #0]
    75bc:	f005 fc90 	bl	cee0 <sdhc_spi_send_cmd>
    75c0:	9b00      	ldr	r3, [sp, #0]
		} while ((ret != 0) && (retries-- > 0));
    75c2:	e7e3      	b.n	758c <sdhc_spi_request+0x168>
	const struct spi_buf tx_bufs[] = {
    75c4:	4a29      	ldr	r2, [pc, #164]	; (766c <sdhc_spi_request+0x248>)
	struct spi_buf rx_bufs[] = {
    75c6:	930a      	str	r3, [sp, #40]	; 0x28
	const struct spi_buf tx_bufs[] = {
    75c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
	const struct spi_buf_set tx = {
    75cc:	aa05      	add	r2, sp, #20
    75ce:	9207      	str	r2, [sp, #28]
	const struct spi_buf_set rx = {
    75d0:	a909      	add	r1, sp, #36	; 0x24
	const struct spi_buf_set tx = {
    75d2:	2201      	movs	r2, #1
	if (data->block_size > 512) {
    75d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	struct spi_buf rx_bufs[] = {
    75d8:	e9cd 2608 	strd	r2, r6, [sp, #32]
	const struct spi_buf_set rx = {
    75dc:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
	if (data->block_size > 512) {
    75e0:	d902      	bls.n	75e8 <sdhc_spi_request+0x1c4>
		return -ENOTSUP;
    75e2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    75e6:	e7e5      	b.n	75b4 <sdhc_spi_request+0x190>
	ret = sdhc_skip(dev, 0xff);
    75e8:	4620      	mov	r0, r4
    75ea:	f7ff feff 	bl	73ec <sdhc_skip.constprop.0>
	if (ret < 0) {
    75ee:	1e03      	subs	r3, r0, #0
    75f0:	dbe0      	blt.n	75b4 <sdhc_spi_request+0x190>
	if (ret != SD_SPI_TOKEN_SINGLE)	{
    75f2:	2bfe      	cmp	r3, #254	; 0xfe
    75f4:	d002      	beq.n	75fc <sdhc_spi_request+0x1d8>
		return -EIO;
    75f6:	f06f 0304 	mvn.w	r3, #4
			if (ret || (cmd->opcode == SD_READ_MULTIPLE_BLOCK)) {
    75fa:	e7db      	b.n	75b4 <sdhc_spi_request+0x190>
	while (remaining--) {
    75fc:	1e7a      	subs	r2, r7, #1
    75fe:	9200      	str	r2, [sp, #0]
    7600:	2f00      	cmp	r7, #0
    7602:	d0d7      	beq.n	75b4 <sdhc_spi_request+0x190>
		ret = spi_transceive(config->spi_dev,
    7604:	ab0b      	add	r3, sp, #44	; 0x2c
    7606:	f8db 1004 	ldr.w	r1, [fp, #4]
    760a:	f8da 0000 	ldr.w	r0, [sl]
    760e:	aa07      	add	r2, sp, #28
    7610:	f005 fbfb 	bl	ce0a <spi_transceive>
		if (ret) {
    7614:	4603      	mov	r3, r0
    7616:	2800      	cmp	r0, #0
    7618:	d1cc      	bne.n	75b4 <sdhc_spi_request+0x190>
		ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
    761a:	f8db 1004 	ldr.w	r1, [fp, #4]
    761e:	f8da 0000 	ldr.w	r0, [sl]
    7622:	2303      	movs	r3, #3
    7624:	aa04      	add	r2, sp, #16
    7626:	f7ff fe35 	bl	7294 <sdhc_spi_rx>
		if (crc16_itu_t(0, read_location, data->block_size) !=
    762a:	686a      	ldr	r2, [r5, #4]
		ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
    762c:	9003      	str	r0, [sp, #12]
		if (crc16_itu_t(0, read_location, data->block_size) !=
    762e:	4631      	mov	r1, r6
    7630:	2000      	movs	r0, #0
    7632:	f004 fd01 	bl	c038 <crc16_itu_t>
    7636:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    763a:	ba52      	rev16	r2, r2
    763c:	b292      	uxth	r2, r2
    763e:	4282      	cmp	r2, r0
    7640:	d110      	bne.n	7664 <sdhc_spi_request+0x240>
		read_location += data->block_size;
    7642:	686a      	ldr	r2, [r5, #4]
		if (remaining) {
    7644:	9b03      	ldr	r3, [sp, #12]
		read_location += data->block_size;
    7646:	4416      	add	r6, r2
		if (remaining) {
    7648:	9a00      	ldr	r2, [sp, #0]
		rx_bufs[0].buf = read_location;
    764a:	9609      	str	r6, [sp, #36]	; 0x24
		if (remaining) {
    764c:	2a00      	cmp	r2, #0
    764e:	f43f af4b 	beq.w	74e8 <sdhc_spi_request+0xc4>
			ret = sdhc_skip(dev, 0xff);
    7652:	4620      	mov	r0, r4
    7654:	f7ff feca 	bl	73ec <sdhc_skip.constprop.0>
			if (ret != SD_SPI_TOKEN_SINGLE) {
    7658:	28fe      	cmp	r0, #254	; 0xfe
    765a:	d1cc      	bne.n	75f6 <sdhc_spi_request+0x1d2>
	while (remaining--) {
    765c:	9b00      	ldr	r3, [sp, #0]
    765e:	3b01      	subs	r3, #1
    7660:	9300      	str	r3, [sp, #0]
    7662:	e7cf      	b.n	7604 <sdhc_spi_request+0x1e0>
			return -EILSEQ;
    7664:	f06f 0389 	mvn.w	r3, #137	; 0x89
    7668:	e7a4      	b.n	75b4 <sdhc_spi_request+0x190>
    766a:	bf00      	nop
    766c:	0000f6cd 	.word	0x0000f6cd

00007670 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    7670:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    7672:	794b      	ldrb	r3, [r1, #5]
    7674:	2b01      	cmp	r3, #1
    7676:	d026      	beq.n	76c6 <uarte_nrfx_configure+0x56>
    7678:	2b03      	cmp	r3, #3
    767a:	d121      	bne.n	76c0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    767c:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    767e:	798b      	ldrb	r3, [r1, #6]
    7680:	2b03      	cmp	r3, #3
    7682:	d11d      	bne.n	76c0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    7684:	79ce      	ldrb	r6, [r1, #7]
    7686:	b10e      	cbz	r6, 768c <uarte_nrfx_configure+0x1c>
    7688:	2e01      	cmp	r6, #1
    768a:	d119      	bne.n	76c0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    768c:	790a      	ldrb	r2, [r1, #4]
    768e:	b112      	cbz	r2, 7696 <uarte_nrfx_configure+0x26>
    7690:	2a02      	cmp	r2, #2
    7692:	d115      	bne.n	76c0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    7694:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    7696:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    7698:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    769a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    769e:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    76a0:	d067      	beq.n	7772 <uarte_nrfx_configure+0x102>
    76a2:	d82d      	bhi.n	7700 <uarte_nrfx_configure+0x90>
    76a4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    76a8:	d066      	beq.n	7778 <uarte_nrfx_configure+0x108>
    76aa:	d816      	bhi.n	76da <uarte_nrfx_configure+0x6a>
    76ac:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    76b0:	d064      	beq.n	777c <uarte_nrfx_configure+0x10c>
    76b2:	d80a      	bhi.n	76ca <uarte_nrfx_configure+0x5a>
    76b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    76b8:	d063      	beq.n	7782 <uarte_nrfx_configure+0x112>
    76ba:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    76be:	d063      	beq.n	7788 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    76c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    76c4:	e054      	b.n	7770 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    76c6:	2500      	movs	r5, #0
    76c8:	e7d9      	b.n	767e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    76ca:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    76ce:	d05e      	beq.n	778e <uarte_nrfx_configure+0x11e>
    76d0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    76d4:	d1f4      	bne.n	76c0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    76d6:	4b38      	ldr	r3, [pc, #224]	; (77b8 <uarte_nrfx_configure+0x148>)
    76d8:	e03c      	b.n	7754 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    76da:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    76de:	d059      	beq.n	7794 <uarte_nrfx_configure+0x124>
    76e0:	d807      	bhi.n	76f2 <uarte_nrfx_configure+0x82>
    76e2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    76e6:	d057      	beq.n	7798 <uarte_nrfx_configure+0x128>
    76e8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    76ec:	d1e8      	bne.n	76c0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    76ee:	4b33      	ldr	r3, [pc, #204]	; (77bc <uarte_nrfx_configure+0x14c>)
    76f0:	e030      	b.n	7754 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    76f2:	f647 2412 	movw	r4, #31250	; 0x7a12
    76f6:	42a3      	cmp	r3, r4
    76f8:	d1e2      	bne.n	76c0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    76fa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    76fe:	e029      	b.n	7754 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7700:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    7704:	d04a      	beq.n	779c <uarte_nrfx_configure+0x12c>
    7706:	d813      	bhi.n	7730 <uarte_nrfx_configure+0xc0>
    7708:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    770c:	d049      	beq.n	77a2 <uarte_nrfx_configure+0x132>
    770e:	d809      	bhi.n	7724 <uarte_nrfx_configure+0xb4>
    7710:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    7714:	42a3      	cmp	r3, r4
    7716:	d046      	beq.n	77a6 <uarte_nrfx_configure+0x136>
    7718:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    771c:	d1d0      	bne.n	76c0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    771e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    7722:	e017      	b.n	7754 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7724:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    7728:	d1ca      	bne.n	76c0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    772a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    772e:	e011      	b.n	7754 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7730:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    7734:	d03a      	beq.n	77ac <uarte_nrfx_configure+0x13c>
    7736:	d808      	bhi.n	774a <uarte_nrfx_configure+0xda>
    7738:	4c21      	ldr	r4, [pc, #132]	; (77c0 <uarte_nrfx_configure+0x150>)
    773a:	42a3      	cmp	r3, r4
    773c:	d039      	beq.n	77b2 <uarte_nrfx_configure+0x142>
    773e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    7742:	d1bd      	bne.n	76c0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    7744:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    7748:	e004      	b.n	7754 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    774a:	4c1e      	ldr	r4, [pc, #120]	; (77c4 <uarte_nrfx_configure+0x154>)
    774c:	42a3      	cmp	r3, r4
    774e:	d1b7      	bne.n	76c0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    7750:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    7754:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    7756:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    775a:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    775c:	4335      	orrs	r5, r6
    775e:	681b      	ldr	r3, [r3, #0]
    7760:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    7762:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    7766:	c903      	ldmia	r1, {r0, r1}
    7768:	1d23      	adds	r3, r4, #4
    776a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    776e:	2000      	movs	r0, #0
}
    7770:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    7772:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    7776:	e7ed      	b.n	7754 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    7778:	4b13      	ldr	r3, [pc, #76]	; (77c8 <uarte_nrfx_configure+0x158>)
    777a:	e7eb      	b.n	7754 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    777c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    7780:	e7e8      	b.n	7754 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    7782:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    7786:	e7e5      	b.n	7754 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    7788:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    778c:	e7e2      	b.n	7754 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    778e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    7792:	e7df      	b.n	7754 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    7794:	4b0d      	ldr	r3, [pc, #52]	; (77cc <uarte_nrfx_configure+0x15c>)
    7796:	e7dd      	b.n	7754 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    7798:	4b0d      	ldr	r3, [pc, #52]	; (77d0 <uarte_nrfx_configure+0x160>)
    779a:	e7db      	b.n	7754 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    779c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    77a0:	e7d8      	b.n	7754 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    77a2:	4b0c      	ldr	r3, [pc, #48]	; (77d4 <uarte_nrfx_configure+0x164>)
    77a4:	e7d6      	b.n	7754 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    77a6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    77aa:	e7d3      	b.n	7754 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    77ac:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    77b0:	e7d0      	b.n	7754 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    77b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    77b6:	e7cd      	b.n	7754 <uarte_nrfx_configure+0xe4>
    77b8:	0013b000 	.word	0x0013b000
    77bc:	004ea000 	.word	0x004ea000
    77c0:	0003d090 	.word	0x0003d090
    77c4:	000f4240 	.word	0x000f4240
    77c8:	00275000 	.word	0x00275000
    77cc:	0075c000 	.word	0x0075c000
    77d0:	003af000 	.word	0x003af000
    77d4:	013a9000 	.word	0x013a9000

000077d8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    77d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    77dc:	4680      	mov	r8, r0
    77de:	2200      	movs	r2, #0
    77e0:	2101      	movs	r1, #1
    77e2:	2002      	movs	r0, #2
    77e4:	f7fd fb04 	bl	4df0 <z_arm_irq_priority_set>
    77e8:	2002      	movs	r0, #2
    77ea:	f7fd fad1 	bl	4d90 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    77ee:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    77f2:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    77f6:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    77f8:	2100      	movs	r1, #0
    77fa:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    77fe:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    7802:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
    7806:	aa01      	add	r2, sp, #4
    7808:	4648      	mov	r0, r9
    780a:	f005 fad7 	bl	cdbc <pinctrl_lookup_state>
	if (ret < 0) {
    780e:	1e05      	subs	r5, r0, #0
    7810:	db4c      	blt.n	78ac <uarte_0_init+0xd4>
	return pinctrl_apply_state_direct(config, state);
    7812:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    7814:	f8d9 2000 	ldr.w	r2, [r9]
    7818:	7919      	ldrb	r1, [r3, #4]
    781a:	6818      	ldr	r0, [r3, #0]
    781c:	f7ff fc88 	bl	7130 <pinctrl_configure_pins>
	if (err < 0) {
    7820:	1e05      	subs	r5, r0, #0
    7822:	db43      	blt.n	78ac <uarte_0_init+0xd4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    7824:	1d31      	adds	r1, r6, #4
    7826:	4640      	mov	r0, r8
    7828:	f7ff ff22 	bl	7670 <uarte_nrfx_configure>
	if (err) {
    782c:	4605      	mov	r5, r0
    782e:	2800      	cmp	r0, #0
    7830:	d13c      	bne.n	78ac <uarte_0_init+0xd4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    7832:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    7834:	0799      	lsls	r1, r3, #30
    7836:	d512      	bpl.n	785e <uarte_0_init+0x86>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    7838:	f106 001c 	add.w	r0, r6, #28
    783c:	f001 fa5e 	bl	8cfc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    7840:	4b1e      	ldr	r3, [pc, #120]	; (78bc <uarte_0_init+0xe4>)
    7842:	4298      	cmp	r0, r3
    7844:	d136      	bne.n	78b4 <uarte_0_init+0xdc>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    7846:	7f30      	ldrb	r0, [r6, #28]
    7848:	f104 020c 	add.w	r2, r4, #12
    784c:	f504 7190 	add.w	r1, r4, #288	; 0x120
    7850:	f005 fece 	bl	d5f0 <nrfx_gppi_channel_endpoints_setup>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    7854:	7f33      	ldrb	r3, [r6, #28]
    7856:	2001      	movs	r0, #1
    7858:	4098      	lsls	r0, r3
    785a:	f000 fd8d 	bl	8378 <nrfx_gppi_channels_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    785e:	2308      	movs	r3, #8
    7860:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    7864:	7a3b      	ldrb	r3, [r7, #8]
    7866:	b953      	cbnz	r3, 787e <uarte_0_init+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7868:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    786c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
{
#if NRF_UARTE_HAS_DMA_REG
    p_reg->DMA.RX.PTR    = (uint32_t)p_buffer;
    p_reg->DMA.RX.MAXCNT = length;
#else
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7870:	69b3      	ldr	r3, [r6, #24]
    7872:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    7876:	2301      	movs	r3, #1
    7878:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    787c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    787e:	687b      	ldr	r3, [r7, #4]
    7880:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    7882:	bf5c      	itt	pl
    7884:	f44f 7380 	movpl.w	r3, #256	; 0x100
    7888:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    788c:	687b      	ldr	r3, [r7, #4]
    788e:	06db      	lsls	r3, r3, #27
    7890:	bf44      	itt	mi
    7892:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    7896:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    789a:	6973      	ldr	r3, [r6, #20]
    789c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    78a0:	2300      	movs	r3, #0
    78a2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    78a6:	2301      	movs	r3, #1
    78a8:	60a3      	str	r3, [r4, #8]
    78aa:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    78ac:	4628      	mov	r0, r5
    78ae:	b003      	add	sp, #12
    78b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    78b4:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    78b8:	e7f8      	b.n	78ac <uarte_0_init+0xd4>
    78ba:	bf00      	nop
    78bc:	0bad0000 	.word	0x0bad0000

000078c0 <uarte_nrfx_poll_out>:
{
    78c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78c2:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    78c4:	6907      	ldr	r7, [r0, #16]
{
    78c6:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    78c8:	f006 f964 	bl	db94 <k_is_in_isr>
    78cc:	b9b0      	cbnz	r0, 78fc <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    78ce:	4b21      	ldr	r3, [pc, #132]	; (7954 <uarte_nrfx_poll_out+0x94>)
    78d0:	781b      	ldrb	r3, [r3, #0]
    78d2:	b19b      	cbz	r3, 78fc <uarte_nrfx_poll_out+0x3c>
{
    78d4:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    78d6:	6860      	ldr	r0, [r4, #4]
    78d8:	f005 fcb6 	bl	d248 <is_tx_ready.isra.0>
    78dc:	bb00      	cbnz	r0, 7920 <uarte_nrfx_poll_out+0x60>
    78de:	2001      	movs	r0, #1
    78e0:	f005 fe84 	bl	d5ec <nrfx_busy_wait>
    78e4:	3e01      	subs	r6, #1
    78e6:	d1f6      	bne.n	78d6 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    78e8:	2100      	movs	r1, #0
    78ea:	2021      	movs	r0, #33	; 0x21
    78ec:	f003 fdc8 	bl	b480 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    78f0:	e7f0      	b.n	78d4 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    78f2:	f381 8811 	msr	BASEPRI, r1
    78f6:	f3bf 8f6f 	isb	sy
}
    78fa:	e7f5      	b.n	78e8 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    78fc:	f04f 0320 	mov.w	r3, #32
    7900:	f3ef 8111 	mrs	r1, BASEPRI
    7904:	f383 8812 	msr	BASEPRI_MAX, r3
    7908:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    790c:	6860      	ldr	r0, [r4, #4]
    790e:	460e      	mov	r6, r1
    7910:	f005 fc9a 	bl	d248 <is_tx_ready.isra.0>
    7914:	b990      	cbnz	r0, 793c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    7916:	f381 8811 	msr	BASEPRI, r1
    791a:	f3bf 8f6f 	isb	sy
}
    791e:	e7ed      	b.n	78fc <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    7920:	f04f 0320 	mov.w	r3, #32
    7924:	f3ef 8111 	mrs	r1, BASEPRI
    7928:	f383 8812 	msr	BASEPRI_MAX, r3
    792c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    7930:	6860      	ldr	r0, [r4, #4]
    7932:	460e      	mov	r6, r1
    7934:	f005 fc88 	bl	d248 <is_tx_ready.isra.0>
    7938:	2800      	cmp	r0, #0
    793a:	d0da      	beq.n	78f2 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    793c:	697b      	ldr	r3, [r7, #20]
    793e:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    7940:	6979      	ldr	r1, [r7, #20]
    7942:	2201      	movs	r2, #1
    7944:	4620      	mov	r0, r4
    7946:	f005 fbbf 	bl	d0c8 <tx_start>
	__asm__ volatile(
    794a:	f386 8811 	msr	BASEPRI, r6
    794e:	f3bf 8f6f 	isb	sy
}
    7952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7954:	2000202c 	.word	0x2000202c

00007958 <transfer_next_chunk>:
	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
}

static void transfer_next_chunk(const struct device *dev)
{
    7958:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    795a:	4605      	mov	r5, r0
	const struct spi_nrfx_config *dev_config = dev->config;
    795c:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    795e:	692a      	ldr	r2, [r5, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    7960:	6c93      	ldr	r3, [r2, #72]	; 0x48
		return ctx->rx_len;
    7962:	6d11      	ldr	r1, [r2, #80]	; 0x50
	if (!ctx->tx_len) {
    7964:	b9e3      	cbnz	r3, 79a0 <transfer_next_chunk+0x48>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    7966:	b1a9      	cbz	r1, 7994 <transfer_next_chunk+0x3c>
		nrfx_spi_xfer_desc_t xfer;
		nrfx_err_t result;

		dev_data->chunk_len = chunk_len;

		xfer.p_tx_buffer = ctx->tx_buf;
    7968:	6c54      	ldr	r4, [r2, #68]	; 0x44
		dev_data->chunk_len = chunk_len;
    796a:	6591      	str	r1, [r2, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    796c:	461e      	mov	r6, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    796e:	460b      	mov	r3, r1
		xfer.p_rx_buffer = ctx->rx_buf;
    7970:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    7972:	9202      	str	r2, [sp, #8]
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7974:	e9cd 4600 	strd	r4, r6, [sp]
	return !!(ctx->rx_buf && ctx->rx_len);
    7978:	b1ea      	cbz	r2, 79b6 <transfer_next_chunk+0x5e>
    797a:	2900      	cmp	r1, #0
    797c:	bf18      	it	ne
    797e:	4619      	movne	r1, r3
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    7980:	9103      	str	r1, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    7982:	2200      	movs	r2, #0
    7984:	4669      	mov	r1, sp
    7986:	f001 faf7 	bl	8f78 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    798a:	4b0d      	ldr	r3, [pc, #52]	; (79c0 <transfer_next_chunk+0x68>)
    798c:	4298      	cmp	r0, r3
    798e:	d014      	beq.n	79ba <transfer_next_chunk+0x62>
			return;
		}

		error = -EIO;
    7990:	f06f 0104 	mvn.w	r1, #4
	}

	finish_transaction(dev, error);
    7994:	6928      	ldr	r0, [r5, #16]
}
    7996:	b004      	add	sp, #16
    7998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	finish_transaction(dev, error);
    799c:	f005 bdac 	b.w	d4f8 <finish_transaction.isra.0>
	} else if (!ctx->rx_len) {
    79a0:	6c54      	ldr	r4, [r2, #68]	; 0x44
    79a2:	b111      	cbz	r1, 79aa <transfer_next_chunk+0x52>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    79a4:	428b      	cmp	r3, r1
    79a6:	bf28      	it	cs
    79a8:	460b      	movcs	r3, r1
		return ctx->tx_len;
    79aa:	2c00      	cmp	r4, #0
		dev_data->chunk_len = chunk_len;
    79ac:	6593      	str	r3, [r2, #88]	; 0x58
    79ae:	bf14      	ite	ne
    79b0:	461e      	movne	r6, r3
    79b2:	2600      	moveq	r6, #0
    79b4:	e7dc      	b.n	7970 <transfer_next_chunk+0x18>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    79b6:	4611      	mov	r1, r2
    79b8:	e7e2      	b.n	7980 <transfer_next_chunk+0x28>
}
    79ba:	b004      	add	sp, #16
    79bc:	bd70      	pop	{r4, r5, r6, pc}
    79be:	bf00      	nop
    79c0:	0bad0000 	.word	0x0bad0000

000079c4 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    79c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79c8:	b08b      	sub	sp, #44	; 0x2c
    79ca:	4698      	mov	r8, r3
	const struct spi_nrfx_config *dev_config = dev->config;
    79cc:	6843      	ldr	r3, [r0, #4]
    79ce:	9303      	str	r3, [sp, #12]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    79d0:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    79d2:	6904      	ldr	r4, [r0, #16]
    79d4:	049b      	lsls	r3, r3, #18
{
    79d6:	4607      	mov	r7, r0
    79d8:	460e      	mov	r6, r1
    79da:	4691      	mov	r9, r2
    79dc:	f100 80f3 	bmi.w	7bc6 <spi_nrfx_transceive+0x202>
	return z_impl_k_sem_take(sem, timeout);
    79e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    79e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    79e8:	f104 0010 	add.w	r0, r4, #16
    79ec:	f003 f8e8 	bl	abc0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    79f0:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    79f2:	f8d7 a010 	ldr.w	sl, [r7, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    79f6:	687b      	ldr	r3, [r7, #4]
    79f8:	9301      	str	r3, [sp, #4]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    79fa:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
    79fe:	9302      	str	r3, [sp, #8]
    7a00:	b11b      	cbz	r3, 7a0a <spi_nrfx_transceive+0x46>
    7a02:	f8da 3000 	ldr.w	r3, [sl]
    7a06:	429e      	cmp	r6, r3
    7a08:	d063      	beq.n	7ad2 <spi_nrfx_transceive+0x10e>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    7a0a:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    7a0e:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    7a12:	f040 8107 	bne.w	7c24 <spi_nrfx_transceive+0x260>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    7a16:	f01c 0f09 	tst.w	ip, #9
    7a1a:	f040 8100 	bne.w	7c1e <spi_nrfx_transceive+0x25a>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    7a1e:	f3cc 1345 	ubfx	r3, ip, #5, #6
    7a22:	2b08      	cmp	r3, #8
    7a24:	f040 80fb 	bne.w	7c1e <spi_nrfx_transceive+0x25a>
	if (spi_cfg->frequency < 125000) {
    7a28:	6835      	ldr	r5, [r6, #0]
    7a2a:	4b90      	ldr	r3, [pc, #576]	; (7c6c <spi_nrfx_transceive+0x2a8>)
    7a2c:	429d      	cmp	r5, r3
    7a2e:	f240 80f6 	bls.w	7c1e <spi_nrfx_transceive+0x25a>
	config = dev_config->def_config;
    7a32:	9b01      	ldr	r3, [sp, #4]
    7a34:	f103 0b08 	add.w	fp, r3, #8
    7a38:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    7a3c:	f10d 0e14 	add.w	lr, sp, #20
    7a40:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7a44:	f8db 3000 	ldr.w	r3, [fp]
    7a48:	f8ce 3000 	str.w	r3, [lr]
	if (frequency < 250000) {
    7a4c:	4b88      	ldr	r3, [pc, #544]	; (7c70 <spi_nrfx_transceive+0x2ac>)
    7a4e:	429d      	cmp	r5, r3
    7a50:	f240 80c2 	bls.w	7bd8 <spi_nrfx_transceive+0x214>
	} else if (frequency < 500000) {
    7a54:	4b87      	ldr	r3, [pc, #540]	; (7c74 <spi_nrfx_transceive+0x2b0>)
    7a56:	429d      	cmp	r5, r3
    7a58:	f240 80c1 	bls.w	7bde <spi_nrfx_transceive+0x21a>
	} else if (frequency < 1000000) {
    7a5c:	4b86      	ldr	r3, [pc, #536]	; (7c78 <spi_nrfx_transceive+0x2b4>)
    7a5e:	429d      	cmp	r5, r3
    7a60:	f240 80c0 	bls.w	7be4 <spi_nrfx_transceive+0x220>
	} else if (frequency < 2000000) {
    7a64:	4b85      	ldr	r3, [pc, #532]	; (7c7c <spi_nrfx_transceive+0x2b8>)
    7a66:	429d      	cmp	r5, r3
    7a68:	f240 80bf 	bls.w	7bea <spi_nrfx_transceive+0x226>
	} else if (frequency < 4000000) {
    7a6c:	4b84      	ldr	r3, [pc, #528]	; (7c80 <spi_nrfx_transceive+0x2bc>)
    7a6e:	429d      	cmp	r5, r3
    7a70:	f240 80be 	bls.w	7bf0 <spi_nrfx_transceive+0x22c>
		return NRF_SPI_FREQ_4M;
    7a74:	4b83      	ldr	r3, [pc, #524]	; (7c84 <spi_nrfx_transceive+0x2c0>)
    7a76:	429d      	cmp	r5, r3
    7a78:	bf2c      	ite	cs
    7a7a:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    7a7e:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    7a82:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    7a86:	9507      	str	r5, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    7a88:	f00c 0304 	and.w	r3, ip, #4
    7a8c:	f000 80b3 	beq.w	7bf6 <spi_nrfx_transceive+0x232>
			return NRF_SPI_MODE_2;
    7a90:	2b00      	cmp	r3, #0
    7a92:	bf14      	ite	ne
    7a94:	2303      	movne	r3, #3
    7a96:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    7a98:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
    7a9c:	9b02      	ldr	r3, [sp, #8]
	if (operation & SPI_TRANSFER_LSB) {
    7a9e:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    7aa2:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	if (dev_data->initialized) {
    7aa6:	b12b      	cbz	r3, 7ab4 <spi_nrfx_transceive+0xf0>
		nrfx_spi_uninit(&dev_config->spi);
    7aa8:	9801      	ldr	r0, [sp, #4]
    7aaa:	f001 fa2d 	bl	8f08 <nrfx_spi_uninit>
		dev_data->initialized = false;
    7aae:	2300      	movs	r3, #0
    7ab0:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	result = nrfx_spi_init(&dev_config->spi, &config,
    7ab4:	4653      	mov	r3, sl
    7ab6:	4a74      	ldr	r2, [pc, #464]	; (7c88 <spi_nrfx_transceive+0x2c4>)
    7ab8:	9801      	ldr	r0, [sp, #4]
    7aba:	a905      	add	r1, sp, #20
    7abc:	f001 f9f0 	bl	8ea0 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    7ac0:	4b72      	ldr	r3, [pc, #456]	; (7c8c <spi_nrfx_transceive+0x2c8>)
    7ac2:	4298      	cmp	r0, r3
    7ac4:	f040 809b 	bne.w	7bfe <spi_nrfx_transceive+0x23a>
	dev_data->initialized = true;
    7ac8:	2301      	movs	r3, #1
    7aca:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
	ctx->config = spi_cfg;
    7ace:	f8ca 6000 	str.w	r6, [sl]
		dev_data->busy = true;
    7ad2:	2301      	movs	r3, #1
    7ad4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    7ad8:	f1b9 0f00 	cmp.w	r9, #0
    7adc:	f040 80a5 	bne.w	7c2a <spi_nrfx_transceive+0x266>
    7ae0:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    7ae4:	2300      	movs	r3, #0
    7ae6:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    7ae8:	f104 0248 	add.w	r2, r4, #72	; 0x48
    7aec:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7af0:	f104 0034 	add.w	r0, r4, #52	; 0x34
    7af4:	f005 fc59 	bl	d3aa <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    7af8:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    7afa:	f1b8 0f00 	cmp.w	r8, #0
    7afe:	f040 809d 	bne.w	7c3c <spi_nrfx_transceive+0x278>
    7b02:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    7b06:	2300      	movs	r3, #0
    7b08:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    7b0a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    7b0e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    7b12:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    7b16:	f005 fc48 	bl	d3aa <spi_context_get_next_buf.constprop.0>
	ctx->rx_buf = (uint8_t *)
    7b1a:	64e0      	str	r0, [r4, #76]	; 0x4c
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
    7b1c:	6820      	ldr	r0, [r4, #0]
	ctx->sync_status = 0;
    7b1e:	2300      	movs	r3, #0
    7b20:	6323      	str	r3, [r4, #48]	; 0x30
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
    7b22:	b148      	cbz	r0, 7b38 <spi_nrfx_transceive+0x174>
    7b24:	6883      	ldr	r3, [r0, #8]
    7b26:	b13b      	cbz	r3, 7b38 <spi_nrfx_transceive+0x174>
			gpio_pin_set_dt(&ctx->config->cs.gpio, 1);
    7b28:	2101      	movs	r1, #1
    7b2a:	3008      	adds	r0, #8
    7b2c:	f005 fc50 	bl	d3d0 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs.delay);
    7b30:	6823      	ldr	r3, [r4, #0]
    7b32:	6918      	ldr	r0, [r3, #16]
	z_impl_k_busy_wait(usec_to_wait);
    7b34:	f006 fa56 	bl	dfe4 <z_impl_k_busy_wait>
		transfer_next_chunk(dev);
    7b38:	4638      	mov	r0, r7
    7b3a:	f7ff ff0d 	bl	7958 <transfer_next_chunk>
}

static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    7b3e:	2200      	movs	r2, #0

	for (n = 0; n < ctx->tx_count; ++n) {
    7b40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7b42:	4613      	mov	r3, r2
    7b44:	4283      	cmp	r3, r0
    7b46:	f040 8082 	bne.w	7c4e <spi_nrfx_transceive+0x28a>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    7b4a:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
    7b4c:	6c25      	ldr	r5, [r4, #64]	; 0x40
    7b4e:	4619      	mov	r1, r3
    7b50:	42a9      	cmp	r1, r5
    7b52:	f040 8083 	bne.w	7c5c <spi_nrfx_transceive+0x298>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    7b56:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    7b58:	4626      	mov	r6, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    7b5a:	bf38      	it	cc
    7b5c:	4613      	movcc	r3, r2
    7b5e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    7b62:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    7b66:	f856 3b20 	ldr.w	r3, [r6], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    7b6a:	f04f 0800 	mov.w	r8, #0
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    7b6e:	681b      	ldr	r3, [r3, #0]
    7b70:	fbb5 f5f3 	udiv	r5, r5, r3
    7b74:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    7b78:	35c8      	adds	r5, #200	; 0xc8
    7b7a:	4641      	mov	r1, r8
    7b7c:	f240 30e7 	movw	r0, #999	; 0x3e7
    7b80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7b84:	2300      	movs	r3, #0
    7b86:	fbe5 010c 	umlal	r0, r1, r5, ip
    7b8a:	f7fa f955 	bl	1e38 <__aeabi_uldivmod>
    7b8e:	4602      	mov	r2, r0
    7b90:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    7b92:	4630      	mov	r0, r6
    7b94:	f003 f814 	bl	abc0 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    7b98:	b918      	cbnz	r0, 7ba2 <spi_nrfx_transceive+0x1de>
		status = ctx->sync_status;
    7b9a:	6b25      	ldr	r5, [r4, #48]	; 0x30
		if (error == -ETIMEDOUT) {
    7b9c:	f115 0f74 	cmn.w	r5, #116	; 0x74
    7ba0:	d12f      	bne.n	7c02 <spi_nrfx_transceive+0x23e>
			nrfx_spi_uninit(&dev_config->spi);
    7ba2:	9803      	ldr	r0, [sp, #12]
			dev_data->chunk_len = 0;
    7ba4:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
			nrfx_spi_uninit(&dev_config->spi);
    7ba8:	f001 f9ae 	bl	8f08 <nrfx_spi_uninit>
			dev_data->initialized = false;
    7bac:	f884 805d 	strb.w	r8, [r4, #93]	; 0x5d
			finish_transaction(dev, -ETIMEDOUT);
    7bb0:	6938      	ldr	r0, [r7, #16]
    7bb2:	f06f 0173 	mvn.w	r1, #115	; 0x73
    7bb6:	f005 fc9f 	bl	d4f8 <finish_transaction.isra.0>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
    7bba:	4630      	mov	r0, r6
    7bbc:	f003 f828 	bl	ac10 <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    7bc0:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    7bc4:	e01d      	b.n	7c02 <spi_nrfx_transceive+0x23e>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    7bc6:	69a3      	ldr	r3, [r4, #24]
    7bc8:	2b00      	cmp	r3, #0
    7bca:	f47f af09 	bne.w	79e0 <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    7bce:	6863      	ldr	r3, [r4, #4]
    7bd0:	4299      	cmp	r1, r3
    7bd2:	f47f af05 	bne.w	79e0 <spi_nrfx_transceive+0x1c>
    7bd6:	e70c      	b.n	79f2 <spi_nrfx_transceive+0x2e>
		return NRF_SPI_FREQ_125K;
    7bd8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    7bdc:	e751      	b.n	7a82 <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_250K;
    7bde:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    7be2:	e74e      	b.n	7a82 <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_500K;
    7be4:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    7be8:	e74b      	b.n	7a82 <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_1M;
    7bea:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    7bee:	e748      	b.n	7a82 <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_2M;
    7bf0:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    7bf4:	e745      	b.n	7a82 <spi_nrfx_transceive+0xbe>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    7bf6:	3b00      	subs	r3, #0
    7bf8:	bf18      	it	ne
    7bfa:	2301      	movne	r3, #1
    7bfc:	e74c      	b.n	7a98 <spi_nrfx_transceive+0xd4>
		return -EIO;
    7bfe:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    7c02:	6823      	ldr	r3, [r4, #0]
    7c04:	889b      	ldrh	r3, [r3, #4]
    7c06:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    7c0a:	d104      	bne.n	7c16 <spi_nrfx_transceive+0x252>
		ctx->owner = NULL;
    7c0c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    7c0e:	f104 0010 	add.w	r0, r4, #16
    7c12:	f002 ffb1 	bl	ab78 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
}
    7c16:	4628      	mov	r0, r5
    7c18:	b00b      	add	sp, #44	; 0x2c
    7c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    7c1e:	f06f 0515 	mvn.w	r5, #21
    7c22:	e7ee      	b.n	7c02 <spi_nrfx_transceive+0x23e>
		return -ENOTSUP;
    7c24:	f06f 0585 	mvn.w	r5, #133	; 0x85
    7c28:	e7eb      	b.n	7c02 <spi_nrfx_transceive+0x23e>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    7c2a:	f8d9 3000 	ldr.w	r3, [r9]
    7c2e:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    7c30:	2b00      	cmp	r3, #0
    7c32:	f43f af57 	beq.w	7ae4 <spi_nrfx_transceive+0x120>
    7c36:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7c3a:	e754      	b.n	7ae6 <spi_nrfx_transceive+0x122>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    7c3c:	f8d8 3000 	ldr.w	r3, [r8]
    7c40:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    7c42:	2b00      	cmp	r3, #0
    7c44:	f43f af5f 	beq.w	7b06 <spi_nrfx_transceive+0x142>
    7c48:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7c4c:	e75c      	b.n	7b08 <spi_nrfx_transceive+0x144>
		total_len += ctx->current_tx[n].len;
    7c4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7c50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    7c54:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    7c56:	6849      	ldr	r1, [r1, #4]
    7c58:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    7c5a:	e773      	b.n	7b44 <spi_nrfx_transceive+0x180>
		total_len += ctx->current_rx[n].len;
    7c5c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    7c5e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    7c62:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    7c64:	6840      	ldr	r0, [r0, #4]
    7c66:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    7c68:	e772      	b.n	7b50 <spi_nrfx_transceive+0x18c>
    7c6a:	bf00      	nop
    7c6c:	0001e847 	.word	0x0001e847
    7c70:	0003d08f 	.word	0x0003d08f
    7c74:	0007a11f 	.word	0x0007a11f
    7c78:	000f423f 	.word	0x000f423f
    7c7c:	001e847f 	.word	0x001e847f
    7c80:	003d08ff 	.word	0x003d08ff
    7c84:	007a1200 	.word	0x007a1200
    7c88:	0000d531 	.word	0x0000d531
    7c8c:	0bad0000 	.word	0x0bad0000

00007c90 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    7c90:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    7c92:	2301      	movs	r3, #1
    7c94:	4083      	lsls	r3, r0
    7c96:	4a0e      	ldr	r2, [pc, #56]	; (7cd0 <compare_int_lock+0x40>)
    7c98:	f3bf 8f5b 	dmb	ish
    7c9c:	43dc      	mvns	r4, r3
    7c9e:	e852 1f00 	ldrex	r1, [r2]
    7ca2:	ea01 0504 	and.w	r5, r1, r4
    7ca6:	e842 5600 	strex	r6, r5, [r2]
    7caa:	2e00      	cmp	r6, #0
    7cac:	d1f7      	bne.n	7c9e <compare_int_lock+0xe>
    7cae:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    7cb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7cb6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    7cb8:	4806      	ldr	r0, [pc, #24]	; (7cd4 <compare_int_lock+0x44>)
    7cba:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    7cbe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7cc2:	f3bf 8f6f 	isb	sy

	barrier_dmem_fence_full();
	barrier_isync_fence_full();

	return prev & BIT(chan);
    7cc6:	420b      	tst	r3, r1
}
    7cc8:	bf14      	ite	ne
    7cca:	2001      	movne	r0, #1
    7ccc:	2000      	moveq	r0, #0
    7cce:	bd70      	pop	{r4, r5, r6, pc}
    7cd0:	200017e0 	.word	0x200017e0
    7cd4:	40011000 	.word	0x40011000

00007cd8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    7cd8:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    7cda:	490e      	ldr	r1, [pc, #56]	; (7d14 <sys_clock_timeout_handler+0x3c>)
    7cdc:	e9d1 3400 	ldrd	r3, r4, [r1]
    7ce0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    7ce2:	18c3      	adds	r3, r0, r3
    7ce4:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    7ce8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    7cec:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    7cf0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    7cf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    7cf8:	d209      	bcs.n	7d0e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    7cfa:	4b07      	ldr	r3, [pc, #28]	; (7d18 <sys_clock_timeout_handler+0x40>)
    7cfc:	681b      	ldr	r3, [r3, #0]
    7cfe:	0a1a      	lsrs	r2, r3, #8
    7d00:	061b      	lsls	r3, r3, #24
    7d02:	199c      	adds	r4, r3, r6
    7d04:	4b05      	ldr	r3, [pc, #20]	; (7d1c <sys_clock_timeout_handler+0x44>)
    7d06:	f142 0500 	adc.w	r5, r2, #0
    7d0a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL, false);
	}

	sys_clock_announce(dticks);
}
    7d0e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    7d10:	f003 bd38 	b.w	b784 <sys_clock_announce>
    7d14:	20000690 	.word	0x20000690
    7d18:	200017e4 	.word	0x200017e4
    7d1c:	20000698 	.word	0x20000698

00007d20 <compare_int_unlock>:
	if (key) {
    7d20:	b311      	cbz	r1, 7d68 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7d22:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    7d26:	2301      	movs	r3, #1
    7d28:	4a10      	ldr	r2, [pc, #64]	; (7d6c <compare_int_unlock+0x4c>)
    7d2a:	4083      	lsls	r3, r0
    7d2c:	e852 cf00 	ldrex	ip, [r2]
    7d30:	ea4c 0c03 	orr.w	ip, ip, r3
    7d34:	e842 c100 	strex	r1, ip, [r2]
    7d38:	2900      	cmp	r1, #0
    7d3a:	d1f7      	bne.n	7d2c <compare_int_unlock+0xc>
    7d3c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    7d40:	4a0b      	ldr	r2, [pc, #44]	; (7d70 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    7d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7d46:	4083      	lsls	r3, r0
    7d48:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7d4c:	4b09      	ldr	r3, [pc, #36]	; (7d74 <compare_int_unlock+0x54>)
    7d4e:	f3bf 8f5b 	dmb	ish
    7d52:	681b      	ldr	r3, [r3, #0]
    7d54:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    7d58:	40c3      	lsrs	r3, r0
    7d5a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d5c:	bf42      	ittt	mi
    7d5e:	4b06      	ldrmi	r3, [pc, #24]	; (7d78 <compare_int_unlock+0x58>)
    7d60:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    7d64:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    7d68:	4770      	bx	lr
    7d6a:	bf00      	nop
    7d6c:	200017e0 	.word	0x200017e0
    7d70:	40011000 	.word	0x40011000
    7d74:	200017dc 	.word	0x200017dc
    7d78:	e000e100 	.word	0xe000e100

00007d7c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    7d7c:	4b0d      	ldr	r3, [pc, #52]	; (7db4 <z_nrf_rtc_timer_read+0x38>)
    7d7e:	6818      	ldr	r0, [r3, #0]
    7d80:	0a01      	lsrs	r1, r0, #8
    7d82:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    7d84:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    7d88:	4b0b      	ldr	r3, [pc, #44]	; (7db8 <z_nrf_rtc_timer_read+0x3c>)
    7d8a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    7d8e:	1818      	adds	r0, r3, r0
    7d90:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    7d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7d98:	d20a      	bcs.n	7db0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    7d9a:	4b08      	ldr	r3, [pc, #32]	; (7dbc <z_nrf_rtc_timer_read+0x40>)
    7d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    7da0:	4290      	cmp	r0, r2
    7da2:	eb71 0303 	sbcs.w	r3, r1, r3
    7da6:	d203      	bcs.n	7db0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    7da8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    7dac:	f141 0100 	adc.w	r1, r1, #0
}
    7db0:	4770      	bx	lr
    7db2:	bf00      	nop
    7db4:	200017e4 	.word	0x200017e4
    7db8:	40011000 	.word	0x40011000
    7dbc:	20000698 	.word	0x20000698

00007dc0 <compare_set>:
{
    7dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7dc4:	b085      	sub	sp, #20
    7dc6:	4616      	mov	r6, r2
    7dc8:	461f      	mov	r7, r3
    7dca:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    7dce:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    7dd0:	f7ff ff5e 	bl	7c90 <compare_int_lock>
    7dd4:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    7dd6:	f7ff ffd1 	bl	7d7c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    7dda:	42b0      	cmp	r0, r6
    7ddc:	eb71 0307 	sbcs.w	r3, r1, r7
    7de0:	d254      	bcs.n	7e8c <compare_set+0xcc>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    7de2:	4b3e      	ldr	r3, [pc, #248]	; (7edc <compare_set+0x11c>)
    7de4:	1a30      	subs	r0, r6, r0
    7de6:	eb67 0101 	sbc.w	r1, r7, r1
    7dea:	4298      	cmp	r0, r3
    7dec:	f171 0100 	sbcs.w	r1, r1, #0
    7df0:	d24f      	bcs.n	7e92 <compare_set+0xd2>
		if (target_time != cc_data[chan].target_time) {
    7df2:	4b3b      	ldr	r3, [pc, #236]	; (7ee0 <compare_set+0x120>)
    7df4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    7df8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    7dfc:	429f      	cmp	r7, r3
    7dfe:	bf08      	it	eq
    7e00:	4296      	cmpeq	r6, r2
    7e02:	d05e      	beq.n	7ec2 <compare_set+0x102>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    7e04:	4937      	ldr	r1, [pc, #220]	; (7ee4 <compare_set+0x124>)
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    7e06:	f44f 3880 	mov.w	r8, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
    7e0a:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    7e0e:	fa08 f804 	lsl.w	r8, r8, r4
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
    7e12:	00ad      	lsls	r5, r5, #2
    7e14:	f8c1 8348 	str.w	r8, [r1, #840]	; 0x348
	event_clear(chan);
    7e18:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7e1a:	b2ad      	uxth	r5, r5
    7e1c:	f005 fbd5 	bl	d5ca <event_clear>
	return absolute_time & COUNTER_MAX;
    7e20:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    7e24:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    7e28:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7e2c:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    7e30:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    7e32:	f04f 0903 	mov.w	r9, #3
    p_reg->CC[ch] = cc_val;
    7e36:	9302      	str	r3, [sp, #8]
    7e38:	9a02      	ldr	r2, [sp, #8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7e3a:	f02c 437f 	bic.w	r3, ip, #4278190080	; 0xff000000
    7e3e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    p_reg->EVTENSET = mask;
    7e42:	f8c1 8344 	str.w	r8, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    7e46:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    7e4a:	4a27      	ldr	r2, [pc, #156]	; (7ee8 <compare_set+0x128>)
	return (a - b) & COUNTER_MAX;
    7e4c:	f06f 0002 	mvn.w	r0, #2
    7e50:	1ac0      	subs	r0, r0, r3
    7e52:	4460      	add	r0, ip
    7e54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    7e58:	4290      	cmp	r0, r2
    7e5a:	d932      	bls.n	7ec2 <compare_set+0x102>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7e5c:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    7e5e:	b168      	cbz	r0, 7e7c <compare_set+0xbc>
     return p_reg->COUNTER;
    7e60:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    7e64:	9303      	str	r3, [sp, #12]
    7e66:	eba3 000b 	sub.w	r0, r3, fp
    7e6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    7e6e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7e72:	d926      	bls.n	7ec2 <compare_set+0x102>
					event_clear(chan);
    7e74:	4620      	mov	r0, r4
    7e76:	f005 fba8 	bl	d5ca <event_clear>
					if (exact) {
    7e7a:	9b03      	ldr	r3, [sp, #12]
			} else if (exact) {
    7e7c:	f1ba 0f00 	cmp.w	sl, #0
    7e80:	d107      	bne.n	7e92 <compare_set+0xd2>
			cc_val = now + cc_inc;
    7e82:	eb09 0c03 	add.w	ip, r9, r3
			cc_inc++;
    7e86:	f109 0901 	add.w	r9, r9, #1
	for (;;) {
    7e8a:	e7d5      	b.n	7e38 <compare_set+0x78>
	} else if (!exact) {
    7e8c:	f1ba 0f00 	cmp.w	sl, #0
    7e90:	d009      	beq.n	7ea6 <compare_set+0xe6>
			return -EINVAL;
    7e92:	f06f 0515 	mvn.w	r5, #21
	compare_int_unlock(chan, key);
    7e96:	4620      	mov	r0, r4
    7e98:	9901      	ldr	r1, [sp, #4]
    7e9a:	f7ff ff41 	bl	7d20 <compare_int_unlock>
}
    7e9e:	4628      	mov	r0, r5
    7ea0:	b005      	add	sp, #20
    7ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		atomic_or(&force_isr_mask, BIT(chan));
    7ea6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7ea8:	4a10      	ldr	r2, [pc, #64]	; (7eec <compare_set+0x12c>)
    7eaa:	f3bf 8f5b 	dmb	ish
    7eae:	40a3      	lsls	r3, r4
    7eb0:	e852 0f00 	ldrex	r0, [r2]
    7eb4:	4318      	orrs	r0, r3
    7eb6:	e842 0100 	strex	r1, r0, [r2]
    7eba:	2900      	cmp	r1, #0
    7ebc:	d1f8      	bne.n	7eb0 <compare_set+0xf0>
    7ebe:	f3bf 8f5b 	dmb	ish
		cc_data[chan].target_time = target_time;
    7ec2:	4907      	ldr	r1, [pc, #28]	; (7ee0 <compare_set+0x120>)
		cc_data[chan].callback = handler;
    7ec4:	980e      	ldr	r0, [sp, #56]	; 0x38
		cc_data[chan].target_time = target_time;
    7ec6:	0123      	lsls	r3, r4, #4
    7ec8:	eb01 1204 	add.w	r2, r1, r4, lsl #4
		cc_data[chan].callback = handler;
    7ecc:	50c8      	str	r0, [r1, r3]
		cc_data[chan].user_context = user_data;
    7ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ed0:	6053      	str	r3, [r2, #4]
		cc_data[chan].target_time = target_time;
    7ed2:	e9c2 6702 	strd	r6, r7, [r2, #8]
		cc_data[chan].user_context = user_data;
    7ed6:	2500      	movs	r5, #0
    7ed8:	e7dd      	b.n	7e96 <compare_set+0xd6>
    7eda:	bf00      	nop
    7edc:	00800001 	.word	0x00800001
    7ee0:	20000680 	.word	0x20000680
    7ee4:	40011000 	.word	0x40011000
    7ee8:	007ffffd 	.word	0x007ffffd
    7eec:	200017dc 	.word	0x200017dc

00007ef0 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    7ef0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    7ef2:	4c1c      	ldr	r4, [pc, #112]	; (7f64 <sys_clock_driver_init+0x74>)
    7ef4:	4b1c      	ldr	r3, [pc, #112]	; (7f68 <sys_clock_driver_init+0x78>)
    7ef6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    7efa:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    7efe:	4b1b      	ldr	r3, [pc, #108]	; (7f6c <sys_clock_driver_init+0x7c>)
    p_reg->PRESCALER = val;
    7f00:	2500      	movs	r5, #0
    7f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7f06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7f0a:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    7f0e:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    7f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7f16:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f1a:	4b15      	ldr	r3, [pc, #84]	; (7f70 <sys_clock_driver_init+0x80>)
    7f1c:	2602      	movs	r6, #2
    7f1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    7f22:	2101      	movs	r1, #1
    7f24:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    7f28:	2011      	movs	r0, #17
    7f2a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    7f2e:	462a      	mov	r2, r5
    7f30:	f7fc ff5e 	bl	4df0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    7f34:	2011      	movs	r0, #17
    7f36:	f7fc ff2b 	bl	4d90 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    7f3a:	4a0e      	ldr	r2, [pc, #56]	; (7f74 <sys_clock_driver_init+0x84>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7f3c:	2301      	movs	r3, #1
    7f3e:	60a3      	str	r3, [r4, #8]
    7f40:	6023      	str	r3, [r4, #0]
    7f42:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL, false);
    7f44:	4b0c      	ldr	r3, [pc, #48]	; (7f78 <sys_clock_driver_init+0x88>)
    7f46:	4a0d      	ldr	r2, [pc, #52]	; (7f7c <sys_clock_driver_init+0x8c>)
    7f48:	9300      	str	r3, [sp, #0]
    7f4a:	e9cd 5501 	strd	r5, r5, [sp, #4]
    7f4e:	2300      	movs	r3, #0
    7f50:	4628      	mov	r0, r5
    7f52:	f7ff ff35 	bl	7dc0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    7f56:	4630      	mov	r0, r6
    7f58:	f7fe fbaa 	bl	66b0 <z_nrf_clock_control_lf_on>

	return 0;
}
    7f5c:	4628      	mov	r0, r5
    7f5e:	b004      	add	sp, #16
    7f60:	bd70      	pop	{r4, r5, r6, pc}
    7f62:	bf00      	nop
    7f64:	40011000 	.word	0x40011000
    7f68:	000f0003 	.word	0x000f0003
    7f6c:	20000680 	.word	0x20000680
    7f70:	e000e100 	.word	0xe000e100
    7f74:	200017e0 	.word	0x200017e0
    7f78:	00007cd9 	.word	0x00007cd9
    7f7c:	007fffff 	.word	0x007fffff

00007f80 <rtc_nrf_isr>:
{
    7f80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    7f84:	4c2f      	ldr	r4, [pc, #188]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    7f86:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    7f8a:	0799      	lsls	r1, r3, #30
    7f8c:	d50b      	bpl.n	7fa6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7f8e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    7f92:	b143      	cbz	r3, 7fa6 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    7f94:	4a2c      	ldr	r2, [pc, #176]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7f96:	2300      	movs	r3, #0
    7f98:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    7f9c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    7fa0:	6813      	ldr	r3, [r2, #0]
    7fa2:	3301      	adds	r3, #1
    7fa4:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    7fa6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_CHANNEL_INT_MASK(chan))) {
    7faa:	03da      	lsls	r2, r3, #15
    7fac:	d52a      	bpl.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7fae:	f3bf 8f5b 	dmb	ish
    7fb2:	4b26      	ldr	r3, [pc, #152]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
    7fb4:	e853 2f00 	ldrex	r2, [r3]
    7fb8:	f022 0101 	bic.w	r1, r2, #1
    7fbc:	e843 1000 	strex	r0, r1, [r3]
    7fc0:	2800      	cmp	r0, #0
    7fc2:	d1f7      	bne.n	7fb4 <rtc_nrf_isr+0x34>
    7fc4:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    7fc8:	07d3      	lsls	r3, r2, #31
    7fca:	d402      	bmi.n	7fd2 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7fcc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    7fd0:	b1c3      	cbz	r3, 8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7fd2:	2500      	movs	r5, #0
    7fd4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    7fd8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    7fdc:	f7ff fece 	bl	7d7c <z_nrf_rtc_timer_read>
	__asm__ volatile(
    7fe0:	f04f 0320 	mov.w	r3, #32
    7fe4:	f3ef 8211 	mrs	r2, BASEPRI
    7fe8:	f383 8812 	msr	BASEPRI_MAX, r3
    7fec:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    7ff0:	4b17      	ldr	r3, [pc, #92]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
    7ff2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    7ff6:	42b0      	cmp	r0, r6
    7ff8:	41b9      	sbcs	r1, r7
    7ffa:	d206      	bcs.n	800a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa>
	__asm__ volatile(
    7ffc:	f382 8811 	msr	BASEPRI, r2
    8000:	f3bf 8f6f 	isb	sy
}
    8004:	b003      	add	sp, #12
    8006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    800a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    800e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    8012:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    8016:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    801a:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    801c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8020:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8024:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    8028:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    802c:	f382 8811 	msr	BASEPRI, r2
    8030:	f3bf 8f6f 	isb	sy
		if (handler) {
    8034:	2900      	cmp	r1, #0
    8036:	d0e5      	beq.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
			handler(chan, expire_time, user_context);
    8038:	9000      	str	r0, [sp, #0]
    803a:	4632      	mov	r2, r6
    803c:	463b      	mov	r3, r7
    803e:	4628      	mov	r0, r5
    8040:	4788      	blx	r1
    8042:	e7df      	b.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
    8044:	40011000 	.word	0x40011000
    8048:	200017e4 	.word	0x200017e4
    804c:	200017dc 	.word	0x200017dc
    8050:	20000680 	.word	0x20000680

00008054 <sys_clock_set_timeout>:
{
    8054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    8056:	1c43      	adds	r3, r0, #1
    8058:	d023      	beq.n	80a2 <sys_clock_set_timeout+0x4e>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    805a:	2801      	cmp	r0, #1
    805c:	dd23      	ble.n	80a6 <sys_clock_set_timeout+0x52>
    805e:	4a13      	ldr	r2, [pc, #76]	; (80ac <sys_clock_set_timeout+0x58>)
    8060:	4b13      	ldr	r3, [pc, #76]	; (80b0 <sys_clock_set_timeout+0x5c>)
    8062:	4290      	cmp	r0, r2
    8064:	bfd4      	ite	le
    8066:	4604      	movle	r4, r0
    8068:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    806a:	f7ff fe87 	bl	7d7c <z_nrf_rtc_timer_read>
    806e:	4b11      	ldr	r3, [pc, #68]	; (80b4 <sys_clock_set_timeout+0x60>)
	if (cyc > MAX_CYCLES) {
    8070:	490f      	ldr	r1, [pc, #60]	; (80b0 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    8072:	e9d3 2300 	ldrd	r2, r3, [r3]
    8076:	1a80      	subs	r0, r0, r2
		cyc = 0;
    8078:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    807c:	bf28      	it	cs
    807e:	2400      	movcs	r4, #0
	cyc += unannounced;
    8080:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    8082:	428c      	cmp	r4, r1
    8084:	bf28      	it	cs
    8086:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    8088:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
    808a:	490b      	ldr	r1, [pc, #44]	; (80b8 <sys_clock_set_timeout+0x64>)
    808c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    808e:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
    8092:	e9cd 0001 	strd	r0, r0, [sp, #4]
    8096:	f143 0300 	adc.w	r3, r3, #0
    809a:	f7ff fe91 	bl	7dc0 <compare_set>
}
    809e:	b004      	add	sp, #16
    80a0:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    80a2:	4c03      	ldr	r4, [pc, #12]	; (80b0 <sys_clock_set_timeout+0x5c>)
    80a4:	e7e1      	b.n	806a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    80a6:	2401      	movs	r4, #1
    80a8:	e7df      	b.n	806a <sys_clock_set_timeout+0x16>
    80aa:	bf00      	nop
    80ac:	007ffffe 	.word	0x007ffffe
    80b0:	007fffff 	.word	0x007fffff
    80b4:	20000690 	.word	0x20000690
    80b8:	00007cd9 	.word	0x00007cd9

000080bc <sys_clock_elapsed>:
{
    80bc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    80be:	f7ff fe5d 	bl	7d7c <z_nrf_rtc_timer_read>
    80c2:	4b02      	ldr	r3, [pc, #8]	; (80cc <sys_clock_elapsed+0x10>)
    80c4:	681b      	ldr	r3, [r3, #0]
}
    80c6:	1ac0      	subs	r0, r0, r3
    80c8:	bd08      	pop	{r3, pc}
    80ca:	bf00      	nop
    80cc:	20000690 	.word	0x20000690

000080d0 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    80d0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    80d4:	4905      	ldr	r1, [pc, #20]	; (80ec <__NVIC_SystemReset+0x1c>)
    80d6:	4b06      	ldr	r3, [pc, #24]	; (80f0 <__NVIC_SystemReset+0x20>)
    80d8:	68ca      	ldr	r2, [r1, #12]
    80da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    80de:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    80e0:	60cb      	str	r3, [r1, #12]
    80e2:	f3bf 8f4f 	dsb	sy
    __NOP();
    80e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    80e8:	e7fd      	b.n	80e6 <__NVIC_SystemReset+0x16>
    80ea:	bf00      	nop
    80ec:	e000ed00 	.word	0xe000ed00
    80f0:	05fa0004 	.word	0x05fa0004

000080f4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    80f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    80f8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    80fc:	2a08      	cmp	r2, #8
    80fe:	d106      	bne.n	810e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8100:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    8104:	2b05      	cmp	r3, #5
    8106:	d802      	bhi.n	810e <nrf52_errata_103+0x1a>
    8108:	4a02      	ldr	r2, [pc, #8]	; (8114 <nrf52_errata_103+0x20>)
    810a:	5cd0      	ldrb	r0, [r2, r3]
    810c:	4770      	bx	lr
                        return false;
    810e:	2000      	movs	r0, #0
}
    8110:	4770      	bx	lr
    8112:	bf00      	nop
    8114:	0000f90b 	.word	0x0000f90b

00008118 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8118:	4a02      	ldr	r2, [pc, #8]	; (8124 <nvmc_wait+0xc>)
    811a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    811e:	2b00      	cmp	r3, #0
    8120:	d0fb      	beq.n	811a <nvmc_wait+0x2>
}
    8122:	4770      	bx	lr
    8124:	4001e000 	.word	0x4001e000

00008128 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    8128:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    812a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    812e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    8132:	2a08      	cmp	r2, #8
    8134:	d14e      	bne.n	81d4 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    8136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    813a:	2100      	movs	r1, #0
    813c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    8140:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    8144:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    8148:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    814c:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    8150:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    8154:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    8158:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    815c:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    8160:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8164:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    8168:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    816c:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    8170:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8174:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    8178:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    817c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    8180:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8184:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    8188:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    818c:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    8190:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8194:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    8198:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    819c:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    81a0:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    81a4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    81a8:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    81ac:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    81b0:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    81b4:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    81b8:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    81bc:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    81c0:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    81c4:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    81c8:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    81cc:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    81d0:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    81d4:	f7ff ff8e 	bl	80f4 <nrf52_errata_103>
    81d8:	b118      	cbz	r0, 81e2 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    81da:	4b3f      	ldr	r3, [pc, #252]	; (82d8 <SystemInit+0x1b0>)
    81dc:	4a3f      	ldr	r2, [pc, #252]	; (82dc <SystemInit+0x1b4>)
    81de:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    81e2:	f7ff ff87 	bl	80f4 <nrf52_errata_103>
    81e6:	b118      	cbz	r0, 81f0 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    81e8:	4b3d      	ldr	r3, [pc, #244]	; (82e0 <SystemInit+0x1b8>)
    81ea:	22fb      	movs	r2, #251	; 0xfb
    81ec:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    81f0:	f7ff ff80 	bl	80f4 <nrf52_errata_103>
    81f4:	b170      	cbz	r0, 8214 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    81f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    81fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    81fe:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    8202:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8206:	f022 020f 	bic.w	r2, r2, #15
    820a:	f003 030f 	and.w	r3, r3, #15
    820e:	4313      	orrs	r3, r2
    8210:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    8214:	f7ff ff6e 	bl	80f4 <nrf52_errata_103>
    8218:	b120      	cbz	r0, 8224 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    821a:	4b32      	ldr	r3, [pc, #200]	; (82e4 <SystemInit+0x1bc>)
    821c:	f44f 7200 	mov.w	r2, #512	; 0x200
    8220:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8224:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8228:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    822c:	2b08      	cmp	r3, #8
    822e:	d11a      	bne.n	8266 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    8230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8234:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    8238:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    823a:	bf44      	itt	mi
    823c:	f06f 0201 	mvnmi.w	r2, #1
    8240:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8244:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8248:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    824c:	2b05      	cmp	r3, #5
    824e:	d802      	bhi.n	8256 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    8250:	4a25      	ldr	r2, [pc, #148]	; (82e8 <SystemInit+0x1c0>)
    8252:	5cd3      	ldrb	r3, [r2, r3]
    8254:	b13b      	cbz	r3, 8266 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    8256:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    825a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    825e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8262:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    8266:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    826a:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    826e:	07db      	lsls	r3, r3, #31
    8270:	d514      	bpl.n	829c <SystemInit+0x174>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8272:	481e      	ldr	r0, [pc, #120]	; (82ec <SystemInit+0x1c4>)
    8274:	2301      	movs	r3, #1
    8276:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    827a:	f7ff ff4d 	bl	8118 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    827e:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    8282:	f023 0301 	bic.w	r3, r3, #1
    8286:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
    828a:	f7ff ff45 	bl	8118 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    828e:	2300      	movs	r3, #0
    8290:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    8294:	f7ff ff40 	bl	8118 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
    8298:	f7ff ff1a 	bl	80d0 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    829c:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
    82a0:	2b00      	cmp	r3, #0
    82a2:	db03      	blt.n	82ac <SystemInit+0x184>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    82a4:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    82a8:	2b00      	cmp	r3, #0
    82aa:	da14      	bge.n	82d6 <SystemInit+0x1ae>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    82ac:	490f      	ldr	r1, [pc, #60]	; (82ec <SystemInit+0x1c4>)
    82ae:	2301      	movs	r3, #1
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    82b0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    82b4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    82b8:	2412      	movs	r4, #18
    nvmc_wait();
    82ba:	f7ff ff2d 	bl	8118 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    82be:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    82c2:	f7ff ff29 	bl	8118 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    82c6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    82ca:	f7ff ff25 	bl	8118 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    82ce:	2300      	movs	r3, #0
    82d0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    82d4:	e7de      	b.n	8294 <SystemInit+0x16c>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    82d6:	bd10      	pop	{r4, pc}
    82d8:	40005000 	.word	0x40005000
    82dc:	00038148 	.word	0x00038148
    82e0:	4000f000 	.word	0x4000f000
    82e4:	40029000 	.word	0x40029000
    82e8:	0000f905 	.word	0x0000f905
    82ec:	4001e000 	.word	0x4001e000

000082f0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    82f0:	b530      	push	{r4, r5, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    82f2:	6804      	ldr	r4, [r0, #0]
        if (prev_mask == 0)
    82f4:	b1cc      	cbz	r4, 832a <nrfx_flag32_alloc+0x3a>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    82f6:	f3bf 8f5b 	dmb	ish
        {
            return NRFX_ERROR_NO_MEM;
        }

        idx = 31 - NRF_CLZ(prev_mask);
    82fa:	fab4 f384 	clz	r3, r4
    82fe:	f1c3 031f 	rsb	r3, r3, #31
    8302:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    8304:	2201      	movs	r2, #1
    8306:	409a      	lsls	r2, r3
    8308:	ea24 0202 	bic.w	r2, r4, r2
    830c:	e850 5f00 	ldrex	r5, [r0]
    8310:	42a5      	cmp	r5, r4
    8312:	d104      	bne.n	831e <nrfx_flag32_alloc+0x2e>
    8314:	e840 2c00 	strex	ip, r2, [r0]
    8318:	f1bc 0f00 	cmp.w	ip, #0
    831c:	d1f6      	bne.n	830c <nrfx_flag32_alloc+0x1c>
    831e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8322:	d1e6      	bne.n	82f2 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;

    return NRFX_SUCCESS;
    8324:	4802      	ldr	r0, [pc, #8]	; (8330 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    8326:	700b      	strb	r3, [r1, #0]
}
    8328:	bd30      	pop	{r4, r5, pc}
            return NRFX_ERROR_NO_MEM;
    832a:	4802      	ldr	r0, [pc, #8]	; (8334 <nrfx_flag32_alloc+0x44>)
    832c:	e7fc      	b.n	8328 <nrfx_flag32_alloc+0x38>
    832e:	bf00      	nop
    8330:	0bad0000 	.word	0x0bad0000
    8334:	0bad0002 	.word	0x0bad0002

00008338 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    8338:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    833a:	6803      	ldr	r3, [r0, #0]
    833c:	40cb      	lsrs	r3, r1
    833e:	07db      	lsls	r3, r3, #31
    8340:	d414      	bmi.n	836c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    8342:	2301      	movs	r3, #1
    8344:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    8346:	6802      	ldr	r2, [r0, #0]
    8348:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    834c:	ea43 0102 	orr.w	r1, r3, r2
    8350:	e850 4f00 	ldrex	r4, [r0]
    8354:	4294      	cmp	r4, r2
    8356:	d104      	bne.n	8362 <nrfx_flag32_free+0x2a>
    8358:	e840 1c00 	strex	ip, r1, [r0]
    835c:	f1bc 0f00 	cmp.w	ip, #0
    8360:	d1f6      	bne.n	8350 <nrfx_flag32_free+0x18>
    8362:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8366:	d1ee      	bne.n	8346 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    8368:	4801      	ldr	r0, [pc, #4]	; (8370 <nrfx_flag32_free+0x38>)
}
    836a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    836c:	4801      	ldr	r0, [pc, #4]	; (8374 <nrfx_flag32_free+0x3c>)
    836e:	e7fc      	b.n	836a <nrfx_flag32_free+0x32>
    8370:	0bad0000 	.word	0x0bad0000
    8374:	0bad0004 	.word	0x0bad0004

00008378 <nrfx_gppi_channels_enable>:
    p_reg->CHENCLR = ((uint32_t)0xFFFFFFFFuL);
}

NRF_STATIC_INLINE void nrf_ppi_channels_enable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    8378:	4b01      	ldr	r3, [pc, #4]	; (8380 <nrfx_gppi_channels_enable+0x8>)
    837a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}

void nrfx_gppi_channels_enable(uint32_t mask)
{
    nrf_ppi_channels_enable(NRF_PPI, mask);
}
    837e:	4770      	bx	lr
    8380:	4001f000 	.word	0x4001f000

00008384 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    8384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    8386:	4604      	mov	r4, r0
    8388:	b118      	cbz	r0, 8392 <clock_stop+0xe>
    838a:	2801      	cmp	r0, #1
    838c:	d023      	beq.n	83d6 <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    838e:	b003      	add	sp, #12
    8390:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    8392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8396:	2202      	movs	r2, #2
    8398:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    839c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    83a0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    83a4:	2201      	movs	r2, #1
    83a6:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    83a8:	4606      	mov	r6, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    83aa:	2301      	movs	r3, #1
    83ac:	f88d 3007 	strb.w	r3, [sp, #7]
    83b0:	f242 7510 	movw	r5, #10000	; 0x2710
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
    83b4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    switch (domain)
    83b8:	b1d4      	cbz	r4, 83f0 <clock_stop+0x6c>
    83ba:	2c01      	cmp	r4, #1
    83bc:	d1e7      	bne.n	838e <clock_stop+0xa>
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
    83be:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
    83c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
    83c6:	bbae      	cbnz	r6, 8434 <clock_stop+0xb0>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    83c8:	b383      	cbz	r3, 842c <clock_stop+0xa8>
    83ca:	2001      	movs	r0, #1
    83cc:	f005 f90e 	bl	d5ec <nrfx_busy_wait>
    83d0:	3d01      	subs	r5, #1
    83d2:	d1f4      	bne.n	83be <clock_stop+0x3a>
    83d4:	e02a      	b.n	842c <clock_stop+0xa8>
    p_reg->INTENCLR = mask;
    83d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    83da:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    83dc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    83e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    83e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    83e8:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    83ea:	f10d 0607 	add.w	r6, sp, #7
    83ee:	e7dc      	b.n	83aa <clock_stop+0x26>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    83f0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
    83f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
    83f8:	b93e      	cbnz	r6, 840a <clock_stop+0x86>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    83fa:	2b00      	cmp	r3, #0
    83fc:	d0c7      	beq.n	838e <clock_stop+0xa>
    83fe:	2001      	movs	r0, #1
    8400:	f005 f8f4 	bl	d5ec <nrfx_busy_wait>
    8404:	3d01      	subs	r5, #1
    8406:	d1f3      	bne.n	83f0 <clock_stop+0x6c>
    8408:	e7c1      	b.n	838e <clock_stop+0xa>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    840a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
    840e:	f002 0203 	and.w	r2, r2, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8412:	6032      	str	r2, [r6, #0]
    8414:	2b00      	cmp	r3, #0
    8416:	d0ba      	beq.n	838e <clock_stop+0xa>
    8418:	f89d 0007 	ldrb.w	r0, [sp, #7]
    841c:	2801      	cmp	r0, #1
    841e:	d103      	bne.n	8428 <clock_stop+0xa4>
    8420:	f005 f8e4 	bl	d5ec <nrfx_busy_wait>
    8424:	3d01      	subs	r5, #1
    8426:	d1c7      	bne.n	83b8 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    8428:	2c01      	cmp	r4, #1
    842a:	d1b0      	bne.n	838e <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    842c:	4b05      	ldr	r3, [pc, #20]	; (8444 <clock_stop+0xc0>)
    842e:	2200      	movs	r2, #0
    8430:	715a      	strb	r2, [r3, #5]
    8432:	e7ac      	b.n	838e <clock_stop+0xa>
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_SRC_Msk)
    8434:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
    8438:	f002 0201 	and.w	r2, r2, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    843c:	7032      	strb	r2, [r6, #0]
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    843e:	2b00      	cmp	r3, #0
    8440:	d1ea      	bne.n	8418 <clock_stop+0x94>
    8442:	e7f3      	b.n	842c <clock_stop+0xa8>
    8444:	200017e8 	.word	0x200017e8

00008448 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    8448:	4b04      	ldr	r3, [pc, #16]	; (845c <nrfx_clock_init+0x14>)
    844a:	791a      	ldrb	r2, [r3, #4]
    844c:	b922      	cbnz	r2, 8458 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    844e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    8450:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    8452:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    8454:	4802      	ldr	r0, [pc, #8]	; (8460 <nrfx_clock_init+0x18>)
    8456:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    8458:	4802      	ldr	r0, [pc, #8]	; (8464 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    845a:	4770      	bx	lr
    845c:	200017e8 	.word	0x200017e8
    8460:	0bad0000 	.word	0x0bad0000
    8464:	0bad000c 	.word	0x0bad000c

00008468 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    8468:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    846a:	2000      	movs	r0, #0
    846c:	f7fc fcb2 	bl	4dd4 <arch_irq_is_enabled>
    8470:	b908      	cbnz	r0, 8476 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8472:	f7fc fc8d 	bl	4d90 <arch_irq_enable>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    8476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    847a:	2200      	movs	r2, #0
    847c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    8480:	4b01      	ldr	r3, [pc, #4]	; (8488 <nrfx_clock_enable+0x20>)
    8482:	2201      	movs	r2, #1
    8484:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8486:	bd08      	pop	{r3, pc}
    8488:	20002026 	.word	0x20002026

0000848c <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    848c:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    848e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8492:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    8496:	b16a      	cbz	r2, 84b4 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8498:	2200      	movs	r2, #0
    849a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    849e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    84a2:	2201      	movs	r2, #1
    84a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    84a8:	4b11      	ldr	r3, [pc, #68]	; (84f0 <nrfx_clock_irq_handler+0x64>)
    84aa:	7958      	ldrb	r0, [r3, #5]
    84ac:	b910      	cbnz	r0, 84b4 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    84ae:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    84b0:	681b      	ldr	r3, [r3, #0]
    84b2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    84b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84b8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    84bc:	b172      	cbz	r2, 84dc <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84be:	2200      	movs	r2, #0
    84c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    84c4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    84c8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    84cc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    84d0:	0792      	lsls	r2, r2, #30
    84d2:	d104      	bne.n	84de <nrfx_clock_irq_handler+0x52>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    84d4:	2201      	movs	r2, #1
    84d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    84da:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    84dc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    84de:	2202      	movs	r2, #2
    84e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    84e4:	4b02      	ldr	r3, [pc, #8]	; (84f0 <nrfx_clock_irq_handler+0x64>)
}
    84e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    84ea:	681b      	ldr	r3, [r3, #0]
    84ec:	2001      	movs	r0, #1
    84ee:	4718      	bx	r3
    84f0:	200017e8 	.word	0x200017e8

000084f4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    84f4:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    84f6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    84fa:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    84fc:	6002      	str	r2, [r0, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    84fe:	d004      	beq.n	850a <nrf_gpio_pin_port_decode+0x16>
    NRF_GPIO_Type * p_port = NULL;
    8500:	2b01      	cmp	r3, #1
    8502:	4803      	ldr	r0, [pc, #12]	; (8510 <nrf_gpio_pin_port_decode+0x1c>)
    8504:	bf18      	it	ne
    8506:	2000      	movne	r0, #0
    8508:	4770      	bx	lr
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    850a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    850e:	4770      	bx	lr
    8510:	50000300 	.word	0x50000300

00008514 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrfy_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    8514:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8516:	f100 0308 	add.w	r3, r0, #8
    851a:	4c0c      	ldr	r4, [pc, #48]	; (854c <call_handler+0x38>)
    851c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    8520:	05da      	lsls	r2, r3, #23
{
    8522:	4605      	mov	r5, r0
    8524:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8526:	d507      	bpl.n	8538 <call_handler+0x24>
    8528:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    852c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    8530:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    8534:	6852      	ldr	r2, [r2, #4]
    8536:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    8538:	68a3      	ldr	r3, [r4, #8]
    853a:	b12b      	cbz	r3, 8548 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    853c:	68e2      	ldr	r2, [r4, #12]
    853e:	4631      	mov	r1, r6
    8540:	4628      	mov	r0, r5
    }
}
    8542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    8546:	4718      	bx	r3
}
    8548:	bd70      	pop	{r4, r5, r6, pc}
    854a:	bf00      	nop
    854c:	20000264 	.word	0x20000264

00008550 <release_handler>:
{
    8550:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8552:	4a12      	ldr	r2, [pc, #72]	; (859c <release_handler+0x4c>)
    8554:	3008      	adds	r0, #8
    8556:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    855a:	05d9      	lsls	r1, r3, #23
    855c:	d51b      	bpl.n	8596 <release_handler+0x46>
    855e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    8562:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    8566:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    856a:	f102 040e 	add.w	r4, r2, #14
    856e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    8570:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    8574:	f413 7f80 	tst.w	r3, #256	; 0x100
    8578:	d003      	beq.n	8582 <release_handler+0x32>
    857a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    857e:	4299      	cmp	r1, r3
    8580:	d009      	beq.n	8596 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8582:	3001      	adds	r0, #1
    8584:	2830      	cmp	r0, #48	; 0x30
    8586:	d1f3      	bne.n	8570 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    8588:	2300      	movs	r3, #0
    858a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    858e:	4804      	ldr	r0, [pc, #16]	; (85a0 <release_handler+0x50>)
}
    8590:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    8592:	f7ff bed1 	b.w	8338 <nrfx_flag32_free>
}
    8596:	bc10      	pop	{r4}
    8598:	4770      	bx	lr
    859a:	bf00      	nop
    859c:	20000264 	.word	0x20000264
    85a0:	200002d8 	.word	0x200002d8

000085a4 <__nrfy_internal_gpiote_events_process.constprop.0>:
        return true;
    }
    return false;
}

NRFY_STATIC_INLINE uint32_t __nrfy_internal_gpiote_events_process(NRF_GPIOTE_Type * p_reg,
    85a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    85a6:	4601      	mov	r1, r0
    85a8:	4a10      	ldr	r2, [pc, #64]	; (85ec <__nrfy_internal_gpiote_events_process.constprop.0+0x48>)
                                                                  uint32_t          mask)
{
    uint32_t event_mask = 0;

    nrf_barrier_r();
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
    85aa:	4c11      	ldr	r4, [pc, #68]	; (85f0 <__nrfy_internal_gpiote_events_process.constprop.0+0x4c>)
    uint32_t event_mask = 0;
    85ac:	2000      	movs	r0, #0
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
    85ae:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    85b0:	4606      	mov	r6, r0
    85b2:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
    85b6:	f5a3 43c2 	sub.w	r3, r3, #24832	; 0x6100
    85ba:	089b      	lsrs	r3, r3, #2
    85bc:	fa05 f303 	lsl.w	r3, r5, r3
    85c0:	4219      	tst	r1, r3
    85c2:	d004      	beq.n	85ce <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    85c4:	6817      	ldr	r7, [r2, #0]
    85c6:	b117      	cbz	r7, 85ce <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    85c8:	6016      	str	r6, [r2, #0]
    85ca:	6817      	ldr	r7, [r2, #0]
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
    85cc:	4318      	orrs	r0, r3
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
    85ce:	3204      	adds	r2, #4
    85d0:	42a2      	cmp	r2, r4
    85d2:	d1ee      	bne.n	85b2 <__nrfy_internal_gpiote_events_process.constprop.0+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    85d4:	4b07      	ldr	r3, [pc, #28]	; (85f4 <__nrfy_internal_gpiote_events_process.constprop.0+0x50>)
    85d6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
    85da:	b132      	cbz	r2, 85ea <__nrfy_internal_gpiote_events_process.constprop.0+0x46>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    85dc:	2200      	movs	r2, #0
    85de:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    85e2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
    85e6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    }

    (void)__nrfy_internal_gpiote_event_handle(p_reg, mask, NRF_GPIOTE_EVENT_PORT, &event_mask);

    return event_mask;
}
    85ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85ec:	40006100 	.word	0x40006100
    85f0:	40006120 	.word	0x40006120
    85f4:	40006000 	.word	0x40006000

000085f8 <nrfx_gpiote_input_configure>:
{
    85f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    85fc:	461d      	mov	r5, r3
    85fe:	4604      	mov	r4, r0
    8600:	4616      	mov	r6, r2
    if (p_input_config)
    8602:	460b      	mov	r3, r1
    8604:	b1e9      	cbz	r1, 8642 <nrfx_gpiote_input_configure+0x4a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8606:	4f4d      	ldr	r7, [pc, #308]	; (873c <nrfx_gpiote_input_configure+0x144>)
    8608:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    860c:	f837 2018 	ldrh.w	r2, [r7, r8, lsl #1]
    8610:	f002 0222 	and.w	r2, r2, #34	; 0x22
    8614:	2a22      	cmp	r2, #34	; 0x22
    8616:	d020      	beq.n	865a <nrfx_gpiote_input_configure+0x62>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    8618:	2200      	movs	r2, #0
                                              const nrf_gpio_pin_input_t * p_input,
                                              const nrf_gpio_pin_pull_t *  p_pull,
                                              const nrf_gpio_pin_drive_t * p_drive,
                                              const nrf_gpio_pin_sense_t * p_sense)
{
    nrf_gpio_reconfigure(pin_number, p_dir, p_input, p_pull, p_drive, p_sense);
    861a:	e9cd 2200 	strd	r2, r2, [sp]
    861e:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    8622:	f88d 200f 	strb.w	r2, [sp, #15]
    8626:	f10d 010e 	add.w	r1, sp, #14
    862a:	f10d 020f 	add.w	r2, sp, #15
    862e:	f005 f827 	bl	d680 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    8632:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    8636:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    863a:	f043 0301 	orr.w	r3, r3, #1
    863e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    8642:	b346      	cbz	r6, 8696 <nrfx_gpiote_input_configure+0x9e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8644:	4b3d      	ldr	r3, [pc, #244]	; (873c <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    8646:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    864a:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    864c:	f104 0708 	add.w	r7, r4, #8
    8650:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    8654:	0788      	lsls	r0, r1, #30
    8656:	d502      	bpl.n	865e <nrfx_gpiote_input_configure+0x66>
            if (use_evt)
    8658:	b1aa      	cbz	r2, 8686 <nrfx_gpiote_input_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    865a:	4839      	ldr	r0, [pc, #228]	; (8740 <nrfx_gpiote_input_configure+0x148>)
    865c:	e01d      	b.n	869a <nrfx_gpiote_input_configure+0xa2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    865e:	f021 0120 	bic.w	r1, r1, #32
    8662:	04c9      	lsls	r1, r1, #19
    8664:	0cc9      	lsrs	r1, r1, #19
    8666:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    866a:	b162      	cbz	r2, 8686 <nrfx_gpiote_input_configure+0x8e>
                if (!edge)
    866c:	f1bc 0f03 	cmp.w	ip, #3
    8670:	d8f3      	bhi.n	865a <nrfx_gpiote_input_configure+0x62>
                uint8_t ch = *p_trigger_config->p_in_channel;
    8672:	6872      	ldr	r2, [r6, #4]
    8674:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    8676:	f1bc 0f00 	cmp.w	ip, #0
    867a:	d111      	bne.n	86a0 <nrfx_gpiote_input_configure+0xa8>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    867c:	4a31      	ldr	r2, [pc, #196]	; (8744 <nrfx_gpiote_input_configure+0x14c>)
    867e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    8682:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    8686:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    868a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    868e:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    8692:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    8696:	bb45      	cbnz	r5, 86ea <nrfx_gpiote_input_configure+0xf2>
        err = NRFX_SUCCESS;
    8698:	482b      	ldr	r0, [pc, #172]	; (8748 <nrfx_gpiote_input_configure+0x150>)
}
    869a:	b004      	add	sp, #16
    869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    86a0:	00b2      	lsls	r2, r6, #2
    86a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    86a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    86aa:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    86ae:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    86b2:	f020 0003 	bic.w	r0, r0, #3
    86b6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    86ba:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    86be:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    86c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    86c6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    86ca:	0220      	lsls	r0, r4, #8
    86cc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    86d0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    86d4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    86d8:	ea40 000e 	orr.w	r0, r0, lr
    86dc:	f041 0120 	orr.w	r1, r1, #32
    86e0:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    86e4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    86e8:	e7cd      	b.n	8686 <nrfx_gpiote_input_configure+0x8e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    86ea:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    86ee:	4620      	mov	r0, r4
    86f0:	f7ff ff2e 	bl	8550 <release_handler>
    if (!handler)
    86f4:	2e00      	cmp	r6, #0
    86f6:	d0cf      	beq.n	8698 <nrfx_gpiote_input_configure+0xa0>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    86f8:	4d10      	ldr	r5, [pc, #64]	; (873c <nrfx_gpiote_input_configure+0x144>)
    86fa:	e9d5 2300 	ldrd	r2, r3, [r5]
    86fe:	4296      	cmp	r6, r2
    8700:	d101      	bne.n	8706 <nrfx_gpiote_input_configure+0x10e>
    8702:	429f      	cmp	r7, r3
    8704:	d018      	beq.n	8738 <nrfx_gpiote_input_configure+0x140>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    8706:	4811      	ldr	r0, [pc, #68]	; (874c <nrfx_gpiote_input_configure+0x154>)
    8708:	f10d 010f 	add.w	r1, sp, #15
    870c:	f7ff fdf0 	bl	82f0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    8710:	4b0d      	ldr	r3, [pc, #52]	; (8748 <nrfx_gpiote_input_configure+0x150>)
    8712:	4298      	cmp	r0, r3
    8714:	d1c1      	bne.n	869a <nrfx_gpiote_input_configure+0xa2>
        handler_id = (int32_t)id;
    8716:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    871a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    871e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8722:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    8724:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8726:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    872a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    872e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8732:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    8736:	e7af      	b.n	8698 <nrfx_gpiote_input_configure+0xa0>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8738:	2200      	movs	r2, #0
    873a:	e7ee      	b.n	871a <nrfx_gpiote_input_configure+0x122>
    873c:	20000264 	.word	0x20000264
    8740:	0bad0004 	.word	0x0bad0004
    8744:	40006000 	.word	0x40006000
    8748:	0bad0000 	.word	0x0bad0000
    874c:	200002d8 	.word	0x200002d8

00008750 <nrfx_gpiote_output_configure>:
{
    8750:	b5f0      	push	{r4, r5, r6, r7, lr}
    8752:	4604      	mov	r4, r0
    8754:	b085      	sub	sp, #20
    8756:	4615      	mov	r5, r2
    if (p_config)
    8758:	b309      	cbz	r1, 879e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    875a:	f100 0708 	add.w	r7, r0, #8
    875e:	4e31      	ldr	r6, [pc, #196]	; (8824 <nrfx_gpiote_output_configure+0xd4>)
    8760:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    8764:	0798      	lsls	r0, r3, #30
    8766:	d401      	bmi.n	876c <nrfx_gpiote_output_configure+0x1c>
    8768:	069a      	lsls	r2, r3, #26
    876a:	d458      	bmi.n	881e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    876c:	f013 0f1c 	tst.w	r3, #28
    8770:	d002      	beq.n	8778 <nrfx_gpiote_output_configure+0x28>
    8772:	784b      	ldrb	r3, [r1, #1]
    8774:	2b01      	cmp	r3, #1
    8776:	d052      	beq.n	881e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    8778:	2301      	movs	r3, #1
    877a:	f88d 300f 	strb.w	r3, [sp, #15]
    877e:	2300      	movs	r3, #0
    8780:	e9cd 1300 	strd	r1, r3, [sp]
    8784:	1c4a      	adds	r2, r1, #1
    8786:	1c8b      	adds	r3, r1, #2
    8788:	4620      	mov	r0, r4
    878a:	f10d 010f 	add.w	r1, sp, #15
    878e:	f004 ff77 	bl	d680 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    8792:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    8796:	f043 0303 	orr.w	r3, r3, #3
    879a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    879e:	b915      	cbnz	r5, 87a6 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    87a0:	4821      	ldr	r0, [pc, #132]	; (8828 <nrfx_gpiote_output_configure+0xd8>)
}
    87a2:	b005      	add	sp, #20
    87a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    87a6:	4e1f      	ldr	r6, [pc, #124]	; (8824 <nrfx_gpiote_output_configure+0xd4>)
    87a8:	f104 0708 	add.w	r7, r4, #8
    87ac:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    87b0:	0783      	lsls	r3, r0, #30
    87b2:	d534      	bpl.n	881e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    87b4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    87b8:	4661      	mov	r1, ip
    87ba:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    87bc:	f020 0020 	bic.w	r0, r0, #32
    87c0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    87c4:	04c0      	lsls	r0, r0, #19
    87c6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    87ca:	0cc0      	lsrs	r0, r0, #19
    87cc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    87d0:	2300      	movs	r3, #0
    87d2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    87d6:	786a      	ldrb	r2, [r5, #1]
    87d8:	2a00      	cmp	r2, #0
    87da:	d0e1      	beq.n	87a0 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    87dc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                       p_task_config->init_val);
    87e0:	78ad      	ldrb	r5, [r5, #2]
    87e2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    87e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    87ea:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    87ee:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    87f2:	0223      	lsls	r3, r4, #8
    87f4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    87f8:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    87fa:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    87fe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    8802:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8804:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    8806:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    880a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    880e:	432b      	orrs	r3, r5
    8810:	f040 0020 	orr.w	r0, r0, #32
    8814:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    8818:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    881c:	e7c0      	b.n	87a0 <nrfx_gpiote_output_configure+0x50>
{
    881e:	4803      	ldr	r0, [pc, #12]	; (882c <nrfx_gpiote_output_configure+0xdc>)
    8820:	e7bf      	b.n	87a2 <nrfx_gpiote_output_configure+0x52>
    8822:	bf00      	nop
    8824:	20000264 	.word	0x20000264
    8828:	0bad0000 	.word	0x0bad0000
    882c:	0bad0004 	.word	0x0bad0004

00008830 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    8830:	4b01      	ldr	r3, [pc, #4]	; (8838 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    8832:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    8836:	4770      	bx	lr
    8838:	20000264 	.word	0x20000264

0000883c <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    883c:	3008      	adds	r0, #8
    883e:	4b05      	ldr	r3, [pc, #20]	; (8854 <nrfx_gpiote_channel_get+0x18>)
    8840:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    8844:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8846:	bf43      	ittte	mi
    8848:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    884a:	4803      	ldrmi	r0, [pc, #12]	; (8858 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    884c:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    884e:	4803      	ldrpl	r0, [pc, #12]	; (885c <nrfx_gpiote_channel_get+0x20>)
}
    8850:	4770      	bx	lr
    8852:	bf00      	nop
    8854:	20000264 	.word	0x20000264
    8858:	0bad0000 	.word	0x0bad0000
    885c:	0bad0004 	.word	0x0bad0004

00008860 <nrfx_gpiote_init>:
{
    8860:	b570      	push	{r4, r5, r6, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    8862:	4c0f      	ldr	r4, [pc, #60]	; (88a0 <nrfx_gpiote_init+0x40>)
    8864:	f894 6078 	ldrb.w	r6, [r4, #120]	; 0x78
    8868:	b9be      	cbnz	r6, 889a <nrfx_gpiote_init+0x3a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    886a:	4d0e      	ldr	r5, [pc, #56]	; (88a4 <nrfx_gpiote_init+0x44>)
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    886c:	2260      	movs	r2, #96	; 0x60
    886e:	4631      	mov	r1, r6
    8870:	f104 0010 	add.w	r0, r4, #16
    8874:	f003 fe3d 	bl	c4f2 <memset>
    8878:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
    NRFX_IRQ_ENABLE(irqn);
    887c:	2006      	movs	r0, #6
    887e:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
    8882:	f7fc fa85 	bl	4d90 <arch_irq_enable>
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
    8886:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    888a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return err_code;
    888e:	4806      	ldr	r0, [pc, #24]	; (88a8 <nrfx_gpiote_init+0x48>)
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    8890:	2301      	movs	r3, #1
    8892:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    8896:	6763      	str	r3, [r4, #116]	; 0x74
}
    8898:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    889a:	4804      	ldr	r0, [pc, #16]	; (88ac <nrfx_gpiote_init+0x4c>)
    889c:	e7fc      	b.n	8898 <nrfx_gpiote_init+0x38>
    889e:	bf00      	nop
    88a0:	20000264 	.word	0x20000264
    88a4:	40006000 	.word	0x40006000
    88a8:	0bad0000 	.word	0x0bad0000
    88ac:	0bad0005 	.word	0x0bad0005

000088b0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    88b0:	4b03      	ldr	r3, [pc, #12]	; (88c0 <nrfx_gpiote_is_init+0x10>)
    88b2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    88b6:	3800      	subs	r0, #0
    88b8:	bf18      	it	ne
    88ba:	2001      	movne	r0, #1
    88bc:	4770      	bx	lr
    88be:	bf00      	nop
    88c0:	20000264 	.word	0x20000264

000088c4 <nrfx_gpiote_channel_free>:
{
    88c4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    88c6:	4801      	ldr	r0, [pc, #4]	; (88cc <nrfx_gpiote_channel_free+0x8>)
    88c8:	f7ff bd36 	b.w	8338 <nrfx_flag32_free>
    88cc:	200002d4 	.word	0x200002d4

000088d0 <nrfx_gpiote_channel_alloc>:
{
    88d0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    88d2:	4801      	ldr	r0, [pc, #4]	; (88d8 <nrfx_gpiote_channel_alloc+0x8>)
    88d4:	f7ff bd0c 	b.w	82f0 <nrfx_flag32_alloc>
    88d8:	200002d4 	.word	0x200002d4

000088dc <nrfx_gpiote_trigger_enable>:
{
    88dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    88de:	4b20      	ldr	r3, [pc, #128]	; (8960 <nrfx_gpiote_trigger_enable+0x84>)
    88e0:	f100 0208 	add.w	r2, r0, #8
{
    88e4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    88e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    88ea:	069a      	lsls	r2, r3, #26
    88ec:	d51d      	bpl.n	892a <nrfx_gpiote_trigger_enable+0x4e>
    88ee:	f013 0502 	ands.w	r5, r3, #2
    88f2:	d11a      	bne.n	892a <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    88f4:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    88f6:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    88f8:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    88fc:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    8900:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8904:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8908:	6005      	str	r5, [r0, #0]
    890a:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    890c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8910:	f040 0001 	orr.w	r0, r0, #1
    8914:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    8918:	b129      	cbz	r1, 8926 <nrfx_gpiote_trigger_enable+0x4a>
            nrfy_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    891a:	2201      	movs	r2, #1
    891c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
    8920:	4a10      	ldr	r2, [pc, #64]	; (8964 <nrfx_gpiote_trigger_enable+0x88>)
    8922:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    8926:	b003      	add	sp, #12
    8928:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    892a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    892e:	2b04      	cmp	r3, #4
    8930:	d012      	beq.n	8958 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    8932:	2b05      	cmp	r3, #5
    8934:	d012      	beq.n	895c <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8936:	a801      	add	r0, sp, #4
    8938:	9401      	str	r4, [sp, #4]
    893a:	f7ff fddb 	bl	84f4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    893e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    8940:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    8944:	40d9      	lsrs	r1, r3
    8946:	f001 0101 	and.w	r1, r1, #1
NRFY_STATIC_INLINE uint32_t nrfy_gpio_pin_read(uint32_t pin_number)
{
    nrf_barrier_r();
    uint32_t pin = nrf_gpio_pin_read(pin_number);
    nrf_barrier_r();
    return pin;
    894a:	3102      	adds	r1, #2
    nrf_gpio_cfg_sense_set(pin_number, sense_config);
    894c:	4620      	mov	r0, r4
}
    894e:	b003      	add	sp, #12
    8950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    8954:	f004 bedd 	b.w	d712 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    8958:	2103      	movs	r1, #3
    895a:	e7f7      	b.n	894c <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    895c:	2102      	movs	r1, #2
    895e:	e7f5      	b.n	894c <nrfx_gpiote_trigger_enable+0x70>
    8960:	20000264 	.word	0x20000264
    8964:	40006000 	.word	0x40006000

00008968 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    8968:	4b0e      	ldr	r3, [pc, #56]	; (89a4 <nrfx_gpiote_trigger_disable+0x3c>)
    896a:	f100 0208 	add.w	r2, r0, #8
    896e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8972:	0699      	lsls	r1, r3, #26
    8974:	d513      	bpl.n	899e <nrfx_gpiote_trigger_disable+0x36>
    8976:	079a      	lsls	r2, r3, #30
    8978:	d411      	bmi.n	899e <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    897a:	0b5b      	lsrs	r3, r3, #13
        nrfy_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    897c:	2201      	movs	r2, #1
    897e:	409a      	lsls	r2, r3
    p_reg->NRFX_CONCAT_2(INTENCLR, NRF_GPIOTE_IRQ_GROUP) = mask;
    8980:	009b      	lsls	r3, r3, #2
    8982:	4909      	ldr	r1, [pc, #36]	; (89a8 <nrfx_gpiote_trigger_disable+0x40>)
    8984:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8988:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    898c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8990:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    8994:	f022 0203 	bic.w	r2, r2, #3
    8998:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    899c:	4770      	bx	lr
    899e:	2100      	movs	r1, #0
    89a0:	f004 beb7 	b.w	d712 <nrf_gpio_cfg_sense_set>
    89a4:	20000264 	.word	0x20000264
    89a8:	40006000 	.word	0x40006000

000089ac <nrfx_gpiote_pin_uninit>:
{
    89ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    89ae:	4d17      	ldr	r5, [pc, #92]	; (8a0c <nrfx_gpiote_pin_uninit+0x60>)
    89b0:	f100 0608 	add.w	r6, r0, #8
{
    89b4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    89b6:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
    if (!pin_in_use(pin))
    89ba:	07d9      	lsls	r1, r3, #31
    89bc:	d524      	bpl.n	8a08 <nrfx_gpiote_pin_uninit+0x5c>
    nrfx_gpiote_trigger_disable(pin);
    89be:	f7ff ffd3 	bl	8968 <nrfx_gpiote_trigger_disable>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    89c2:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
    if (pin_in_use_by_te(pin))
    89c6:	069a      	lsls	r2, r3, #26
    89c8:	d506      	bpl.n	89d8 <nrfx_gpiote_pin_uninit+0x2c>
        nrfy_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    89ca:	0b5b      	lsrs	r3, r3, #13
    p_reg->CONFIG[idx] = 0;
    89cc:	4a10      	ldr	r2, [pc, #64]	; (8a10 <nrfx_gpiote_pin_uninit+0x64>)
    89ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    89d2:	2100      	movs	r1, #0
    89d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    89d8:	4620      	mov	r0, r4
    89da:	f7ff fdb9 	bl	8550 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    89de:	2300      	movs	r3, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    89e0:	a801      	add	r0, sp, #4
    89e2:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
    nrf_gpio_cfg(
    89e6:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    89e8:	f7ff fd84 	bl	84f4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    89ec:	9b01      	ldr	r3, [sp, #4]
    89ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cnf &= ~to_update;
    89f2:	4b08      	ldr	r3, [pc, #32]	; (8a14 <nrfx_gpiote_pin_uninit+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    89f4:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    89f8:	4013      	ands	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    89fa:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    89fe:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    nrf_gpio_cfg(
    8a02:	4805      	ldr	r0, [pc, #20]	; (8a18 <nrfx_gpiote_pin_uninit+0x6c>)
}
    8a04:	b002      	add	sp, #8
    8a06:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8a08:	4804      	ldr	r0, [pc, #16]	; (8a1c <nrfx_gpiote_pin_uninit+0x70>)
    8a0a:	e7fb      	b.n	8a04 <nrfx_gpiote_pin_uninit+0x58>
    8a0c:	20000264 	.word	0x20000264
    8a10:	40006000 	.word	0x40006000
    8a14:	fffcf8f0 	.word	0xfffcf8f0
    8a18:	0bad0000 	.word	0x0bad0000
    8a1c:	0bad0004 	.word	0x0bad0004

00008a20 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    8a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) & mask;
    8a24:	4b62      	ldr	r3, [pc, #392]	; (8bb0 <nrfx_gpiote_irq_handler+0x190>)
    8a26:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    8a2a:	b2c0      	uxtb	r0, r0
    8a2c:	b087      	sub	sp, #28
    uint32_t evt_mask = __nrfy_internal_gpiote_events_process(p_reg, mask);
    8a2e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    8a32:	f7ff fdb7 	bl	85a4 <__nrfy_internal_gpiote_events_process.constprop.0>
    uint32_t evt_mask = nrfy_gpiote_events_process(NRF_GPIOTE,
                                                   enabled_in_events |
                                                   (uint32_t)NRF_GPIOTE_INT_PORT_MASK);

    /* Handle PORT event. */
    if (evt_mask & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
    8a36:	1e05      	subs	r5, r0, #0
    8a38:	f280 809c 	bge.w	8b74 <nrfx_gpiote_irq_handler+0x154>
        *p_masks = gpio_regs[i]->LATCH;
    8a3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8a40:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8bb4 <nrfx_gpiote_irq_handler+0x194>
    8a44:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    8a48:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    8a4a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    8a4e:	f8d8 3520 	ldr.w	r3, [r8, #1312]	; 0x520
    8a52:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    8a54:	f8c8 3520 	str.w	r3, [r8, #1312]	; 0x520
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    8a58:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    8a5c:	f10d 0a10 	add.w	sl, sp, #16
    8a60:	ea4f 1349 	mov.w	r3, r9, lsl #5
    8a64:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    8a66:	f04f 0b01 	mov.w	fp, #1
    8a6a:	e049      	b.n	8b00 <nrfx_gpiote_irq_handler+0xe0>
                pin += 32 * i;
    8a6c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8a6e:	4a52      	ldr	r2, [pc, #328]	; (8bb8 <nrfx_gpiote_irq_handler+0x198>)
                uint32_t pin = NRF_CTZ(latch[i]);
    8a70:	fa94 f4a4 	rbit	r4, r4
    8a74:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    8a78:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    8a7a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8a7c:	f104 0308 	add.w	r3, r4, #8
    8a80:	9403      	str	r4, [sp, #12]
    8a82:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    8a86:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    8a8a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    8a8e:	fa0b f202 	lsl.w	r2, fp, r2
    8a92:	ea23 0302 	bic.w	r3, r3, r2
    8a96:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8a9a:	a803      	add	r0, sp, #12
    8a9c:	f7ff fd2a 	bl	84f4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8aa0:	9b03      	ldr	r3, [sp, #12]
    8aa2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8aa6:	08b9      	lsrs	r1, r7, #2
    8aa8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    8aac:	f3c7 0682 	ubfx	r6, r7, #2, #3
    if (is_level(trigger))
    8ab0:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8ab2:	4637      	mov	r7, r6
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    8ab4:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    8ab8:	d52c      	bpl.n	8b14 <nrfx_gpiote_irq_handler+0xf4>
        call_handler(pin, trigger);
    8aba:	4620      	mov	r0, r4
    8abc:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8abe:	b2de      	uxtb	r6, r3
    8ac0:	f7ff fd28 	bl	8514 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8ac4:	a803      	add	r0, sp, #12
    8ac6:	9403      	str	r4, [sp, #12]
    8ac8:	f7ff fd14 	bl	84f4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8acc:	9b03      	ldr	r3, [sp, #12]
    8ace:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8ad2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrfy_gpio_pin_sense_get(pin) == sense)
    8ad6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    8ada:	429e      	cmp	r6, r3
    8adc:	d107      	bne.n	8aee <nrfx_gpiote_irq_handler+0xce>
    8ade:	2100      	movs	r1, #0
    8ae0:	4620      	mov	r0, r4
    8ae2:	f004 fe16 	bl	d712 <nrf_gpio_cfg_sense_set>
    8ae6:	4631      	mov	r1, r6
    8ae8:	4620      	mov	r0, r4
    8aea:	f004 fe12 	bl	d712 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8aee:	a803      	add	r0, sp, #12
    8af0:	9403      	str	r4, [sp, #12]
    8af2:	f7ff fcff 	bl	84f4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    8af6:	9b03      	ldr	r3, [sp, #12]
    8af8:	fa0b f303 	lsl.w	r3, fp, r3
    8afc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    8b00:	f85a 4029 	ldr.w	r4, [sl, r9, lsl #2]
    8b04:	2c00      	cmp	r4, #0
    8b06:	d1b1      	bne.n	8a6c <nrfx_gpiote_irq_handler+0x4c>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    8b08:	f1b9 0f00 	cmp.w	r9, #0
    8b0c:	d11d      	bne.n	8b4a <nrfx_gpiote_irq_handler+0x12a>
    8b0e:	f04f 0901 	mov.w	r9, #1
    8b12:	e7a5      	b.n	8a60 <nrfx_gpiote_irq_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8b14:	2b02      	cmp	r3, #2
    8b16:	d10c      	bne.n	8b32 <nrfx_gpiote_irq_handler+0x112>
    8b18:	2103      	movs	r1, #3
    8b1a:	4620      	mov	r0, r4
    8b1c:	f004 fdf9 	bl	d712 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    8b20:	f006 0305 	and.w	r3, r6, #5
    8b24:	2b01      	cmp	r3, #1
    8b26:	d1e2      	bne.n	8aee <nrfx_gpiote_irq_handler+0xce>
            call_handler(pin, trigger);
    8b28:	4639      	mov	r1, r7
    8b2a:	4620      	mov	r0, r4
    8b2c:	f7ff fcf2 	bl	8514 <call_handler>
    8b30:	e7dd      	b.n	8aee <nrfx_gpiote_irq_handler+0xce>
    8b32:	2102      	movs	r1, #2
    8b34:	4620      	mov	r0, r4
    8b36:	9301      	str	r3, [sp, #4]
    8b38:	f004 fdeb 	bl	d712 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    8b3c:	2e03      	cmp	r6, #3
    8b3e:	d0f3      	beq.n	8b28 <nrfx_gpiote_irq_handler+0x108>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    8b40:	9b01      	ldr	r3, [sp, #4]
    8b42:	2b03      	cmp	r3, #3
    8b44:	d1d3      	bne.n	8aee <nrfx_gpiote_irq_handler+0xce>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    8b46:	2e02      	cmp	r6, #2
    8b48:	e7ed      	b.n	8b26 <nrfx_gpiote_irq_handler+0x106>
    8b4a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    8b4e:	f7ff fd29 	bl	85a4 <__nrfy_internal_gpiote_events_process.constprop.0>
        *p_masks = gpio_regs[i]->LATCH;
    8b52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8b56:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    8b5a:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    8b5c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    8b60:	f8d8 2520 	ldr.w	r2, [r8, #1312]	; 0x520
    8b64:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    8b66:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    8b68:	f8c8 2520 	str.w	r2, [r8, #1312]	; 0x520
    8b6c:	f47f af74 	bne.w	8a58 <nrfx_gpiote_irq_handler+0x38>
    {
        port_event_handle();
        evt_mask &= ~(uint32_t)NRF_GPIOTE_INT_PORT_MASK;
    8b70:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
        mask &= ~NRFX_BIT(ch);
    8b74:	2401      	movs	r4, #1
    while (mask)
    8b76:	b915      	cbnz	r5, 8b7e <nrfx_gpiote_irq_handler+0x15e>
    }

    /* Process pin events. */
    gpiote_evt_handle(evt_mask);
}
    8b78:	b007      	add	sp, #28
    8b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    8b7e:	fa95 f3a5 	rbit	r3, r5
    8b82:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    8b86:	fa04 f203 	lsl.w	r2, r4, r3
    8b8a:	009b      	lsls	r3, r3, #2
    8b8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8b90:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8b94:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8b98:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    8b9c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    8ba0:	f3c0 2005 	ubfx	r0, r0, #8, #6
    8ba4:	f3c1 4101 	ubfx	r1, r1, #16, #2
    8ba8:	f7ff fcb4 	bl	8514 <call_handler>
    8bac:	e7e3      	b.n	8b76 <nrfx_gpiote_irq_handler+0x156>
    8bae:	bf00      	nop
    8bb0:	40006000 	.word	0x40006000
    8bb4:	50000300 	.word	0x50000300
    8bb8:	20000264 	.word	0x20000264

00008bbc <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    8bbc:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    8bbe:	4c18      	ldr	r4, [pc, #96]	; (8c20 <nrfx_power_init+0x64>)
    8bc0:	7823      	ldrb	r3, [r4, #0]
    8bc2:	bb53      	cbnz	r3, 8c1a <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    8bc4:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    8bc6:	f3c2 0340 	ubfx	r3, r2, #1, #1
    8bca:	0792      	lsls	r2, r2, #30
    8bcc:	d512      	bpl.n	8bf4 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8bce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8bd2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    8bd6:	2a08      	cmp	r2, #8
    8bd8:	d10b      	bne.n	8bf2 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8bda:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    8bde:	2b05      	cmp	r3, #5
    8be0:	d807      	bhi.n	8bf2 <nrfx_power_init+0x36>
    8be2:	4a10      	ldr	r2, [pc, #64]	; (8c24 <nrfx_power_init+0x68>)
    8be4:	5cd3      	ldrb	r3, [r2, r3]
    8be6:	b123      	cbz	r3, 8bf2 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    8be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8bec:	2201      	movs	r2, #1
    8bee:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    8bf2:	2301      	movs	r3, #1
    8bf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8bf8:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    8bfc:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    8bfe:	f003 0301 	and.w	r3, r3, #1
    8c02:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8c06:	2000      	movs	r0, #0
    8c08:	f7fc f8e4 	bl	4dd4 <arch_irq_is_enabled>
    8c0c:	b908      	cbnz	r0, 8c12 <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8c0e:	f7fc f8bf 	bl	4d90 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    8c12:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    8c14:	4804      	ldr	r0, [pc, #16]	; (8c28 <nrfx_power_init+0x6c>)
    m_initialized = true;
    8c16:	7023      	strb	r3, [r4, #0]
}
    8c18:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    8c1a:	4804      	ldr	r0, [pc, #16]	; (8c2c <nrfx_power_init+0x70>)
    8c1c:	e7fc      	b.n	8c18 <nrfx_power_init+0x5c>
    8c1e:	bf00      	nop
    8c20:	20002027 	.word	0x20002027
    8c24:	0000f928 	.word	0x0000f928
    8c28:	0bad0000 	.word	0x0bad0000
    8c2c:	0bad000c 	.word	0x0bad000c

00008c30 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    8c30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c34:	f44f 7260 	mov.w	r2, #896	; 0x380
    8c38:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    8c3c:	4b01      	ldr	r3, [pc, #4]	; (8c44 <nrfx_power_usbevt_uninit+0x14>)
    8c3e:	2200      	movs	r2, #0
    8c40:	601a      	str	r2, [r3, #0]
}
    8c42:	4770      	bx	lr
    8c44:	200017f0 	.word	0x200017f0

00008c48 <nrfx_power_usbevt_init>:
{
    8c48:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    8c4a:	f7ff fff1 	bl	8c30 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    8c4e:	6803      	ldr	r3, [r0, #0]
    8c50:	b10b      	cbz	r3, 8c56 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    8c52:	4a01      	ldr	r2, [pc, #4]	; (8c58 <nrfx_power_usbevt_init+0x10>)
    8c54:	6013      	str	r3, [r2, #0]
}
    8c56:	bd08      	pop	{r3, pc}
    8c58:	200017f0 	.word	0x200017f0

00008c5c <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    8c5c:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    8c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c62:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    8c66:	0762      	lsls	r2, r4, #29
    8c68:	d507      	bpl.n	8c7a <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    8c6a:	f44f 7084 	mov.w	r0, #264	; 0x108
    8c6e:	f004 fd5f 	bl	d730 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    8c72:	b110      	cbz	r0, 8c7a <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    8c74:	4b1e      	ldr	r3, [pc, #120]	; (8cf0 <nrfx_power_irq_handler+0x94>)
    8c76:	681b      	ldr	r3, [r3, #0]
    8c78:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    8c7a:	06a3      	lsls	r3, r4, #26
    8c7c:	d508      	bpl.n	8c90 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    8c7e:	f44f 708a 	mov.w	r0, #276	; 0x114
    8c82:	f004 fd55 	bl	d730 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    8c86:	b118      	cbz	r0, 8c90 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    8c88:	4b1a      	ldr	r3, [pc, #104]	; (8cf4 <nrfx_power_irq_handler+0x98>)
    8c8a:	2000      	movs	r0, #0
    8c8c:	681b      	ldr	r3, [r3, #0]
    8c8e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    8c90:	0660      	lsls	r0, r4, #25
    8c92:	d508      	bpl.n	8ca6 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    8c94:	f44f 708c 	mov.w	r0, #280	; 0x118
    8c98:	f004 fd4a 	bl	d730 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    8c9c:	b118      	cbz	r0, 8ca6 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    8c9e:	4b15      	ldr	r3, [pc, #84]	; (8cf4 <nrfx_power_irq_handler+0x98>)
    8ca0:	2001      	movs	r0, #1
    8ca2:	681b      	ldr	r3, [r3, #0]
    8ca4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    8ca6:	0621      	lsls	r1, r4, #24
    8ca8:	d508      	bpl.n	8cbc <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    8caa:	f44f 708e 	mov.w	r0, #284	; 0x11c
    8cae:	f004 fd3f 	bl	d730 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    8cb2:	b118      	cbz	r0, 8cbc <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    8cb4:	4b10      	ldr	r3, [pc, #64]	; (8cf8 <nrfx_power_irq_handler+0x9c>)
    8cb6:	2000      	movs	r0, #0
    8cb8:	681b      	ldr	r3, [r3, #0]
    8cba:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    8cbc:	05e2      	lsls	r2, r4, #23
    8cbe:	d508      	bpl.n	8cd2 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    8cc0:	f44f 7090 	mov.w	r0, #288	; 0x120
    8cc4:	f004 fd34 	bl	d730 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    8cc8:	b118      	cbz	r0, 8cd2 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    8cca:	4b0b      	ldr	r3, [pc, #44]	; (8cf8 <nrfx_power_irq_handler+0x9c>)
    8ccc:	2001      	movs	r0, #1
    8cce:	681b      	ldr	r3, [r3, #0]
    8cd0:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    8cd2:	05a3      	lsls	r3, r4, #22
    8cd4:	d50a      	bpl.n	8cec <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    8cd6:	f44f 7092 	mov.w	r0, #292	; 0x124
    8cda:	f004 fd29 	bl	d730 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    8cde:	b128      	cbz	r0, 8cec <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    8ce0:	4b05      	ldr	r3, [pc, #20]	; (8cf8 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    8ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    8ce6:	681b      	ldr	r3, [r3, #0]
    8ce8:	2002      	movs	r0, #2
    8cea:	4718      	bx	r3
}
    8cec:	bd10      	pop	{r4, pc}
    8cee:	bf00      	nop
    8cf0:	200017f8 	.word	0x200017f8
    8cf4:	200017f4 	.word	0x200017f4
    8cf8:	200017f0 	.word	0x200017f0

00008cfc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    8cfc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    8cfe:	4801      	ldr	r0, [pc, #4]	; (8d04 <nrfx_ppi_channel_alloc+0x8>)
    8d00:	f7ff baf6 	b.w	82f0 <nrfx_flag32_alloc>
    8d04:	200002e0 	.word	0x200002e0

00008d08 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    8d08:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    8d0a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8d0e:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    8d10:	6002      	str	r2, [r0, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8d12:	d004      	beq.n	8d1e <nrf_gpio_pin_port_decode+0x16>
    NRF_GPIO_Type * p_port = NULL;
    8d14:	2b01      	cmp	r3, #1
    8d16:	4803      	ldr	r0, [pc, #12]	; (8d24 <nrf_gpio_pin_port_decode+0x1c>)
    8d18:	bf18      	it	ne
    8d1a:	2000      	movne	r0, #0
    8d1c:	4770      	bx	lr
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8d1e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    8d22:	4770      	bx	lr
    8d24:	50000300 	.word	0x50000300

00008d28 <nrf_gpio_cfg_output>:
{
    8d28:	b507      	push	{r0, r1, r2, lr}
    8d2a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8d2c:	a801      	add	r0, sp, #4
    8d2e:	f7ff ffeb 	bl	8d08 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8d32:	9b01      	ldr	r3, [sp, #4]
    8d34:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cnf &= ~to_update;
    8d38:	4b05      	ldr	r3, [pc, #20]	; (8d50 <nrf_gpio_cfg_output+0x28>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8d3a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    8d3e:	4013      	ands	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    8d40:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    8d44:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    8d48:	b003      	add	sp, #12
    8d4a:	f85d fb04 	ldr.w	pc, [sp], #4
    8d4e:	bf00      	nop
    8d50:	fffcf8f0 	.word	0xfffcf8f0

00008d54 <spi_configure>:
    }
}

static void spi_configure(nrfx_spi_t const *        p_instance,
                          nrfx_spi_config_t const * p_config)
{
    8d54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!p_config->skip_gpio_cfg)
    8d56:	7bcb      	ldrb	r3, [r1, #15]
{
    8d58:	4604      	mov	r4, r0
    if (!p_config->skip_gpio_cfg)
    8d5a:	2b00      	cmp	r3, #0
    8d5c:	d138      	bne.n	8dd0 <spi_configure+0x7c>
        if (p_config->mode <= NRF_SPI_MODE_1)
    8d5e:	7b0b      	ldrb	r3, [r1, #12]
            nrf_gpio_pin_clear(p_config->sck_pin);
    8d60:	7808      	ldrb	r0, [r1, #0]
        if (p_config->mode <= NRF_SPI_MODE_1)
    8d62:	2b01      	cmp	r3, #1
    8d64:	d877      	bhi.n	8e56 <spi_configure+0x102>
            nrf_gpio_pin_clear(p_config->sck_pin);
    8d66:	f004 fd11 	bl	d78c <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    8d6a:	780b      	ldrb	r3, [r1, #0]
    8d6c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8d6e:	a801      	add	r0, sp, #4
    8d70:	f7ff ffca 	bl	8d08 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8d74:	9b01      	ldr	r3, [sp, #4]
    8d76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cnf &= ~to_update;
    8d7a:	4b3c      	ldr	r3, [pc, #240]	; (8e6c <spi_configure+0x118>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8d7c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    8d80:	4013      	ands	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    8d82:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    8d86:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    8d8a:	7848      	ldrb	r0, [r1, #1]
    8d8c:	28ff      	cmp	r0, #255	; 0xff
    8d8e:	d004      	beq.n	8d9a <spi_configure+0x46>
            nrf_gpio_pin_clear(p_config->mosi_pin);
    8d90:	f004 fcfc 	bl	d78c <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
    8d94:	7848      	ldrb	r0, [r1, #1]
    8d96:	f7ff ffc7 	bl	8d28 <nrf_gpio_cfg_output>
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    8d9a:	788b      	ldrb	r3, [r1, #2]
    8d9c:	2bff      	cmp	r3, #255	; 0xff
    8d9e:	d00f      	beq.n	8dc0 <spi_configure+0x6c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8da0:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
    8da2:	7b8d      	ldrb	r5, [r1, #14]
    8da4:	9301      	str	r3, [sp, #4]
    8da6:	f7ff ffaf 	bl	8d08 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8daa:	9b01      	ldr	r3, [sp, #4]
    8dac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cnf &= ~to_update;
    8db0:	4b2e      	ldr	r3, [pc, #184]	; (8e6c <spi_configure+0x118>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8db2:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    8db6:	4013      	ands	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    8db8:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    8dbc:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    8dc0:	78c8      	ldrb	r0, [r1, #3]
    8dc2:	28ff      	cmp	r0, #255	; 0xff
    8dc4:	d004      	beq.n	8dd0 <spi_configure+0x7c>
            nrf_gpio_pin_set(p_config->ss_pin);
    8dc6:	f004 fcd4 	bl	d772 <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
    8dca:	78c8      	ldrb	r0, [r1, #3]
    8dcc:	f7ff ffac 	bl	8d28 <nrf_gpio_cfg_output>
    pins_configure(p_config);
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
    8dd0:	7923      	ldrb	r3, [r4, #4]
    8dd2:	4827      	ldr	r0, [pc, #156]	; (8e70 <spi_configure+0x11c>)
    8dd4:	78ca      	ldrb	r2, [r1, #3]
    8dd6:	2528      	movs	r5, #40	; 0x28
    8dd8:	fb05 0303 	mla	r3, r5, r3, r0
    8ddc:	779a      	strb	r2, [r3, #30]

    if (!p_config->skip_psel_cfg)
    8dde:	7c0b      	ldrb	r3, [r1, #16]
    8de0:	b99b      	cbnz	r3, 8e0a <spi_configure+0xb6>
    {
        uint32_t mosi_pin = p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED ?
    8de2:	784b      	ldrb	r3, [r1, #1]
                            p_config->mosi_pin : NRF_SPI_PIN_NOT_CONNECTED;
        uint32_t miso_pin = p_config->miso_pin != NRFX_SPI_PIN_NOT_USED ?
                            p_config->miso_pin : NRF_SPI_PIN_NOT_CONNECTED;

        nrf_spi_pins_set(p_instance->p_reg, p_config->sck_pin, mosi_pin, miso_pin);
    8de4:	6825      	ldr	r5, [r4, #0]
    8de6:	780e      	ldrb	r6, [r1, #0]
                            p_config->mosi_pin : NRF_SPI_PIN_NOT_CONNECTED;
    8de8:	2bff      	cmp	r3, #255	; 0xff
    8dea:	bf18      	it	ne
    8dec:	461a      	movne	r2, r3
        uint32_t miso_pin = p_config->miso_pin != NRFX_SPI_PIN_NOT_USED ?
    8dee:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
    8df0:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
                            p_config->mosi_pin : NRF_SPI_PIN_NOT_CONNECTED;
    8df4:	bf08      	it	eq
    8df6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
                            p_config->miso_pin : NRF_SPI_PIN_NOT_CONNECTED;
    8dfa:	2bff      	cmp	r3, #255	; 0xff
    8dfc:	bf08      	it	eq
    8dfe:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
    8e02:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
    8e06:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    }
    nrf_spi_frequency_set(p_instance->p_reg, p_config->frequency);
    8e0a:	6823      	ldr	r3, [r4, #0]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    8e0c:	688a      	ldr	r2, [r1, #8]
    8e0e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    8e12:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_configure(p_instance->p_reg, p_config->mode, p_config->bit_order);
    8e14:	7b0a      	ldrb	r2, [r1, #12]
    8e16:	6825      	ldr	r5, [r4, #0]
    8e18:	3b00      	subs	r3, #0
    8e1a:	bf18      	it	ne
    8e1c:	2301      	movne	r3, #1
    switch (spi_mode)
    8e1e:	2a02      	cmp	r2, #2
    8e20:	d01c      	beq.n	8e5c <spi_configure+0x108>
    8e22:	2a03      	cmp	r2, #3
    8e24:	d01d      	beq.n	8e62 <spi_configure+0x10e>
    8e26:	2a01      	cmp	r2, #1
    8e28:	d101      	bne.n	8e2e <spi_configure+0xda>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    8e2a:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    8e2e:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    8e32:	7923      	ldrb	r3, [r4, #4]
    8e34:	7949      	ldrb	r1, [r1, #5]
    8e36:	2228      	movs	r2, #40	; 0x28
    8e38:	fb02 0303 	mla	r3, r2, r3, r0
    8e3c:	77d9      	strb	r1, [r3, #31]

    if (m_cb[p_instance->drv_inst_idx].handler)
    8e3e:	7923      	ldrb	r3, [r4, #4]
    8e40:	4353      	muls	r3, r2
    8e42:	58c3      	ldr	r3, [r0, r3]
    8e44:	b183      	cbz	r3, 8e68 <spi_configure+0x114>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    8e46:	6820      	ldr	r0, [r4, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    8e48:	f340 3007 	sbfx	r0, r0, #12, #8
    }
}
    8e4c:	b002      	add	sp, #8
    8e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    8e52:	f7fb bf9d 	b.w	4d90 <arch_irq_enable>
            nrf_gpio_pin_set(p_config->sck_pin);
    8e56:	f004 fc8c 	bl	d772 <nrf_gpio_pin_set>
    8e5a:	e786      	b.n	8d6a <spi_configure+0x16>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    8e5c:	f043 0304 	orr.w	r3, r3, #4
        break;
    8e60:	e7e5      	b.n	8e2e <spi_configure+0xda>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    8e62:	f043 0306 	orr.w	r3, r3, #6
        break;
    8e66:	e7e2      	b.n	8e2e <spi_configure+0xda>
}
    8e68:	b002      	add	sp, #8
    8e6a:	bd70      	pop	{r4, r5, r6, pc}
    8e6c:	fffcf8f0 	.word	0xfffcf8f0
    8e70:	200017fc 	.word	0x200017fc

00008e74 <nrf_gpio_cfg_default>:
{
    8e74:	b507      	push	{r0, r1, r2, lr}
    8e76:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8e78:	a801      	add	r0, sp, #4
    8e7a:	f7ff ff45 	bl	8d08 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8e7e:	9b01      	ldr	r3, [sp, #4]
    8e80:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cnf &= ~to_update;
    8e84:	4b05      	ldr	r3, [pc, #20]	; (8e9c <nrf_gpio_cfg_default+0x28>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8e86:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    8e8a:	4013      	ands	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    8e8c:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    8e90:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    8e94:	b003      	add	sp, #12
    8e96:	f85d fb04 	ldr.w	pc, [sp], #4
    8e9a:	bf00      	nop
    8e9c:	fffcf8f0 	.word	0xfffcf8f0

00008ea0 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    8ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    8ea4:	f890 8004 	ldrb.w	r8, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    8ea8:	4c14      	ldr	r4, [pc, #80]	; (8efc <nrfx_spi_init+0x5c>)
    8eaa:	f04f 0c28 	mov.w	ip, #40	; 0x28
    8eae:	fb0c fc08 	mul.w	ip, ip, r8
    8eb2:	eb04 060c 	add.w	r6, r4, ip
{
    8eb6:	4607      	mov	r7, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    8eb8:	f896 e01c 	ldrb.w	lr, [r6, #28]
    8ebc:	f1be 0f00 	cmp.w	lr, #0
    8ec0:	d119      	bne.n	8ef6 <nrfx_spi_init+0x56>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    8ec2:	f844 200c 	str.w	r2, [r4, ip]
    p_cb->p_context = p_context;
    8ec6:	6073      	str	r3, [r6, #4]

    if (p_config)
    8ec8:	b141      	cbz	r1, 8edc <nrfx_spi_init+0x3c>
    {
        p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    8eca:	7bcb      	ldrb	r3, [r1, #15]
    8ecc:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
        p_cb->ss_pin = p_config->ss_pin;
    8ed0:	78cb      	ldrb	r3, [r1, #3]
    8ed2:	77b3      	strb	r3, [r6, #30]
        p_cb->orc = p_config->orc;
    8ed4:	794b      	ldrb	r3, [r1, #5]
    8ed6:	77f3      	strb	r3, [r6, #31]

        spi_configure(p_instance, p_config);
    8ed8:	f7ff ff3c 	bl	8d54 <spi_configure>
    }
    nrf_spi_enable(p_instance->p_reg);
    8edc:	683a      	ldr	r2, [r7, #0]
    p_cb->transfer_in_progress = false;
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    8ede:	4808      	ldr	r0, [pc, #32]	; (8f00 <nrfx_spi_init+0x60>)
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    8ee0:	2301      	movs	r3, #1
    8ee2:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    p_cb->transfer_in_progress = false;
    8ee6:	2228      	movs	r2, #40	; 0x28
    8ee8:	fb02 4408 	mla	r4, r2, r8, r4
    8eec:	2200      	movs	r2, #0
    8eee:	7762      	strb	r2, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    8ef0:	7723      	strb	r3, [r4, #28]
}
    8ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
    8ef6:	4803      	ldr	r0, [pc, #12]	; (8f04 <nrfx_spi_init+0x64>)
    8ef8:	e7fb      	b.n	8ef2 <nrfx_spi_init+0x52>
    8efa:	bf00      	nop
    8efc:	200017fc 	.word	0x200017fc
    8f00:	0bad0000 	.word	0x0bad0000
    8f04:	0bad0005 	.word	0x0bad0005

00008f08 <nrfx_spi_uninit>:
    nrf_spi_enable(p_instance->p_reg);
    return NRFX_SUCCESS;
}

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    8f08:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    8f0a:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
    8f0c:	4c19      	ldr	r4, [pc, #100]	; (8f74 <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    8f0e:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    8f10:	2328      	movs	r3, #40	; 0x28
    8f12:	4373      	muls	r3, r6
    8f14:	58e3      	ldr	r3, [r4, r3]
    8f16:	b133      	cbz	r3, 8f26 <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    8f18:	f345 3007 	sbfx	r0, r5, #12, #8
    8f1c:	f7fb ff46 	bl	4dac <arch_irq_disable>
    p_reg->INTENCLR = mask;
    8f20:	2304      	movs	r3, #4
    8f22:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    8f26:	2300      	movs	r3, #0
    8f28:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
    8f2c:	2328      	movs	r3, #40	; 0x28
    8f2e:	fb03 4306 	mla	r3, r3, r6, r4
    8f32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    8f36:	b9bb      	cbnz	r3, 8f68 <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
    8f38:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
    8f3c:	f7ff ff9a 	bl	8e74 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
    8f40:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    8f44:	1c42      	adds	r2, r0, #1
    8f46:	d001      	beq.n	8f4c <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
    8f48:	f7ff ff94 	bl	8e74 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
    8f4c:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    8f50:	1c43      	adds	r3, r0, #1
    8f52:	d001      	beq.n	8f58 <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
    8f54:	f7ff ff8e 	bl	8e74 <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    8f58:	2328      	movs	r3, #40	; 0x28
    8f5a:	fb03 4306 	mla	r3, r3, r6, r4
    8f5e:	7f98      	ldrb	r0, [r3, #30]
    8f60:	28ff      	cmp	r0, #255	; 0xff
    8f62:	d001      	beq.n	8f68 <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
    8f64:	f7ff ff86 	bl	8e74 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    8f68:	2328      	movs	r3, #40	; 0x28
    8f6a:	fb03 4406 	mla	r4, r3, r6, r4
    8f6e:	2300      	movs	r3, #0
    8f70:	7723      	strb	r3, [r4, #28]
}
    8f72:	bd70      	pop	{r4, r5, r6, pc}
    8f74:	200017fc 	.word	0x200017fc

00008f78 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    8f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    8f7c:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    8f7e:	4c39      	ldr	r4, [pc, #228]	; (9064 <nrfx_spi_xfer+0xec>)
    8f80:	2328      	movs	r3, #40	; 0x28
    8f82:	437b      	muls	r3, r7
{
    8f84:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
    8f86:	18e2      	adds	r2, r4, r3
{
    8f88:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
    8f8a:	7f51      	ldrb	r1, [r2, #29]
{
    8f8c:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
    8f8e:	2900      	cmp	r1, #0
    8f90:	d166      	bne.n	9060 <nrfx_spi_xfer+0xe8>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    8f92:	58e3      	ldr	r3, [r4, r3]
    8f94:	b10b      	cbz	r3, 8f9a <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
    8f96:	2301      	movs	r3, #1
    8f98:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    8f9a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    8f9e:	2528      	movs	r5, #40	; 0x28
    8fa0:	fb05 4507 	mla	r5, r5, r7, r4
    8fa4:	f105 0c0c 	add.w	ip, r5, #12
    8fa8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    8fac:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
    8fae:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    8fb0:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
    8fb2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    8fb6:	d001      	beq.n	8fbc <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
    8fb8:	f004 fbe8 	bl	d78c <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    8fbc:	2328      	movs	r3, #40	; 0x28
    8fbe:	f1b8 0f00 	cmp.w	r8, #0
    8fc2:	d006      	beq.n	8fd2 <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
    8fc4:	fb03 4307 	mla	r3, r3, r7, r4
    8fc8:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    8fca:	4827      	ldr	r0, [pc, #156]	; (9068 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
    8fcc:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    8fd2:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
    8fd6:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
    8fda:	2204      	movs	r2, #4
    8fdc:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
    8fe0:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8fe4:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
    8fe8:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    nrf_spi_txd_set(p_spi,
    8fec:	6872      	ldr	r2, [r6, #4]
    8fee:	b19a      	cbz	r2, 9018 <nrfx_spi_xfer+0xa0>
    8ff0:	6833      	ldr	r3, [r6, #0]
    8ff2:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    8ff4:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    8ff8:	6873      	ldr	r3, [r6, #4]
    8ffa:	2b01      	cmp	r3, #1
    8ffc:	d90e      	bls.n	901c <nrfx_spi_xfer+0xa4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    8ffe:	6833      	ldr	r3, [r6, #0]
    9000:	785b      	ldrb	r3, [r3, #1]
    9002:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
    9006:	2328      	movs	r3, #40	; 0x28
    9008:	437b      	muls	r3, r7
    900a:	58e6      	ldr	r6, [r4, r3]
    900c:	b176      	cbz	r6, 902c <nrfx_spi_xfer+0xb4>
    p_reg->INTENSET = mask;
    900e:	2304      	movs	r3, #4
    9010:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    9014:	4815      	ldr	r0, [pc, #84]	; (906c <nrfx_spi_xfer+0xf4>)
    9016:	e7da      	b.n	8fce <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
    9018:	7fdb      	ldrb	r3, [r3, #31]
    901a:	e7eb      	b.n	8ff4 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
    901c:	68f3      	ldr	r3, [r6, #12]
    901e:	2b01      	cmp	r3, #1
    9020:	d9f1      	bls.n	9006 <nrfx_spi_xfer+0x8e>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    9022:	2328      	movs	r3, #40	; 0x28
    9024:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
    9028:	7fdb      	ldrb	r3, [r3, #31]
    902a:	e7ea      	b.n	9002 <nrfx_spi_xfer+0x8a>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    902c:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    9030:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9034:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    9038:	2b00      	cmp	r3, #0
    903a:	d0fb      	beq.n	9034 <nrfx_spi_xfer+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    903c:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    9040:	4628      	mov	r0, r5
    9042:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    9046:	f004 fbae 	bl	d7a6 <transfer_byte>
    904a:	2800      	cmp	r0, #0
    904c:	d1f2      	bne.n	9034 <nrfx_spi_xfer+0xbc>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    904e:	2328      	movs	r3, #40	; 0x28
    9050:	fb03 4407 	mla	r4, r3, r7, r4
    9054:	7fa0      	ldrb	r0, [r4, #30]
    9056:	28ff      	cmp	r0, #255	; 0xff
    9058:	d0dc      	beq.n	9014 <nrfx_spi_xfer+0x9c>
        nrf_gpio_pin_set(pin_number);
    905a:	f004 fb8a 	bl	d772 <nrf_gpio_pin_set>
    905e:	e7d9      	b.n	9014 <nrfx_spi_xfer+0x9c>
        return err_code;
    9060:	4803      	ldr	r0, [pc, #12]	; (9070 <nrfx_spi_xfer+0xf8>)
    9062:	e7b4      	b.n	8fce <nrfx_spi_xfer+0x56>
    9064:	200017fc 	.word	0x200017fc
    9068:	0bad0003 	.word	0x0bad0003
    906c:	0bad0000 	.word	0x0bad0000
    9070:	0bad000b 	.word	0x0bad000b

00009074 <nrfx_spi_0_irq_handler>:
    {
        finish_transfer(p_cb);
    }
}

NRFX_INSTANCE_IRQ_HANDLERS(SPI, spi)
    9074:	b510      	push	{r4, lr}
    9076:	480c      	ldr	r0, [pc, #48]	; (90a8 <nrfx_spi_0_irq_handler+0x34>)
    if (!transfer_byte(p_spi, p_cb))
    9078:	490c      	ldr	r1, [pc, #48]	; (90ac <nrfx_spi_0_irq_handler+0x38>)
    907a:	2300      	movs	r3, #0
    907c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    9080:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    9084:	f004 fb8f 	bl	d7a6 <transfer_byte>
    9088:	b968      	cbnz	r0, 90a6 <nrfx_spi_0_irq_handler+0x32>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    908a:	7f88      	ldrb	r0, [r1, #30]
    908c:	28ff      	cmp	r0, #255	; 0xff
    908e:	d001      	beq.n	9094 <nrfx_spi_0_irq_handler+0x20>
    9090:	f004 fb6f 	bl	d772 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
    9094:	2300      	movs	r3, #0
    9096:	774b      	strb	r3, [r1, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    9098:	720b      	strb	r3, [r1, #8]
NRFX_INSTANCE_IRQ_HANDLERS(SPI, spi)
    909a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    909e:	e9d1 3100 	ldrd	r3, r1, [r1]
    90a2:	4803      	ldr	r0, [pc, #12]	; (90b0 <nrfx_spi_0_irq_handler+0x3c>)
    90a4:	4718      	bx	r3
NRFX_INSTANCE_IRQ_HANDLERS(SPI, spi)
    90a6:	bd10      	pop	{r4, pc}
    90a8:	40003000 	.word	0x40003000
    90ac:	200017fc 	.word	0x200017fc
    90b0:	20001804 	.word	0x20001804

000090b4 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
    90b4:	b530      	push	{r4, r5, lr}
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    90b6:	f000 041f 	and.w	r4, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    90ba:	0940      	lsrs	r0, r0, #5
    90bc:	d011      	beq.n	90e2 <nrf_gpio_cfg.constprop.0+0x2e>
    90be:	2801      	cmp	r0, #1
    90c0:	d112      	bne.n	90e8 <nrf_gpio_cfg.constprop.0+0x34>
    90c2:	480c      	ldr	r0, [pc, #48]	; (90f4 <nrf_gpio_cfg.constprop.0+0x40>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    90c4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)  |
    90c8:	021b      	lsls	r3, r3, #8
    uint32_t cnf = reg->PIN_CNF[pin_number];
    90ca:	f8d0 5700 	ldr.w	r5, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    90ce:	4c0a      	ldr	r4, [pc, #40]	; (90f8 <nrf_gpio_cfg.constprop.0+0x44>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
    90d0:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
    cnf &= ~to_update;
    90d4:	402c      	ands	r4, r5
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
    90d6:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    90da:	4321      	orrs	r1, r4
    reg->PIN_CNF[pin_number] = cnf;
    90dc:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    90e0:	bd30      	pop	{r4, r5, pc}
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
    90e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    90e6:	e7ed      	b.n	90c4 <nrf_gpio_cfg.constprop.0+0x10>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    90e8:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    90ec:	2300      	movs	r3, #0
    90ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    90f2:	deff      	udf	#255	; 0xff
    90f4:	50000300 	.word	0x50000300
    90f8:	fffcf8f0 	.word	0xfffcf8f0

000090fc <twi_configure>:
}

static void twi_configure(nrfx_twi_t const *        p_instance,
                          nrfx_twi_config_t const * p_config)
{
    if (!p_config->skip_psel_cfg)
    90fc:	7bcb      	ldrb	r3, [r1, #15]
{
    90fe:	b410      	push	{r4}
    if (!p_config->skip_psel_cfg)
    9100:	b933      	cbnz	r3, 9110 <twi_configure+0x14>
    {
        nrf_twi_pins_set(p_instance->p_twi, p_config->scl, p_config->sda);
    9102:	e9d1 4200 	ldrd	r4, r2, [r1]
    9106:	6803      	ldr	r3, [r0, #0]
    p_reg->PSEL.SCL = scl_pin;
    9108:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    910c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    }
    nrf_twi_frequency_set(p_instance->p_twi, p_config->frequency);
    9110:	6803      	ldr	r3, [r0, #0]
    9112:	688a      	ldr	r2, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    9114:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524

    if (m_cb[p_instance->drv_inst_idx].handler)
    9118:	7903      	ldrb	r3, [r0, #4]
    911a:	223c      	movs	r2, #60	; 0x3c
    911c:	4353      	muls	r3, r2
    911e:	4a05      	ldr	r2, [pc, #20]	; (9134 <twi_configure+0x38>)
    9120:	58d3      	ldr	r3, [r2, r3]
    9122:	b12b      	cbz	r3, 9130 <twi_configure+0x34>
    9124:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twi),
                              p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    }
}
    9126:	bc10      	pop	{r4}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    9128:	f340 3007 	sbfx	r0, r0, #12, #8
    912c:	f7fb be30 	b.w	4d90 <arch_irq_enable>
}
    9130:	bc10      	pop	{r4}
    9132:	4770      	bx	lr
    9134:	20001824 	.word	0x20001824

00009138 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    9138:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    913a:	4b3b      	ldr	r3, [pc, #236]	; (9228 <twi_tx_start_transfer+0xf0>)
    913c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    913e:	2300      	movs	r3, #0
    9140:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    9144:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    9148:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    914c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    9150:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    9154:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    9158:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    915c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    9160:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    9164:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    9166:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    916a:	2301      	movs	r3, #1
    916c:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    916e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    9172:	429a      	cmp	r2, r3
    9174:	bf18      	it	ne
    9176:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
    9178:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    917a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    917c:	4293      	cmp	r3, r2
{
    917e:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    9180:	d20e      	bcs.n	91a0 <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    9182:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    9184:	5cd3      	ldrb	r3, [r2, r3]
    9186:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
    918a:	680b      	ldr	r3, [r1, #0]
    918c:	b303      	cbz	r3, 91d0 <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    918e:	f240 2386 	movw	r3, #646	; 0x286
    9192:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    9194:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    9196:	4825      	ldr	r0, [pc, #148]	; (922c <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
    9198:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    919c:	b002      	add	sp, #8
    919e:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
    91a0:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    91a4:	b113      	cbz	r3, 91ac <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    91a6:	2301      	movs	r3, #1
    91a8:	61c3      	str	r3, [r0, #28]
            return false;
    91aa:	e7ee      	b.n	918a <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    91ac:	6a0b      	ldr	r3, [r1, #32]
    91ae:	f013 0f40 	tst.w	r3, #64	; 0x40
    91b2:	f04f 0301 	mov.w	r3, #1
    91b6:	bf16      	itet	ne
    91b8:	61c3      	strne	r3, [r0, #28]
    91ba:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    91bc:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
    91c0:	e7e3      	b.n	918a <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
    91c2:	4620      	mov	r0, r4
    91c4:	f004 fb22 	bl	d80c <twi_transfer>
        while ((hw_timeout > 0) &&
    91c8:	b128      	cbz	r0, 91d6 <twi_tx_start_transfer+0x9e>
            hw_timeout--;
    91ca:	9b01      	ldr	r3, [sp, #4]
    91cc:	3b01      	subs	r3, #1
    91ce:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    91d0:	9b01      	ldr	r3, [sp, #4]
    91d2:	2b00      	cmp	r3, #0
    91d4:	dcf5      	bgt.n	91c2 <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
    91d6:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    91da:	b95b      	cbnz	r3, 91f4 <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    91dc:	4813      	ldr	r0, [pc, #76]	; (922c <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
    91de:	9b01      	ldr	r3, [sp, #4]
    91e0:	2b00      	cmp	r3, #0
    91e2:	dcdb      	bgt.n	919c <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    91e4:	2300      	movs	r3, #0
    91e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    91ea:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    91ec:	4810      	ldr	r0, [pc, #64]	; (9230 <twi_tx_start_transfer+0xf8>)
    91ee:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    91f2:	e7d3      	b.n	919c <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    91f4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    91f8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    91fc:	b18b      	cbz	r3, 9222 <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    91fe:	4a0d      	ldr	r2, [pc, #52]	; (9234 <twi_tx_start_transfer+0xfc>)
    9200:	480b      	ldr	r0, [pc, #44]	; (9230 <twi_tx_start_transfer+0xf8>)
    9202:	f013 0f01 	tst.w	r3, #1
    9206:	bf18      	it	ne
    9208:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    920a:	f013 0f02 	tst.w	r3, #2
    920e:	f102 0201 	add.w	r2, r2, #1
    9212:	bf18      	it	ne
    9214:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    9216:	f013 0f04 	tst.w	r3, #4
    921a:	4b07      	ldr	r3, [pc, #28]	; (9238 <twi_tx_start_transfer+0x100>)
    921c:	bf18      	it	ne
    921e:	4618      	movne	r0, r3
    9220:	e7dd      	b.n	91de <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
    9222:	4803      	ldr	r0, [pc, #12]	; (9230 <twi_tx_start_transfer+0xf8>)
    9224:	e7db      	b.n	91de <twi_tx_start_transfer+0xa6>
    9226:	bf00      	nop
    9228:	000186a0 	.word	0x000186a0
    922c:	0bad0000 	.word	0x0bad0000
    9230:	0bad0001 	.word	0x0bad0001
    9234:	0bae0000 	.word	0x0bae0000
    9238:	0bae0002 	.word	0x0bae0002

0000923c <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    923c:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    923e:	4b33      	ldr	r3, [pc, #204]	; (930c <twi_rx_start_transfer+0xd0>)
    9240:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9242:	2300      	movs	r3, #0
    9244:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    9248:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    924c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    9250:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    9254:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    9258:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    925c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    9260:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    9264:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    9266:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    926a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    926c:	2b01      	cmp	r3, #1
{
    926e:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    9270:	d117      	bne.n	92a2 <twi_rx_start_transfer+0x66>
    9272:	6a0b      	ldr	r3, [r1, #32]
    9274:	065b      	lsls	r3, r3, #25
    9276:	d414      	bmi.n	92a2 <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    9278:	2302      	movs	r3, #2
    927a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    927e:	2301      	movs	r3, #1
    9280:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    9282:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    9286:	2a02      	cmp	r2, #2
    9288:	bf18      	it	ne
    928a:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    928c:	680b      	ldr	r3, [r1, #0]
    928e:	b18b      	cbz	r3, 92b4 <twi_rx_start_transfer+0x78>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    9290:	f240 2386 	movw	r3, #646	; 0x286
    9294:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    9296:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    9298:	481d      	ldr	r0, [pc, #116]	; (9310 <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
    929a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    929e:	b002      	add	sp, #8
    92a0:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
    92a2:	2301      	movs	r3, #1
    92a4:	e7e9      	b.n	927a <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
    92a6:	4620      	mov	r0, r4
    92a8:	f004 fab0 	bl	d80c <twi_transfer>
        while ((hw_timeout > 0) &&
    92ac:	b128      	cbz	r0, 92ba <twi_rx_start_transfer+0x7e>
               hw_timeout--;
    92ae:	9b01      	ldr	r3, [sp, #4]
    92b0:	3b01      	subs	r3, #1
    92b2:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    92b4:	9b01      	ldr	r3, [sp, #4]
    92b6:	2b00      	cmp	r3, #0
    92b8:	dcf5      	bgt.n	92a6 <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
    92ba:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    92be:	b95b      	cbnz	r3, 92d8 <twi_rx_start_transfer+0x9c>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    92c0:	4813      	ldr	r0, [pc, #76]	; (9310 <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
    92c2:	9b01      	ldr	r3, [sp, #4]
    92c4:	2b00      	cmp	r3, #0
    92c6:	dcea      	bgt.n	929e <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    92c8:	2300      	movs	r3, #0
    92ca:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    92ce:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    92d0:	4810      	ldr	r0, [pc, #64]	; (9314 <twi_rx_start_transfer+0xd8>)
    92d2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    92d6:	e7e2      	b.n	929e <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
    92d8:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    92dc:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    92e0:	b18b      	cbz	r3, 9306 <twi_rx_start_transfer+0xca>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    92e2:	4a0d      	ldr	r2, [pc, #52]	; (9318 <twi_rx_start_transfer+0xdc>)
    92e4:	480b      	ldr	r0, [pc, #44]	; (9314 <twi_rx_start_transfer+0xd8>)
    92e6:	f013 0f01 	tst.w	r3, #1
    92ea:	bf18      	it	ne
    92ec:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    92ee:	f013 0f02 	tst.w	r3, #2
    92f2:	f102 0201 	add.w	r2, r2, #1
    92f6:	bf18      	it	ne
    92f8:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    92fa:	f013 0f04 	tst.w	r3, #4
    92fe:	4b07      	ldr	r3, [pc, #28]	; (931c <twi_rx_start_transfer+0xe0>)
    9300:	bf18      	it	ne
    9302:	4618      	movne	r0, r3
    9304:	e7dd      	b.n	92c2 <twi_rx_start_transfer+0x86>
                ret_code = NRFX_ERROR_INTERNAL;
    9306:	4803      	ldr	r0, [pc, #12]	; (9314 <twi_rx_start_transfer+0xd8>)
    9308:	e7db      	b.n	92c2 <twi_rx_start_transfer+0x86>
    930a:	bf00      	nop
    930c:	000186a0 	.word	0x000186a0
    9310:	0bad0000 	.word	0x0bad0000
    9314:	0bad0001 	.word	0x0bad0001
    9318:	0bae0000 	.word	0x0bae0000
    931c:	0bae0002 	.word	0x0bae0002

00009320 <nrfx_twi_init>:
{
    9320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    9324:	f890 9004 	ldrb.w	r9, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9328:	4e1c      	ldr	r6, [pc, #112]	; (939c <nrfx_twi_init+0x7c>)
{
    932a:	4607      	mov	r7, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    932c:	203c      	movs	r0, #60	; 0x3c
    932e:	fb00 f009 	mul.w	r0, r0, r9
    9332:	1835      	adds	r5, r6, r0
{
    9334:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9336:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    933a:	bb61      	cbnz	r1, 9396 <nrfx_twi_init+0x76>
    p_cb->int_mask        = 0;
    933c:	60a9      	str	r1, [r5, #8]
    p_cb->handler         = event_handler;
    933e:	5032      	str	r2, [r6, r0]
    p_cb->p_context       = p_context;
    9340:	606b      	str	r3, [r5, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    9342:	f885 102d 	strb.w	r1, [r5, #45]	; 0x2d
    p_cb->repeated        = false;
    9346:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    p_cb->busy            = false;
    934a:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
    if (p_config)
    934e:	b1cc      	cbz	r4, 9384 <nrfx_twi_init+0x64>
        p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    9350:	7b63      	ldrb	r3, [r4, #13]
    9352:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    9356:	f894 800e 	ldrb.w	r8, [r4, #14]
    935a:	f885 8039 	strb.w	r8, [r5, #57]	; 0x39
        if (!p_config->skip_gpio_cfg)
    935e:	f1b8 0f00 	cmp.w	r8, #0
    9362:	d10b      	bne.n	937c <nrfx_twi_init+0x5c>
            TWI_PIN_INIT(p_config->scl);
    9364:	6820      	ldr	r0, [r4, #0]
    9366:	2306      	movs	r3, #6
    9368:	2203      	movs	r2, #3
    936a:	4641      	mov	r1, r8
    936c:	f7ff fea2 	bl	90b4 <nrf_gpio_cfg.constprop.0>
            TWI_PIN_INIT(p_config->sda);
    9370:	6860      	ldr	r0, [r4, #4]
    9372:	2306      	movs	r3, #6
    9374:	2203      	movs	r2, #3
    9376:	4641      	mov	r1, r8
    9378:	f7ff fe9c 	bl	90b4 <nrf_gpio_cfg.constprop.0>
        twi_configure(p_instance, p_config);
    937c:	4621      	mov	r1, r4
    937e:	4638      	mov	r0, r7
    9380:	f7ff febc 	bl	90fc <twi_configure>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    9384:	233c      	movs	r3, #60	; 0x3c
    9386:	fb03 6609 	mla	r6, r3, r9, r6
    return err_code;
    938a:	4805      	ldr	r0, [pc, #20]	; (93a0 <nrfx_twi_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    938c:	2301      	movs	r3, #1
    938e:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
}
    9392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return err_code;
    9396:	4803      	ldr	r0, [pc, #12]	; (93a4 <nrfx_twi_init+0x84>)
    9398:	e7fb      	b.n	9392 <nrfx_twi_init+0x72>
    939a:	bf00      	nop
    939c:	20001824 	.word	0x20001824
    93a0:	0bad0000 	.word	0x0bad0000
    93a4:	0bad0005 	.word	0x0bad0005

000093a8 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    93a8:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    93aa:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    93ac:	2105      	movs	r1, #5
    93ae:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    93b2:	4b04      	ldr	r3, [pc, #16]	; (93c4 <nrfx_twi_enable+0x1c>)
    93b4:	213c      	movs	r1, #60	; 0x3c
    93b6:	fb01 3302 	mla	r3, r1, r2, r3
    93ba:	2202      	movs	r2, #2
    93bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    93c0:	4770      	bx	lr
    93c2:	bf00      	nop
    93c4:	20001824 	.word	0x20001824

000093c8 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    93c8:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    93ca:	4a0b      	ldr	r2, [pc, #44]	; (93f8 <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    93cc:	7901      	ldrb	r1, [r0, #4]
    93ce:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    93d2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    93d6:	f022 0203 	bic.w	r2, r2, #3
    93da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    93de:	2200      	movs	r2, #0
    93e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    93e4:	4b05      	ldr	r3, [pc, #20]	; (93fc <nrfx_twi_disable+0x34>)
    93e6:	203c      	movs	r0, #60	; 0x3c
    93e8:	fb00 3301 	mla	r3, r0, r1, r3
    93ec:	2101      	movs	r1, #1
    93ee:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    p_cb->busy = false;
    93f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
    93f6:	4770      	bx	lr
    93f8:	00044286 	.word	0x00044286
    93fc:	20001824 	.word	0x20001824

00009400 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    9400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    9404:	4f31      	ldr	r7, [pc, #196]	; (94cc <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    9406:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    9408:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    940c:	233c      	movs	r3, #60	; 0x3c
    940e:	fb03 7304 	mla	r3, r3, r4, r7
{
    9412:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    9414:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    9418:	2b01      	cmp	r3, #1
{
    941a:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    941c:	d104      	bne.n	9428 <nrfx_twi_xfer+0x28>
    941e:	780b      	ldrb	r3, [r1, #0]
    9420:	2b01      	cmp	r3, #1
    9422:	d106      	bne.n	9432 <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    9424:	482a      	ldr	r0, [pc, #168]	; (94d0 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    9426:	e011      	b.n	944c <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    9428:	2b02      	cmp	r3, #2
    942a:	d102      	bne.n	9432 <nrfx_twi_xfer+0x32>
    942c:	780b      	ldrb	r3, [r1, #0]
    942e:	2b01      	cmp	r3, #1
    9430:	d1f8      	bne.n	9424 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    9432:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    9434:	4b27      	ldr	r3, [pc, #156]	; (94d4 <nrfx_twi_xfer+0xd4>)
    9436:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    943a:	fb06 7604 	mla	r6, r6, r4, r7
    943e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    9442:	b12b      	cbz	r3, 9450 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    9444:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    9446:	4824      	ldr	r0, [pc, #144]	; (94d8 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    9448:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    944c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    9450:	f08c 0304 	eor.w	r3, ip, #4
    9454:	f3c3 0380 	ubfx	r3, r3, #2, #1
    9458:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    945c:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    9460:	46a8      	mov	r8, r5
    9462:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    9466:	f106 0e0c 	add.w	lr, r6, #12
    946a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    946e:	f8d8 3000 	ldr.w	r3, [r8]
    9472:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    9476:	686b      	ldr	r3, [r5, #4]
    9478:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    947a:	68eb      	ldr	r3, [r5, #12]
    947c:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    947e:	786b      	ldrb	r3, [r5, #1]
    9480:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    9484:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    9486:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    948a:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    948c:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    9490:	d017      	beq.n	94c2 <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    9492:	b99b      	cbnz	r3, 94bc <nrfx_twi_xfer+0xbc>
    9494:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    9498:	233c      	movs	r3, #60	; 0x3c
    949a:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    949e:	4651      	mov	r1, sl
    94a0:	4648      	mov	r0, r9
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    94a2:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    94a6:	f7ff fe47 	bl	9138 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    94aa:	233c      	movs	r3, #60	; 0x3c
    94ac:	435c      	muls	r4, r3
    94ae:	193a      	adds	r2, r7, r4
    94b0:	593b      	ldr	r3, [r7, r4]
    94b2:	2b00      	cmp	r3, #0
    94b4:	d1ca      	bne.n	944c <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    94b6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    94ba:	e7c7      	b.n	944c <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    94bc:	f04f 0c01 	mov.w	ip, #1
    94c0:	e7ea      	b.n	9498 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    94c2:	4651      	mov	r1, sl
    94c4:	4648      	mov	r0, r9
    94c6:	f7ff feb9 	bl	923c <twi_rx_start_transfer>
    94ca:	e7ee      	b.n	94aa <nrfx_twi_xfer+0xaa>
    94cc:	20001824 	.word	0x20001824
    94d0:	0bad0005 	.word	0x0bad0005
    94d4:	00044286 	.word	0x00044286
    94d8:	0bad000b 	.word	0x0bad000b

000094dc <nrfx_twi_1_irq_handler>:
        }
    }

}

NRFX_INSTANCE_IRQ_HANDLERS(TWI, twi)
    94dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    94de:	4c33      	ldr	r4, [pc, #204]	; (95ac <nrfx_twi_1_irq_handler+0xd0>)
NRFX_INSTANCE_IRQ_HANDLERS(TWI, twi)
    94e0:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    94e2:	4621      	mov	r1, r4
    94e4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    94e8:	f004 f990 	bl	d80c <twi_transfer>
    94ec:	2800      	cmp	r0, #0
    94ee:	d15b      	bne.n	95a8 <nrfx_twi_1_irq_handler+0xcc>
    if (!p_cb->error &&
    94f0:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    94f4:	bb07      	cbnz	r7, 9538 <nrfx_twi_1_irq_handler+0x5c>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    94f6:	7b22      	ldrb	r2, [r4, #12]
    if (!p_cb->error &&
    94f8:	1e93      	subs	r3, r2, #2
    94fa:	2b01      	cmp	r3, #1
    94fc:	d81c      	bhi.n	9538 <nrfx_twi_1_irq_handler+0x5c>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    94fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9500:	69a3      	ldr	r3, [r4, #24]
    9502:	4298      	cmp	r0, r3
    9504:	d118      	bne.n	9538 <nrfx_twi_1_irq_handler+0x5c>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    9506:	69e3      	ldr	r3, [r4, #28]
    9508:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    950a:	6963      	ldr	r3, [r4, #20]
    950c:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    950e:	6a23      	ldr	r3, [r4, #32]
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    9510:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    9514:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    9518:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    951a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            (void)twi_tx_start_transfer(p_twi, p_cb);
    951e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    9522:	d104      	bne.n	952e <nrfx_twi_1_irq_handler+0x52>
NRFX_INSTANCE_IRQ_HANDLERS(TWI, twi)
    9524:	b007      	add	sp, #28
    9526:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    952a:	f7ff be05 	b.w	9138 <twi_tx_start_transfer>
NRFX_INSTANCE_IRQ_HANDLERS(TWI, twi)
    952e:	b007      	add	sp, #28
    9530:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    9534:	f7ff be82 	b.w	923c <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    9538:	4e1d      	ldr	r6, [pc, #116]	; (95b0 <nrfx_twi_1_irq_handler+0xd4>)
    953a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    953c:	ad01      	add	r5, sp, #4
    953e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    9540:	6833      	ldr	r3, [r6, #0]
    9542:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    9544:	b34f      	cbz	r7, 959a <nrfx_twi_1_irq_handler+0xbe>
    uint32_t error_source = p_reg->ERRORSRC;
    9546:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    954a:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    954e:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    9552:	f013 0102 	ands.w	r1, r3, #2
    9556:	d006      	beq.n	9566 <nrfx_twi_1_irq_handler+0x8a>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    9558:	2301      	movs	r3, #1
    955a:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    955e:	2300      	movs	r3, #0
    9560:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    9564:	e007      	b.n	9576 <nrfx_twi_1_irq_handler+0x9a>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    9566:	f013 0204 	ands.w	r2, r3, #4
    956a:	d009      	beq.n	9580 <nrfx_twi_1_irq_handler+0xa4>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    956c:	2302      	movs	r3, #2
    956e:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    9572:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            p_cb->handler(&event, p_cb->p_context);
    9576:	e9d4 3100 	ldrd	r3, r1, [r4]
    957a:	4668      	mov	r0, sp
    957c:	4798      	blx	r3
NRFX_INSTANCE_IRQ_HANDLERS(TWI, twi)
    957e:	e013      	b.n	95a8 <nrfx_twi_1_irq_handler+0xcc>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    9580:	f013 0301 	ands.w	r3, r3, #1
    9584:	d005      	beq.n	9592 <nrfx_twi_1_irq_handler+0xb6>
                event.type = NRFX_TWI_EVT_OVERRUN;
    9586:	2303      	movs	r3, #3
    9588:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    958c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    9590:	e7f1      	b.n	9576 <nrfx_twi_1_irq_handler+0x9a>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    9592:	2204      	movs	r2, #4
    9594:	f88d 2000 	strb.w	r2, [sp]
    9598:	e7e2      	b.n	9560 <nrfx_twi_1_irq_handler+0x84>
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    959a:	6a23      	ldr	r3, [r4, #32]
            event.type = NRFX_TWI_EVT_DONE;
    959c:	f88d 7000 	strb.w	r7, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    95a0:	075b      	lsls	r3, r3, #29
        p_cb->busy = false;
    95a2:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    95a6:	d5e6      	bpl.n	9576 <nrfx_twi_1_irq_handler+0x9a>
NRFX_INSTANCE_IRQ_HANDLERS(TWI, twi)
    95a8:	b007      	add	sp, #28
    95aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95ac:	20001824 	.word	0x20001824
    95b0:	20001830 	.word	0x20001830

000095b4 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    95b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    95b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    95bc:	2a08      	cmp	r2, #8
    95be:	d106      	bne.n	95ce <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    95c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    95c4:	2b05      	cmp	r3, #5
    95c6:	d804      	bhi.n	95d2 <nrf52_errata_187+0x1e>
    95c8:	4a03      	ldr	r2, [pc, #12]	; (95d8 <nrf52_errata_187+0x24>)
    95ca:	5cd0      	ldrb	r0, [r2, r3]
    95cc:	4770      	bx	lr
                        return false;
    95ce:	2000      	movs	r0, #0
    95d0:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    95d2:	2001      	movs	r0, #1
}
    95d4:	4770      	bx	lr
    95d6:	bf00      	nop
    95d8:	0000f949 	.word	0x0000f949

000095dc <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    95dc:	4b05      	ldr	r3, [pc, #20]	; (95f4 <ep_state_access+0x18>)
    95de:	f010 0f80 	tst.w	r0, #128	; 0x80
    95e2:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    95e6:	bf08      	it	eq
    95e8:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    95ea:	f000 000f 	and.w	r0, r0, #15
}
    95ee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    95f2:	4770      	bx	lr
    95f4:	20001a08 	.word	0x20001a08

000095f8 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    95f8:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    95fa:	4a07      	ldr	r2, [pc, #28]	; (9618 <ev_usbreset_handler+0x20>)
    95fc:	2300      	movs	r3, #0
    95fe:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    9600:	4a06      	ldr	r2, [pc, #24]	; (961c <ev_usbreset_handler+0x24>)
    9602:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    9604:	2301      	movs	r3, #1
    9606:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    9608:	4b05      	ldr	r3, [pc, #20]	; (9620 <ev_usbreset_handler+0x28>)
    960a:	a801      	add	r0, sp, #4
    960c:	681b      	ldr	r3, [r3, #0]
    960e:	4798      	blx	r3
}
    9610:	b003      	add	sp, #12
    9612:	f85d fb04 	ldr.w	pc, [sp], #4
    9616:	bf00      	nop
    9618:	2000202a 	.word	0x2000202a
    961c:	20002029 	.word	0x20002029
    9620:	20001aa0 	.word	0x20001aa0

00009624 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    9624:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    9626:	4b19      	ldr	r3, [pc, #100]	; (968c <ev_usbevent_handler+0x68>)
    9628:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    962c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    9630:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    9632:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    9636:	d508      	bpl.n	964a <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    9638:	4b15      	ldr	r3, [pc, #84]	; (9690 <ev_usbevent_handler+0x6c>)
    963a:	2201      	movs	r2, #1
    963c:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    963e:	2302      	movs	r3, #2
    9640:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    9642:	4b14      	ldr	r3, [pc, #80]	; (9694 <ev_usbevent_handler+0x70>)
    9644:	a801      	add	r0, sp, #4
    9646:	681b      	ldr	r3, [r3, #0]
    9648:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    964a:	05a2      	lsls	r2, r4, #22
    964c:	d508      	bpl.n	9660 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    964e:	4b10      	ldr	r3, [pc, #64]	; (9690 <ev_usbevent_handler+0x6c>)
    9650:	2200      	movs	r2, #0
    9652:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    9654:	2303      	movs	r3, #3
    9656:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    9658:	4b0e      	ldr	r3, [pc, #56]	; (9694 <ev_usbevent_handler+0x70>)
    965a:	a801      	add	r0, sp, #4
    965c:	681b      	ldr	r3, [r3, #0]
    965e:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    9660:	0563      	lsls	r3, r4, #21
    9662:	d510      	bpl.n	9686 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    9664:	4b0a      	ldr	r3, [pc, #40]	; (9690 <ev_usbevent_handler+0x6c>)
    9666:	781a      	ldrb	r2, [r3, #0]
    9668:	b16a      	cbz	r2, 9686 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    966a:	2200      	movs	r2, #0
    966c:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    966e:	4b07      	ldr	r3, [pc, #28]	; (968c <ev_usbevent_handler+0x68>)
    9670:	2201      	movs	r2, #1
    9672:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9676:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9678:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    967a:	2304      	movs	r3, #4
    967c:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    967e:	4b05      	ldr	r3, [pc, #20]	; (9694 <ev_usbevent_handler+0x70>)
    9680:	a801      	add	r0, sp, #4
    9682:	681b      	ldr	r3, [r3, #0]
    9684:	4798      	blx	r3
        }
    }
}
    9686:	b002      	add	sp, #8
    9688:	bd10      	pop	{r4, pc}
    968a:	bf00      	nop
    968c:	40027000 	.word	0x40027000
    9690:	2000202a 	.word	0x2000202a
    9694:	20001aa0 	.word	0x20001aa0

00009698 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    9698:	f04f 0320 	mov.w	r3, #32
    969c:	f3ef 8011 	mrs	r0, BASEPRI
    96a0:	f383 8812 	msr	BASEPRI_MAX, r3
    96a4:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    96a8:	4b0a      	ldr	r3, [pc, #40]	; (96d4 <usbd_errata_187_211_begin+0x3c>)
    96aa:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    96ae:	2203      	movs	r2, #3
    96b0:	b961      	cbnz	r1, 96cc <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    96b2:	f249 3175 	movw	r1, #37749	; 0x9375
    96b6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    96ba:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    96be:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    96c2:	f380 8811 	msr	BASEPRI, r0
    96c6:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    96ca:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    96cc:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    96d0:	e7f7      	b.n	96c2 <usbd_errata_187_211_begin+0x2a>
    96d2:	bf00      	nop
    96d4:	4006e000 	.word	0x4006e000

000096d8 <usbd_errata_187_211_end>:
	__asm__ volatile(
    96d8:	f04f 0320 	mov.w	r3, #32
    96dc:	f3ef 8011 	mrs	r0, BASEPRI
    96e0:	f383 8812 	msr	BASEPRI_MAX, r3
    96e4:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    96e8:	4b0a      	ldr	r3, [pc, #40]	; (9714 <usbd_errata_187_211_end+0x3c>)
    96ea:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    96ee:	b961      	cbnz	r1, 970a <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    96f0:	f249 3275 	movw	r2, #37749	; 0x9375
    96f4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    96f8:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    96fc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    9700:	f380 8811 	msr	BASEPRI, r0
    9704:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9708:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    970a:	2200      	movs	r2, #0
    970c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    9710:	e7f6      	b.n	9700 <usbd_errata_187_211_end+0x28>
    9712:	bf00      	nop
    9714:	4006e000 	.word	0x4006e000

00009718 <nrfx_usbd_feeder_flash>:
{
    9718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    971a:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    971c:	4f0b      	ldr	r7, [pc, #44]	; (974c <nrfx_usbd_feeder_flash+0x34>)
    971e:	429a      	cmp	r2, r3
    9720:	bf28      	it	cs
    9722:	461a      	movcs	r2, r3
{
    9724:	460c      	mov	r4, r1
    9726:	4615      	mov	r5, r2
    9728:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    972a:	6809      	ldr	r1, [r1, #0]
    972c:	4638      	mov	r0, r7
    972e:	f002 fed5 	bl	c4dc <memcpy>
    p_next->size = tx_size;
    9732:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    9736:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    9738:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    973a:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    973c:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    973e:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    9740:	6023      	str	r3, [r4, #0]
}
    9742:	3800      	subs	r0, #0
    9744:	bf18      	it	ne
    9746:	2001      	movne	r0, #1
    9748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    974a:	bf00      	nop
    974c:	20001860 	.word	0x20001860

00009750 <nrfx_usbd_feeder_flash_zlp>:
{
    9750:	b570      	push	{r4, r5, r6, lr}
    9752:	684b      	ldr	r3, [r1, #4]
    9754:	429a      	cmp	r2, r3
    9756:	bf28      	it	cs
    9758:	461a      	movcs	r2, r3
    975a:	4606      	mov	r6, r0
    975c:	460d      	mov	r5, r1
    975e:	4614      	mov	r4, r2
    if (tx_size != 0)
    9760:	b182      	cbz	r2, 9784 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    9762:	6809      	ldr	r1, [r1, #0]
    9764:	4808      	ldr	r0, [pc, #32]	; (9788 <nrfx_usbd_feeder_flash_zlp+0x38>)
    9766:	f002 feb9 	bl	c4dc <memcpy>
        p_next->p_data.tx = p_buffer;
    976a:	4b07      	ldr	r3, [pc, #28]	; (9788 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    976c:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    9770:	686b      	ldr	r3, [r5, #4]
    9772:	1b1b      	subs	r3, r3, r4
    9774:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    9776:	682b      	ldr	r3, [r5, #0]
    9778:	4423      	add	r3, r4
}
    977a:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    977c:	602b      	str	r3, [r5, #0]
}
    977e:	bf18      	it	ne
    9780:	2001      	movne	r0, #1
    9782:	bd70      	pop	{r4, r5, r6, pc}
    9784:	4613      	mov	r3, r2
    9786:	e7f1      	b.n	976c <nrfx_usbd_feeder_flash_zlp+0x1c>
    9788:	20001860 	.word	0x20001860

0000978c <ev_sof_handler>:
{
    978c:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    978e:	2300      	movs	r3, #0
    9790:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    9794:	4b0b      	ldr	r3, [pc, #44]	; (97c4 <ev_sof_handler+0x38>)
    9796:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    979a:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    979e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    97a2:	4a09      	ldr	r2, [pc, #36]	; (97c8 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    97a4:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    97a6:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    97a8:	bf14      	ite	ne
    97aa:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    97ae:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    97b2:	430b      	orrs	r3, r1
    97b4:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    97b6:	4b05      	ldr	r3, [pc, #20]	; (97cc <ev_sof_handler+0x40>)
    97b8:	a801      	add	r0, sp, #4
    97ba:	681b      	ldr	r3, [r3, #0]
    97bc:	4798      	blx	r3
}
    97be:	b003      	add	sp, #12
    97c0:	f85d fb04 	ldr.w	pc, [sp], #4
    97c4:	40027000 	.word	0x40027000
    97c8:	20001a9c 	.word	0x20001a9c
    97cc:	20001aa0 	.word	0x20001aa0

000097d0 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    97d0:	4b06      	ldr	r3, [pc, #24]	; (97ec <atomic_and.constprop.0.isra.0+0x1c>)
    97d2:	f3bf 8f5b 	dmb	ish
    97d6:	e853 1f00 	ldrex	r1, [r3]
    97da:	4001      	ands	r1, r0
    97dc:	e843 1200 	strex	r2, r1, [r3]
    97e0:	2a00      	cmp	r2, #0
    97e2:	d1f8      	bne.n	97d6 <atomic_and.constprop.0.isra.0+0x6>
    97e4:	f3bf 8f5b 	dmb	ish
}
    97e8:	4770      	bx	lr
    97ea:	bf00      	nop
    97ec:	20001a98 	.word	0x20001a98

000097f0 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    97f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    97f4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    97f8:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    97fa:	bf02      	ittt	eq
    97fc:	4b03      	ldreq	r3, [pc, #12]	; (980c <usbd_dma_pending_clear+0x1c>)
    97fe:	2200      	moveq	r2, #0
    9800:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    9804:	4b02      	ldr	r3, [pc, #8]	; (9810 <usbd_dma_pending_clear+0x20>)
    9806:	2200      	movs	r2, #0
    9808:	701a      	strb	r2, [r3, #0]
}
    980a:	4770      	bx	lr
    980c:	40027000 	.word	0x40027000
    9810:	20002028 	.word	0x20002028

00009814 <nrf_usbd_ep0in_dma_handler>:
{
    9814:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    9816:	f7ff ffeb 	bl	97f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    981a:	4b08      	ldr	r3, [pc, #32]	; (983c <nrf_usbd_ep0in_dma_handler+0x28>)
    981c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    9820:	2a03      	cmp	r2, #3
    9822:	d105      	bne.n	9830 <nrf_usbd_ep0in_dma_handler+0x1c>
}
    9824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9828:	f06f 0001 	mvn.w	r0, #1
    982c:	f7ff bfd0 	b.w	97d0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    9830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9834:	2b00      	cmp	r3, #0
    9836:	d0f5      	beq.n	9824 <nrf_usbd_ep0in_dma_handler+0x10>
}
    9838:	bd08      	pop	{r3, pc}
    983a:	bf00      	nop
    983c:	20001978 	.word	0x20001978

00009840 <usbd_ep_data_handler>:
{
    9840:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    9842:	2201      	movs	r2, #1
    9844:	fa02 f501 	lsl.w	r5, r2, r1
    9848:	491c      	ldr	r1, [pc, #112]	; (98bc <usbd_ep_data_handler+0x7c>)
    984a:	4e1d      	ldr	r6, [pc, #116]	; (98c0 <usbd_ep_data_handler+0x80>)
    984c:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    984e:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    9852:	ea43 0305 	orr.w	r3, r3, r5
{
    9856:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    9858:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    985a:	d024      	beq.n	98a6 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    985c:	f000 020f 	and.w	r2, r0, #15
    9860:	4b18      	ldr	r3, [pc, #96]	; (98c4 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9862:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9866:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    986a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    986e:	681a      	ldr	r2, [r3, #0]
    if (ret)
    9870:	b132      	cbz	r2, 9880 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    9872:	2200      	movs	r2, #0
    9874:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    9876:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    9878:	681b      	ldr	r3, [r3, #0]
    987a:	d011      	beq.n	98a0 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    987c:	f004 f8a5 	bl	d9ca <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    9880:	6833      	ldr	r3, [r6, #0]
    9882:	402b      	ands	r3, r5
    9884:	d10a      	bne.n	989c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9886:	2206      	movs	r2, #6
    9888:	f88d 2004 	strb.w	r2, [sp, #4]
    988c:	f88d 4006 	strb.w	r4, [sp, #6]
    9890:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9894:	4b0c      	ldr	r3, [pc, #48]	; (98c8 <usbd_ep_data_handler+0x88>)
    9896:	a801      	add	r0, sp, #4
    9898:	681b      	ldr	r3, [r3, #0]
    989a:	4798      	blx	r3
}
    989c:	b002      	add	sp, #8
    989e:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    98a0:	f7ff ffb8 	bl	9814 <nrf_usbd_ep0in_dma_handler>
    98a4:	e7ec      	b.n	9880 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    98a6:	6833      	ldr	r3, [r6, #0]
    98a8:	421d      	tst	r5, r3
    98aa:	d1f7      	bne.n	989c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    98ac:	2306      	movs	r3, #6
    98ae:	f88d 3004 	strb.w	r3, [sp, #4]
    98b2:	f88d 0006 	strb.w	r0, [sp, #6]
    98b6:	f88d 2007 	strb.w	r2, [sp, #7]
    98ba:	e7eb      	b.n	9894 <usbd_ep_data_handler+0x54>
    98bc:	20001a9c 	.word	0x20001a9c
    98c0:	20001a98 	.word	0x20001a98
    98c4:	0000e7f2 	.word	0x0000e7f2
    98c8:	20001aa0 	.word	0x20001aa0

000098cc <ev_setup_data_handler>:
{
    98cc:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    98ce:	4b05      	ldr	r3, [pc, #20]	; (98e4 <ev_setup_data_handler+0x18>)
    98d0:	781a      	ldrb	r2, [r3, #0]
    98d2:	4610      	mov	r0, r2
    98d4:	f004 f870 	bl	d9b8 <ep2bit>
}
    98d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    98dc:	4601      	mov	r1, r0
    98de:	4610      	mov	r0, r2
    98e0:	f7ff bfae 	b.w	9840 <usbd_ep_data_handler>
    98e4:	20002029 	.word	0x20002029

000098e8 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    98e8:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    98ea:	f7ff ff81 	bl	97f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    98ee:	4b0c      	ldr	r3, [pc, #48]	; (9920 <ev_dma_epout8_handler+0x38>)
    98f0:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    98f4:	2a03      	cmp	r2, #3
    98f6:	d010      	beq.n	991a <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    98f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    98fc:	b96b      	cbnz	r3, 991a <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    98fe:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    9902:	f7ff ff65 	bl	97d0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9906:	2306      	movs	r3, #6
    9908:	f88d 3004 	strb.w	r3, [sp, #4]
    990c:	2308      	movs	r3, #8
    990e:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    9912:	4b04      	ldr	r3, [pc, #16]	; (9924 <ev_dma_epout8_handler+0x3c>)
    9914:	a801      	add	r0, sp, #4
    9916:	681b      	ldr	r3, [r3, #0]
    9918:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    991a:	b003      	add	sp, #12
    991c:	f85d fb04 	ldr.w	pc, [sp], #4
    9920:	20001978 	.word	0x20001978
    9924:	20001aa0 	.word	0x20001aa0

00009928 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    9928:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    992a:	f7ff ff61 	bl	97f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    992e:	4b10      	ldr	r3, [pc, #64]	; (9970 <ev_dma_epin8_handler+0x48>)
    9930:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    9934:	2a03      	cmp	r2, #3
    9936:	d106      	bne.n	9946 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9938:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    993c:	b003      	add	sp, #12
    993e:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9942:	f7ff bf45 	b.w	97d0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    9946:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    994a:	b96b      	cbnz	r3, 9968 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    994c:	f46f 7080 	mvn.w	r0, #256	; 0x100
    9950:	f7ff ff3e 	bl	97d0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9954:	2306      	movs	r3, #6
    9956:	f88d 3004 	strb.w	r3, [sp, #4]
    995a:	2388      	movs	r3, #136	; 0x88
    995c:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    9960:	4b04      	ldr	r3, [pc, #16]	; (9974 <ev_dma_epin8_handler+0x4c>)
    9962:	a801      	add	r0, sp, #4
    9964:	681b      	ldr	r3, [r3, #0]
    9966:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    9968:	b003      	add	sp, #12
    996a:	f85d fb04 	ldr.w	pc, [sp], #4
    996e:	bf00      	nop
    9970:	20001978 	.word	0x20001978
    9974:	20001aa0 	.word	0x20001aa0

00009978 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    9978:	4a02      	ldr	r2, [pc, #8]	; (9984 <nrfx_usbd_uninit+0xc>)
    997a:	2300      	movs	r3, #0
    997c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    997e:	4a02      	ldr	r2, [pc, #8]	; (9988 <nrfx_usbd_uninit+0x10>)
    9980:	7013      	strb	r3, [r2, #0]
    return;
}
    9982:	4770      	bx	lr
    9984:	20001aa0 	.word	0x20001aa0
    9988:	2000202b 	.word	0x2000202b

0000998c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    998c:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    998e:	4b4c      	ldr	r3, [pc, #304]	; (9ac0 <nrfx_usbd_enable+0x134>)
    9990:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9994:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    9998:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    999c:	f7ff fe0a 	bl	95b4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    99a0:	b108      	cbz	r0, 99a6 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    99a2:	f7ff fe79 	bl	9698 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    99a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    99aa:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    99ae:	2b08      	cmp	r3, #8
    99b0:	d119      	bne.n	99e6 <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    99b2:	f04f 0320 	mov.w	r3, #32
    99b6:	f3ef 8011 	mrs	r0, BASEPRI
    99ba:	f383 8812 	msr	BASEPRI_MAX, r3
    99be:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    99c2:	4b40      	ldr	r3, [pc, #256]	; (9ac4 <nrfx_usbd_enable+0x138>)
    99c4:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    99c8:	22c0      	movs	r2, #192	; 0xc0
    99ca:	2900      	cmp	r1, #0
    99cc:	d170      	bne.n	9ab0 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    99ce:	f249 3175 	movw	r1, #37749	; 0x9375
    99d2:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    99d6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    99da:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    99de:	f380 8811 	msr	BASEPRI, r0
    99e2:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    99e6:	4b36      	ldr	r3, [pc, #216]	; (9ac0 <nrfx_usbd_enable+0x134>)
    99e8:	2201      	movs	r2, #1
    99ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    99ee:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    99f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    99f6:	0512      	lsls	r2, r2, #20
    99f8:	d5fb      	bpl.n	99f2 <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
    99fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    99fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    9a02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9a06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9a0a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    9a0e:	2b08      	cmp	r3, #8
    9a10:	d118      	bne.n	9a44 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
    9a12:	f04f 0320 	mov.w	r3, #32
    9a16:	f3ef 8011 	mrs	r0, BASEPRI
    9a1a:	f383 8812 	msr	BASEPRI_MAX, r3
    9a1e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9a22:	4b28      	ldr	r3, [pc, #160]	; (9ac4 <nrfx_usbd_enable+0x138>)
    9a24:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    9a28:	2900      	cmp	r1, #0
    9a2a:	d144      	bne.n	9ab6 <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9a2c:	f249 3275 	movw	r2, #37749	; 0x9375
    9a30:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9a34:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9a38:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    9a3c:	f380 8811 	msr	BASEPRI, r0
    9a40:	f3bf 8f6f 	isb	sy
    9a44:	f7ff fdb6 	bl	95b4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    9a48:	b130      	cbz	r0, 9a58 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
    9a4a:	f7ff fe45 	bl	96d8 <usbd_errata_187_211_end>
    9a4e:	f7ff fdb1 	bl	95b4 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    9a52:	b108      	cbz	r0, 9a58 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
    9a54:	f7ff fe20 	bl	9698 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9a58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9a5c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    9a60:	2b08      	cmp	r3, #8
    9a62:	4b17      	ldr	r3, [pc, #92]	; (9ac0 <nrfx_usbd_enable+0x134>)
    9a64:	d10a      	bne.n	9a7c <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    9a66:	f240 72e3 	movw	r2, #2019	; 0x7e3
    9a6a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    9a6e:	2240      	movs	r2, #64	; 0x40
    9a70:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    9a74:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    9a78:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    9a7c:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    9a7e:	2280      	movs	r2, #128	; 0x80
    9a80:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    9a84:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    9a88:	4b0f      	ldr	r3, [pc, #60]	; (9ac8 <nrfx_usbd_enable+0x13c>)
    9a8a:	f240 12ff 	movw	r2, #511	; 0x1ff
    9a8e:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    9a90:	4b0e      	ldr	r3, [pc, #56]	; (9acc <nrfx_usbd_enable+0x140>)
    9a92:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    9a94:	f7ff feac 	bl	97f0 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    9a98:	4b0d      	ldr	r3, [pc, #52]	; (9ad0 <nrfx_usbd_enable+0x144>)
    9a9a:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    9a9c:	4b0d      	ldr	r3, [pc, #52]	; (9ad4 <nrfx_usbd_enable+0x148>)
    9a9e:	2202      	movs	r2, #2
    9aa0:	701a      	strb	r2, [r3, #0]
    9aa2:	f7ff fd87 	bl	95b4 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    9aa6:	b150      	cbz	r0, 9abe <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    9aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    9aac:	f7ff be14 	b.w	96d8 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    9ab0:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    9ab4:	e793      	b.n	99de <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9ab6:	2200      	movs	r2, #0
    9ab8:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    9abc:	e7be      	b.n	9a3c <nrfx_usbd_enable+0xb0>
}
    9abe:	bd08      	pop	{r3, pc}
    9ac0:	40027000 	.word	0x40027000
    9ac4:	4006e000 	.word	0x4006e000
    9ac8:	20001a9c 	.word	0x20001a9c
    9acc:	20001a98 	.word	0x20001a98
    9ad0:	20002029 	.word	0x20002029
    9ad4:	2000202b 	.word	0x2000202b

00009ad8 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    9ad8:	4b0a      	ldr	r3, [pc, #40]	; (9b04 <nrfx_usbd_start+0x2c>)
    9ada:	2200      	movs	r2, #0
{
    9adc:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    9ade:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    9ae0:	4a09      	ldr	r2, [pc, #36]	; (9b08 <nrfx_usbd_start+0x30>)
    9ae2:	4b0a      	ldr	r3, [pc, #40]	; (9b0c <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    9ae4:	4c0a      	ldr	r4, [pc, #40]	; (9b10 <nrfx_usbd_start+0x38>)
    9ae6:	2800      	cmp	r0, #0
    9ae8:	bf08      	it	eq
    9aea:	4613      	moveq	r3, r2
    9aec:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    9af0:	2027      	movs	r0, #39	; 0x27
    9af2:	f7fb f94d 	bl	4d90 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    9af6:	2301      	movs	r3, #1
    9af8:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    9afc:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    9b00:	bd10      	pop	{r4, pc}
    9b02:	bf00      	nop
    9b04:	2000202a 	.word	0x2000202a
    9b08:	01c01407 	.word	0x01c01407
    9b0c:	01e01407 	.word	0x01e01407
    9b10:	40027000 	.word	0x40027000

00009b14 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    9b14:	4b03      	ldr	r3, [pc, #12]	; (9b24 <nrfx_usbd_is_enabled+0x10>)
    9b16:	7818      	ldrb	r0, [r3, #0]
}
    9b18:	2801      	cmp	r0, #1
    9b1a:	bf94      	ite	ls
    9b1c:	2000      	movls	r0, #0
    9b1e:	2001      	movhi	r0, #1
    9b20:	4770      	bx	lr
    9b22:	bf00      	nop
    9b24:	2000202b 	.word	0x2000202b

00009b28 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    9b28:	b510      	push	{r4, lr}
	__asm__ volatile(
    9b2a:	f04f 0320 	mov.w	r3, #32
    9b2e:	f3ef 8111 	mrs	r1, BASEPRI
    9b32:	f383 8812 	msr	BASEPRI_MAX, r3
    9b36:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    9b3a:	4b0f      	ldr	r3, [pc, #60]	; (9b78 <nrfx_usbd_suspend+0x50>)
    9b3c:	781b      	ldrb	r3, [r3, #0]
    9b3e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9b42:	b193      	cbz	r3, 9b6a <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    9b44:	4b0d      	ldr	r3, [pc, #52]	; (9b7c <nrfx_usbd_suspend+0x54>)
    9b46:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    9b4a:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    9b4e:	d10c      	bne.n	9b6a <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    9b50:	2401      	movs	r4, #1
    9b52:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9b56:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    9b5a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9b5e:	05a4      	lsls	r4, r4, #22
    9b60:	d504      	bpl.n	9b6c <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    9b62:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9b66:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    9b6a:	2000      	movs	r0, #0
	__asm__ volatile(
    9b6c:	f381 8811 	msr	BASEPRI, r1
    9b70:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    9b74:	bd10      	pop	{r4, pc}
    9b76:	bf00      	nop
    9b78:	2000202a 	.word	0x2000202a
    9b7c:	40027000 	.word	0x40027000

00009b80 <nrfx_usbd_init>:
{
    9b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    9b82:	4b1c      	ldr	r3, [pc, #112]	; (9bf4 <nrfx_usbd_init+0x74>)
    9b84:	781c      	ldrb	r4, [r3, #0]
    9b86:	bb94      	cbnz	r4, 9bee <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    9b88:	4a1b      	ldr	r2, [pc, #108]	; (9bf8 <nrfx_usbd_init+0x78>)
    9b8a:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    9b8c:	2201      	movs	r2, #1
    9b8e:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9b90:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    9b94:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    9b96:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9b9a:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    9b9e:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9ba0:	bf14      	ite	ne
    9ba2:	4639      	movne	r1, r7
    9ba4:	2140      	moveq	r1, #64	; 0x40
    9ba6:	4628      	mov	r0, r5
    9ba8:	f003 ff3e 	bl	da28 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    9bac:	4628      	mov	r0, r5
    9bae:	f7ff fd15 	bl	95dc <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9bb2:	3401      	adds	r4, #1
    9bb4:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    9bb6:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    9bb8:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    9bba:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9bbc:	d1eb      	bne.n	9b96 <nrfx_usbd_init+0x16>
    9bbe:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9bc0:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    9bc4:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9bc6:	f014 0f08 	tst.w	r4, #8
    9bca:	b2e6      	uxtb	r6, r4
    9bcc:	bf14      	ite	ne
    9bce:	4639      	movne	r1, r7
    9bd0:	2140      	moveq	r1, #64	; 0x40
    9bd2:	4630      	mov	r0, r6
    9bd4:	f003 ff28 	bl	da28 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    9bd8:	4630      	mov	r0, r6
    9bda:	f7ff fcff 	bl	95dc <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    9bde:	3401      	adds	r4, #1
    9be0:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    9be2:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    9be4:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    9be6:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    9be8:	d1ed      	bne.n	9bc6 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    9bea:	4804      	ldr	r0, [pc, #16]	; (9bfc <nrfx_usbd_init+0x7c>)
}
    9bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    9bee:	4804      	ldr	r0, [pc, #16]	; (9c00 <nrfx_usbd_init+0x80>)
    9bf0:	e7fc      	b.n	9bec <nrfx_usbd_init+0x6c>
    9bf2:	bf00      	nop
    9bf4:	2000202b 	.word	0x2000202b
    9bf8:	20001aa0 	.word	0x20001aa0
    9bfc:	0bad0000 	.word	0x0bad0000
    9c00:	0bad0005 	.word	0x0bad0005

00009c04 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    9c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9c08:	4604      	mov	r4, r0
	__asm__ volatile(
    9c0a:	f04f 0320 	mov.w	r3, #32
    9c0e:	f3ef 8611 	mrs	r6, BASEPRI
    9c12:	f383 8812 	msr	BASEPRI_MAX, r3
    9c16:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    9c1a:	f010 090f 	ands.w	r9, r0, #15
    9c1e:	d103      	bne.n	9c28 <nrfx_usbd_ep_transfer+0x24>
    9c20:	4b27      	ldr	r3, [pc, #156]	; (9cc0 <nrfx_usbd_ep_transfer+0xbc>)
    9c22:	781b      	ldrb	r3, [r3, #0]
    9c24:	4283      	cmp	r3, r0
    9c26:	d147      	bne.n	9cb8 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9c28:	4b26      	ldr	r3, [pc, #152]	; (9cc4 <nrfx_usbd_ep_transfer+0xc0>)
    9c2a:	4f27      	ldr	r7, [pc, #156]	; (9cc8 <nrfx_usbd_ep_transfer+0xc4>)
    9c2c:	681a      	ldr	r2, [r3, #0]
    9c2e:	683b      	ldr	r3, [r7, #0]
    9c30:	43d2      	mvns	r2, r2
    9c32:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    9c34:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9c36:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    9c38:	f003 febe 	bl	d9b8 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9c3c:	f04f 0801 	mov.w	r8, #1
    9c40:	fa08 f800 	lsl.w	r8, r8, r0
    9c44:	ea12 0f08 	tst.w	r2, r8
    9c48:	d138      	bne.n	9cbc <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    9c4a:	4620      	mov	r0, r4
    9c4c:	f7ff fcc6 	bl	95dc <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9c50:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    9c52:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    9c54:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9c56:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    9c5a:	d529      	bpl.n	9cb0 <nrfx_usbd_ep_transfer+0xac>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    9c5c:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9c5e:	6888      	ldr	r0, [r1, #8]
    9c60:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    9c64:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9c68:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    9c6c:	d11d      	bne.n	9caa <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9c6e:	4a17      	ldr	r2, [pc, #92]	; (9ccc <nrfx_usbd_ep_transfer+0xc8>)
    9c70:	4c17      	ldr	r4, [pc, #92]	; (9cd0 <nrfx_usbd_ep_transfer+0xcc>)
    9c72:	2800      	cmp	r0, #0
    9c74:	bf08      	it	eq
    9c76:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9c78:	4816      	ldr	r0, [pc, #88]	; (9cd4 <nrfx_usbd_ep_transfer+0xd0>)
    9c7a:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    9c7c:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    9c7e:	c907      	ldmia	r1, {r0, r1, r2}
    9c80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    9c84:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    9c86:	2300      	movs	r3, #0
    9c88:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    9c8a:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    9c8c:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    9c8e:	4812      	ldr	r0, [pc, #72]	; (9cd8 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    9c90:	ea43 0308 	orr.w	r3, r3, r8
    9c94:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9c96:	4b11      	ldr	r3, [pc, #68]	; (9cdc <nrfx_usbd_ep_transfer+0xd8>)
    9c98:	2280      	movs	r2, #128	; 0x80
    9c9a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    9c9e:	f386 8811 	msr	BASEPRI, r6
    9ca2:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    9ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9caa:	4a0d      	ldr	r2, [pc, #52]	; (9ce0 <nrfx_usbd_ep_transfer+0xdc>)
    9cac:	4c0d      	ldr	r4, [pc, #52]	; (9ce4 <nrfx_usbd_ep_transfer+0xe0>)
    9cae:	e7e0      	b.n	9c72 <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    9cb0:	4a0d      	ldr	r2, [pc, #52]	; (9ce8 <nrfx_usbd_ep_transfer+0xe4>)
    9cb2:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    9cb4:	4a0d      	ldr	r2, [pc, #52]	; (9cec <nrfx_usbd_ep_transfer+0xe8>)
    9cb6:	e7e1      	b.n	9c7c <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    9cb8:	480d      	ldr	r0, [pc, #52]	; (9cf0 <nrfx_usbd_ep_transfer+0xec>)
    9cba:	e7f0      	b.n	9c9e <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
    9cbc:	480d      	ldr	r0, [pc, #52]	; (9cf4 <nrfx_usbd_ep_transfer+0xf0>)
    9cbe:	e7ee      	b.n	9c9e <nrfx_usbd_ep_transfer+0x9a>
    9cc0:	20002029 	.word	0x20002029
    9cc4:	20001a9c 	.word	0x20001a9c
    9cc8:	20001a98 	.word	0x20001a98
    9ccc:	0000d991 	.word	0x0000d991
    9cd0:	0000d96f 	.word	0x0000d96f
    9cd4:	2000190c 	.word	0x2000190c
    9cd8:	0bad0000 	.word	0x0bad0000
    9cdc:	e000e100 	.word	0xe000e100
    9ce0:	00009751 	.word	0x00009751
    9ce4:	00009719 	.word	0x00009719
    9ce8:	200018a0 	.word	0x200018a0
    9cec:	0000d93d 	.word	0x0000d93d
    9cf0:	0bad000a 	.word	0x0bad000a
    9cf4:	0bad000b 	.word	0x0bad000b

00009cf8 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9cf8:	f010 0f08 	tst.w	r0, #8
    9cfc:	4b07      	ldr	r3, [pc, #28]	; (9d1c <nrfx_usbd_epout_size_get+0x24>)
    9cfe:	d006      	beq.n	9d0e <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    9d00:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    9d04:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    9d08:	bf18      	it	ne
    9d0a:	2000      	movne	r0, #0
    9d0c:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    9d0e:	f000 000f 	and.w	r0, r0, #15
    9d12:	f500 7094 	add.w	r0, r0, #296	; 0x128
    9d16:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    9d1a:	4770      	bx	lr
    9d1c:	40027000 	.word	0x40027000

00009d20 <usbd_dmareq_process>:
{
    9d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    9d24:	4e59      	ldr	r6, [pc, #356]	; (9e8c <usbd_dmareq_process+0x16c>)
    9d26:	7833      	ldrb	r3, [r6, #0]
{
    9d28:	b085      	sub	sp, #20
    if (!m_dma_pending)
    9d2a:	2b00      	cmp	r3, #0
    9d2c:	d173      	bne.n	9e16 <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    9d2e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 9e90 <usbd_dmareq_process+0x170>
    9d32:	4d58      	ldr	r5, [pc, #352]	; (9e94 <usbd_dmareq_process+0x174>)
    9d34:	f8d8 4000 	ldr.w	r4, [r8]
    9d38:	682b      	ldr	r3, [r5, #0]
    9d3a:	401c      	ands	r4, r3
    9d3c:	d06b      	beq.n	9e16 <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    9d3e:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    9d42:	bf14      	ite	ne
    9d44:	fa93 f4a3 	rbitne	r4, r3
    9d48:	fa94 f4a4 	rbiteq	r4, r4
    9d4c:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9d50:	f04f 0901 	mov.w	r9, #1
    9d54:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9d58:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9d5a:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9d5e:	d95d      	bls.n	9e1c <usbd_dmareq_process+0xfc>
    9d60:	3c10      	subs	r4, #16
    9d62:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    9d64:	4620      	mov	r0, r4
    9d66:	f7ff fc39 	bl	95dc <ep_state_access>
    9d6a:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    9d6c:	4620      	mov	r0, r4
    9d6e:	f7ff ffc3 	bl	9cf8 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    9d72:	f8da 7000 	ldr.w	r7, [sl]
    9d76:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    9d7a:	f8da 1004 	ldr.w	r1, [sl, #4]
    9d7e:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    9d80:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    9d82:	a802      	add	r0, sp, #8
    9d84:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    9d86:	9b02      	ldr	r3, [sp, #8]
    9d88:	2b00      	cmp	r3, #0
    9d8a:	d153      	bne.n	9e34 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
    9d8c:	b908      	cbnz	r0, 9d92 <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    9d8e:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9d92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
    9d96:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
    9d98:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    9d9c:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    9d9e:	bf02      	ittt	eq
    9da0:	4b3d      	ldreq	r3, [pc, #244]	; (9e98 <usbd_dmareq_process+0x178>)
    9da2:	2282      	moveq	r2, #130	; 0x82
    9da4:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    9da8:	2301      	movs	r3, #1
    9daa:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    9dac:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    9dae:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    9db0:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    9db2:	ea03 0309 	and.w	r3, r3, r9
    9db6:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    9db8:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    9dbc:	2900      	cmp	r1, #0
    9dbe:	4413      	add	r3, r2
    9dc0:	f8ca 3008 	str.w	r3, [sl, #8]
    9dc4:	f004 0508 	and.w	r5, r4, #8
    9dc8:	4b33      	ldr	r3, [pc, #204]	; (9e98 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9dca:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9dce:	da4e      	bge.n	9e6e <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
    9dd0:	2d00      	cmp	r5, #0
    9dd2:	d044      	beq.n	9e5e <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
    9dd4:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    9dd8:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    9ddc:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9dde:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9de2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9de6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9dea:	2201      	movs	r2, #1
    9dec:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9dee:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9df0:	4a2a      	ldr	r2, [pc, #168]	; (9e9c <usbd_dmareq_process+0x17c>)
    9df2:	4b2b      	ldr	r3, [pc, #172]	; (9ea0 <usbd_dmareq_process+0x180>)
    9df4:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    9df8:	bf38      	it	cc
    9dfa:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9dfc:	4926      	ldr	r1, [pc, #152]	; (9e98 <usbd_dmareq_process+0x178>)
    9dfe:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9e02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9e06:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9e0a:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    9e0c:	b91a      	cbnz	r2, 9e16 <usbd_dmareq_process+0xf6>
    9e0e:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    9e12:	2a00      	cmp	r2, #0
    9e14:	d0f9      	beq.n	9e0a <usbd_dmareq_process+0xea>
}
    9e16:	b005      	add	sp, #20
    9e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9e1c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    9e20:	4620      	mov	r0, r4
    9e22:	f7ff fbdb 	bl	95dc <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    9e26:	6803      	ldr	r3, [r0, #0]
    9e28:	8982      	ldrh	r2, [r0, #12]
    9e2a:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    9e2c:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    9e2e:	a802      	add	r0, sp, #8
    9e30:	4798      	blx	r3
    9e32:	e7ab      	b.n	9d8c <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    9e34:	9b03      	ldr	r3, [sp, #12]
    9e36:	459b      	cmp	fp, r3
    9e38:	d9a8      	bls.n	9d8c <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    9e3a:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9e3c:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    9e3e:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9e42:	f7ff fcc5 	bl	97d0 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9e46:	2306      	movs	r3, #6
    9e48:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    9e4c:	4b15      	ldr	r3, [pc, #84]	; (9ea4 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9e4e:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    9e52:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9e54:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    9e58:	a801      	add	r0, sp, #4
    9e5a:	4798      	blx	r3
                    continue;
    9e5c:	e76a      	b.n	9d34 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    9e5e:	2514      	movs	r5, #20
    9e60:	fb05 3304 	mla	r3, r5, r4, r3
    9e64:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    9e68:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    9e6c:	e7b6      	b.n	9ddc <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
    9e6e:	b12d      	cbz	r5, 9e7c <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
    9e70:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    9e74:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    9e78:	2328      	movs	r3, #40	; 0x28
    9e7a:	e7b0      	b.n	9dde <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
    9e7c:	2514      	movs	r5, #20
    9e7e:	fb05 3304 	mla	r3, r5, r4, r3
    9e82:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    9e86:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    9e8a:	e7f5      	b.n	9e78 <usbd_dmareq_process+0x158>
    9e8c:	20002028 	.word	0x20002028
    9e90:	20001a98 	.word	0x20001a98
    9e94:	20001a9c 	.word	0x20001a9c
    9e98:	40027000 	.word	0x40027000
    9e9c:	0000e7e0 	.word	0x0000e7e0
    9ea0:	0000e7f2 	.word	0x0000e7f2
    9ea4:	20001aa0 	.word	0x20001aa0

00009ea8 <ev_epdata_handler>:
{
    9ea8:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    9eaa:	4b0f      	ldr	r3, [pc, #60]	; (9ee8 <ev_epdata_handler+0x40>)
    9eac:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    9eb0:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    9eb4:	2501      	movs	r5, #1
    while (dataepstatus)
    9eb6:	b91c      	cbnz	r4, 9ec0 <ev_epdata_handler+0x18>
}
    9eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    9ebc:	f7ff bf30 	b.w	9d20 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    9ec0:	fa94 f3a4 	rbit	r3, r4
    9ec4:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9ec8:	2b0f      	cmp	r3, #15
    9eca:	bfc8      	it	gt
    9ecc:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    9ed0:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9ed2:	bfd4      	ite	le
    9ed4:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    9ed8:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    9eda:	fa05 f303 	lsl.w	r3, r5, r3
    9ede:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    9ee2:	f7ff fcad 	bl	9840 <usbd_ep_data_handler>
    9ee6:	e7e6      	b.n	9eb6 <ev_epdata_handler+0xe>
    9ee8:	40027000 	.word	0x40027000

00009eec <nrf_usbd_epout_dma_handler>:
{
    9eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
    9eee:	f7ff fc7f 	bl	97f0 <usbd_dma_pending_clear>
{
    9ef2:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    9ef4:	f7ff fb72 	bl	95dc <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9ef8:	7b83      	ldrb	r3, [r0, #14]
    9efa:	2b03      	cmp	r3, #3
    9efc:	d10d      	bne.n	9f1a <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9efe:	4620      	mov	r0, r4
    9f00:	f003 fd5a 	bl	d9b8 <ep2bit>
    9f04:	2301      	movs	r3, #1
    9f06:	fa03 f000 	lsl.w	r0, r3, r0
    9f0a:	43c0      	mvns	r0, r0
    9f0c:	f7ff fc60 	bl	97d0 <atomic_and.constprop.0.isra.0>
}
    9f10:	b003      	add	sp, #12
    9f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    9f16:	f7ff bf03 	b.w	9d20 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    9f1a:	6805      	ldr	r5, [r0, #0]
    9f1c:	2d00      	cmp	r5, #0
    9f1e:	d1f7      	bne.n	9f10 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9f20:	4620      	mov	r0, r4
    9f22:	f003 fd49 	bl	d9b8 <ep2bit>
    9f26:	2301      	movs	r3, #1
    9f28:	fa03 f000 	lsl.w	r0, r3, r0
    9f2c:	43c0      	mvns	r0, r0
    9f2e:	f7ff fc4f 	bl	97d0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9f32:	2306      	movs	r3, #6
    9f34:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9f38:	4b04      	ldr	r3, [pc, #16]	; (9f4c <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9f3a:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    9f3e:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9f40:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    9f44:	a801      	add	r0, sp, #4
    9f46:	4798      	blx	r3
    9f48:	e7e2      	b.n	9f10 <nrf_usbd_epout_dma_handler+0x24>
    9f4a:	bf00      	nop
    9f4c:	20001aa0 	.word	0x20001aa0

00009f50 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    9f50:	4b02      	ldr	r3, [pc, #8]	; (9f5c <nrfx_usbd_ep_stall+0xc>)
    9f52:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9f56:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    9f5a:	4770      	bx	lr
    9f5c:	40027000 	.word	0x40027000

00009f60 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9f60:	0702      	lsls	r2, r0, #28
    9f62:	d413      	bmi.n	9f8c <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    9f64:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9f68:	f010 0f80 	tst.w	r0, #128	; 0x80
    9f6c:	4a08      	ldr	r2, [pc, #32]	; (9f90 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    9f6e:	bf0b      	itete	eq
    9f70:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    9f74:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    9f78:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    9f7c:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    9f80:	bf08      	it	eq
    9f82:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    9f84:	1e43      	subs	r3, r0, #1
    9f86:	4258      	negs	r0, r3
    9f88:	4158      	adcs	r0, r3
    9f8a:	4770      	bx	lr
        return false;
    9f8c:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    9f8e:	4770      	bx	lr
    9f90:	40027000 	.word	0x40027000

00009f94 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    9f94:	4b04      	ldr	r3, [pc, #16]	; (9fa8 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    9f96:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    9f9a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9f9e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    9fa2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    9fa6:	4770      	bx	lr
    9fa8:	40027000 	.word	0x40027000

00009fac <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    9fac:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    9fae:	2208      	movs	r2, #8
    9fb0:	2100      	movs	r1, #0
{
    9fb2:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    9fb4:	f002 fa9d 	bl	c4f2 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9fb8:	4b0e      	ldr	r3, [pc, #56]	; (9ff4 <nrfx_usbd_setup_get+0x48>)
    9fba:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    9fbe:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    9fc0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    9fc4:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    9fc6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    9fca:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    9fce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    9fd2:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    9fd4:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    9fd8:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    9fdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    9fe0:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    9fe2:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    9fe6:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    9fea:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    9fee:	80e3      	strh	r3, [r4, #6]
}
    9ff0:	bd10      	pop	{r4, pc}
    9ff2:	bf00      	nop
    9ff4:	40027000 	.word	0x40027000

00009ff8 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9ff8:	4b02      	ldr	r3, [pc, #8]	; (a004 <nrfx_usbd_setup_data_clear+0xc>)
    9ffa:	2201      	movs	r2, #1
    9ffc:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    a000:	4770      	bx	lr
    a002:	bf00      	nop
    a004:	40027000 	.word	0x40027000

0000a008 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a008:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    a00a:	f7ff fbf1 	bl	97f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a00e:	4b10      	ldr	r3, [pc, #64]	; (a050 <ev_dma_epout0_handler+0x48>)
    a010:	7b9a      	ldrb	r2, [r3, #14]
    a012:	2a03      	cmp	r2, #3
    a014:	d106      	bne.n	a024 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a016:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a01a:	b002      	add	sp, #8
    a01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a020:	f7ff bbd6 	b.w	97d0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    a024:	681c      	ldr	r4, [r3, #0]
    a026:	b974      	cbnz	r4, a046 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a028:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    a02c:	f7ff fbd0 	bl	97d0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a030:	2306      	movs	r3, #6
    a032:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    a036:	4b07      	ldr	r3, [pc, #28]	; (a054 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a038:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    a03c:	681b      	ldr	r3, [r3, #0]
    a03e:	a801      	add	r0, sp, #4
    a040:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a042:	b002      	add	sp, #8
    a044:	bd10      	pop	{r4, pc}
    a046:	b002      	add	sp, #8
    a048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    a04c:	f7ff bfd4 	b.w	9ff8 <nrfx_usbd_setup_data_clear>
    a050:	20001978 	.word	0x20001978
    a054:	20001aa0 	.word	0x20001aa0

0000a058 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a058:	4b02      	ldr	r3, [pc, #8]	; (a064 <nrfx_usbd_setup_clear+0xc>)
    a05a:	2201      	movs	r2, #1
    a05c:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    a060:	4770      	bx	lr
    a062:	bf00      	nop
    a064:	40027000 	.word	0x40027000

0000a068 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a068:	4b02      	ldr	r3, [pc, #8]	; (a074 <nrfx_usbd_setup_stall+0xc>)
    a06a:	2201      	movs	r2, #1
    a06c:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    a070:	4770      	bx	lr
    a072:	bf00      	nop
    a074:	40027000 	.word	0x40027000

0000a078 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    a078:	4b01      	ldr	r3, [pc, #4]	; (a080 <nrfx_usbd_last_setup_dir_get+0x8>)
    a07a:	7818      	ldrb	r0, [r3, #0]
    a07c:	4770      	bx	lr
    a07e:	bf00      	nop
    a080:	20002029 	.word	0x20002029

0000a084 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    a084:	b510      	push	{r4, lr}
    a086:	4602      	mov	r2, r0
	__asm__ volatile(
    a088:	f04f 0320 	mov.w	r3, #32
    a08c:	f3ef 8411 	mrs	r4, BASEPRI
    a090:	f383 8812 	msr	BASEPRI_MAX, r3
    a094:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    a098:	f003 fc8e 	bl	d9b8 <ep2bit>
    a09c:	490d      	ldr	r1, [pc, #52]	; (a0d4 <nrfx_usbd_transfer_out_drop+0x50>)
    a09e:	2301      	movs	r3, #1
    a0a0:	fa03 f000 	lsl.w	r0, r3, r0
    a0a4:	680b      	ldr	r3, [r1, #0]
    a0a6:	ea23 0300 	bic.w	r3, r3, r0
    a0aa:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    a0ac:	f012 0108 	ands.w	r1, r2, #8
    a0b0:	d10a      	bne.n	a0c8 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    a0b2:	f002 030f 	and.w	r3, r2, #15
    a0b6:	009b      	lsls	r3, r3, #2
    a0b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a0bc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    a0c0:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    a0c4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    a0c8:	f384 8811 	msr	BASEPRI, r4
    a0cc:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    a0d0:	bd10      	pop	{r4, pc}
    a0d2:	bf00      	nop
    a0d4:	20001a9c 	.word	0x20001a9c

0000a0d8 <usbd_ep_abort>:
{
    a0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a0da:	4601      	mov	r1, r0
	__asm__ volatile(
    a0dc:	f04f 0320 	mov.w	r3, #32
    a0e0:	f3ef 8511 	mrs	r5, BASEPRI
    a0e4:	f383 8812 	msr	BASEPRI_MAX, r3
    a0e8:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a0ec:	f7ff fa76 	bl	95dc <ep_state_access>
    a0f0:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a0f2:	4608      	mov	r0, r1
    a0f4:	f003 fc60 	bl	d9b8 <ep2bit>
    a0f8:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    a0fa:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a0fe:	fa02 f200 	lsl.w	r2, r2, r0
    a102:	482e      	ldr	r0, [pc, #184]	; (a1bc <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    a104:	d119      	bne.n	a13a <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a106:	6803      	ldr	r3, [r0, #0]
    a108:	ea32 0303 	bics.w	r3, r2, r3
    a10c:	d00a      	beq.n	a124 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    a10e:	4608      	mov	r0, r1
    a110:	f7ff ffb8 	bl	a084 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    a114:	2303      	movs	r3, #3
    a116:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    a118:	f385 8811 	msr	BASEPRI, r5
    a11c:	f3bf 8f6f 	isb	sy
}
    a120:	b003      	add	sp, #12
    a122:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    a124:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a126:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a128:	4925      	ldr	r1, [pc, #148]	; (a1c0 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a12a:	ea23 0302 	bic.w	r3, r3, r2
    a12e:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a130:	680b      	ldr	r3, [r1, #0]
    a132:	ea23 0302 	bic.w	r3, r3, r2
    a136:	600b      	str	r3, [r1, #0]
    a138:	e7ec      	b.n	a114 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    a13a:	070b      	lsls	r3, r1, #28
    a13c:	d415      	bmi.n	a16a <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    a13e:	2980      	cmp	r1, #128	; 0x80
    a140:	4b20      	ldr	r3, [pc, #128]	; (a1c4 <usbd_ep_abort+0xec>)
    a142:	d02f      	beq.n	a1a4 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    a144:	f001 040f 	and.w	r4, r1, #15
    a148:	f204 34da 	addw	r4, r4, #986	; 0x3da
    a14c:	0064      	lsls	r4, r4, #1
    a14e:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a152:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a156:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a15a:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a15c:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a160:	433c      	orrs	r4, r7
    a162:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    a166:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    a16a:	4f15      	ldr	r7, [pc, #84]	; (a1c0 <usbd_ep_abort+0xe8>)
    a16c:	6804      	ldr	r4, [r0, #0]
    a16e:	683b      	ldr	r3, [r7, #0]
    a170:	ea64 0c03 	orn	ip, r4, r3
    a174:	ea1c 0f02 	tst.w	ip, r2
    a178:	d0ce      	beq.n	a118 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    a17a:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a17c:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    a180:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    a182:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a184:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    a186:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    a188:	2303      	movs	r3, #3
    a18a:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a18c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    a190:	4b0d      	ldr	r3, [pc, #52]	; (a1c8 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a192:	f88d 1006 	strb.w	r1, [sp, #6]
    a196:	2206      	movs	r2, #6
            m_event_handler(&evt);
    a198:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a19a:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    a19e:	a801      	add	r0, sp, #4
    a1a0:	4798      	blx	r3
    a1a2:	e7b9      	b.n	a118 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    a1a4:	f240 74b4 	movw	r4, #1972	; 0x7b4
    a1a8:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a1ac:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a1b0:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a1b4:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a1b6:	f044 0404 	orr.w	r4, r4, #4
    a1ba:	e7d1      	b.n	a160 <usbd_ep_abort+0x88>
    a1bc:	20001a98 	.word	0x20001a98
    a1c0:	20001a9c 	.word	0x20001a9c
    a1c4:	40027000 	.word	0x40027000
    a1c8:	20001aa0 	.word	0x20001aa0

0000a1cc <ev_setup_handler>:
{
    a1cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    a1ce:	4b14      	ldr	r3, [pc, #80]	; (a220 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a1d0:	4c14      	ldr	r4, [pc, #80]	; (a224 <ev_setup_handler+0x58>)
    a1d2:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    a1d6:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    a1d8:	4e13      	ldr	r6, [pc, #76]	; (a228 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a1da:	43da      	mvns	r2, r3
    a1dc:	4b13      	ldr	r3, [pc, #76]	; (a22c <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    a1de:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a1e0:	681b      	ldr	r3, [r3, #0]
    a1e2:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    a1e4:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a1e6:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    a1e8:	f003 fbe6 	bl	d9b8 <ep2bit>
    a1ec:	2301      	movs	r3, #1
    a1ee:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a1f0:	4213      	tst	r3, r2
    a1f2:	d002      	beq.n	a1fa <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    a1f4:	4608      	mov	r0, r1
    a1f6:	f7ff ff6f 	bl	a0d8 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    a1fa:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    a1fe:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    a202:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    a204:	f7ff fae4 	bl	97d0 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    a208:	6823      	ldr	r3, [r4, #0]
    a20a:	f043 0301 	orr.w	r3, r3, #1
    a20e:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    a210:	2305      	movs	r3, #5
    a212:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    a214:	4b06      	ldr	r3, [pc, #24]	; (a230 <ev_setup_handler+0x64>)
    a216:	a801      	add	r0, sp, #4
    a218:	681b      	ldr	r3, [r3, #0]
    a21a:	4798      	blx	r3
}
    a21c:	b002      	add	sp, #8
    a21e:	bd70      	pop	{r4, r5, r6, pc}
    a220:	40027000 	.word	0x40027000
    a224:	20001a9c 	.word	0x20001a9c
    a228:	20002029 	.word	0x20002029
    a22c:	20001a98 	.word	0x20001a98
    a230:	20001aa0 	.word	0x20001aa0

0000a234 <nrfx_usbd_irq_handler>:
{
    a234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    a238:	4b1a      	ldr	r3, [pc, #104]	; (a2a4 <nrfx_usbd_irq_handler+0x70>)
    a23a:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    a23e:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    a240:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a242:	461d      	mov	r5, r3
    while (to_process)
    a244:	b970      	cbnz	r0, a264 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    a246:	4f18      	ldr	r7, [pc, #96]	; (a2a8 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    a248:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    a24c:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    a250:	f04f 0801 	mov.w	r8, #1
    while (active)
    a254:	b9bc      	cbnz	r4, a286 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    a256:	f7ff fd63 	bl	9d20 <usbd_dmareq_process>
    if (setup_active)
    a25a:	b306      	cbz	r6, a29e <nrfx_usbd_irq_handler+0x6a>
}
    a25c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    a260:	f7ff bfb4 	b.w	a1cc <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    a264:	fa90 f2a0 	rbit	r2, r0
    a268:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a26c:	490f      	ldr	r1, [pc, #60]	; (a2ac <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    a26e:	0096      	lsls	r6, r2, #2
    a270:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    a272:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a276:	680e      	ldr	r6, [r1, #0]
    if (ret)
    a278:	b116      	cbz	r6, a280 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a27a:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    a27c:	6809      	ldr	r1, [r1, #0]
    a27e:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    a280:	ea20 0002 	bic.w	r0, r0, r2
    a284:	e7de      	b.n	a244 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    a286:	fa94 f5a4 	rbit	r5, r4
    a28a:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    a28e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    a292:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    a296:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    a298:	ea24 0405 	bic.w	r4, r4, r5
    a29c:	e7da      	b.n	a254 <nrfx_usbd_irq_handler+0x20>
}
    a29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2a2:	bf00      	nop
    a2a4:	40027000 	.word	0x40027000
    a2a8:	0000e760 	.word	0x0000e760
    a2ac:	40027100 	.word	0x40027100

0000a2b0 <nrfx_usbd_stop>:
{
    a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a2b2:	4b1b      	ldr	r3, [pc, #108]	; (a320 <nrfx_usbd_stop+0x70>)
    a2b4:	2280      	movs	r2, #128	; 0x80
    a2b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    a2ba:	2027      	movs	r0, #39	; 0x27
    a2bc:	f7fa fd8a 	bl	4dd4 <arch_irq_is_enabled>
    a2c0:	b1b8      	cbz	r0, a2f2 <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    a2c2:	4e18      	ldr	r6, [pc, #96]	; (a324 <nrfx_usbd_stop+0x74>)
    a2c4:	4b18      	ldr	r3, [pc, #96]	; (a328 <nrfx_usbd_stop+0x78>)
    a2c6:	6834      	ldr	r4, [r6, #0]
    a2c8:	681b      	ldr	r3, [r3, #0]
    a2ca:	0c24      	lsrs	r4, r4, #16
    a2cc:	0424      	lsls	r4, r4, #16
    a2ce:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    a2d0:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    a2d2:	b97c      	cbnz	r4, a2f4 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    a2d4:	4d15      	ldr	r5, [pc, #84]	; (a32c <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    a2d6:	f240 13ff 	movw	r3, #511	; 0x1ff
    a2da:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    a2dc:	2027      	movs	r0, #39	; 0x27
    a2de:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    a2e2:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    a2e6:	f7fa fd61 	bl	4dac <arch_irq_disable>
    p_reg->INTENCLR = mask;
    a2ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a2ee:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    a2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    a2f4:	fa94 f5a4 	rbit	r5, r4
    a2f8:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a2fc:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    a2fe:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a300:	bfc6      	itte	gt
    a302:	f1a5 0010 	subgt.w	r0, r5, #16
    a306:	b2c0      	uxtbgt	r0, r0
    a308:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    a30c:	0703      	lsls	r3, r0, #28
    a30e:	d401      	bmi.n	a314 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    a310:	f7ff fee2 	bl	a0d8 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    a314:	fa07 f505 	lsl.w	r5, r7, r5
    a318:	ea24 0405 	bic.w	r4, r4, r5
    a31c:	e7d9      	b.n	a2d2 <nrfx_usbd_stop+0x22>
    a31e:	bf00      	nop
    a320:	e000e100 	.word	0xe000e100
    a324:	20001a9c 	.word	0x20001a9c
    a328:	20001a98 	.word	0x20001a98
    a32c:	40027000 	.word	0x40027000

0000a330 <nrfx_usbd_disable>:
{
    a330:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    a332:	f7ff ffbd 	bl	a2b0 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    a336:	4b08      	ldr	r3, [pc, #32]	; (a358 <nrfx_usbd_disable+0x28>)
    a338:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    a33c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    a340:	2200      	movs	r2, #0
    a342:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    a346:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    a34a:	f7ff fa51 	bl	97f0 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    a34e:	4b03      	ldr	r3, [pc, #12]	; (a35c <nrfx_usbd_disable+0x2c>)
    a350:	2201      	movs	r2, #1
    a352:	701a      	strb	r2, [r3, #0]
}
    a354:	bd08      	pop	{r3, pc}
    a356:	bf00      	nop
    a358:	40027000 	.word	0x40027000
    a35c:	2000202b 	.word	0x2000202b

0000a360 <nrfx_usbd_ep_disable>:
{
    a360:	b510      	push	{r4, lr}
    a362:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    a364:	f7ff feb8 	bl	a0d8 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a368:	4a10      	ldr	r2, [pc, #64]	; (a3ac <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    a36a:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a36e:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    a372:	f04f 0301 	mov.w	r3, #1
    a376:	bf14      	ite	ne
    a378:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    a37c:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    a380:	fa03 f300 	lsl.w	r3, r3, r0
    a384:	ea6f 0303 	mvn.w	r3, r3
    a388:	bf15      	itete	ne
    a38a:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    a38c:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    a38e:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    a392:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a396:	bf14      	ite	ne
    a398:	4b05      	ldrne	r3, [pc, #20]	; (a3b0 <nrfx_usbd_ep_disable+0x50>)
    a39a:	4b06      	ldreq	r3, [pc, #24]	; (a3b4 <nrfx_usbd_ep_disable+0x54>)
    a39c:	5c1a      	ldrb	r2, [r3, r0]
    a39e:	2301      	movs	r3, #1
    a3a0:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    a3a2:	4a02      	ldr	r2, [pc, #8]	; (a3ac <nrfx_usbd_ep_disable+0x4c>)
    a3a4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    a3a8:	bd10      	pop	{r4, pc}
    a3aa:	bf00      	nop
    a3ac:	40027000 	.word	0x40027000
    a3b0:	0000f958 	.word	0x0000f958
    a3b4:	0000f94f 	.word	0x0000f94f

0000a3b8 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a3b8:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    a3bc:	b570      	push	{r4, r5, r6, lr}
    a3be:	4924      	ldr	r1, [pc, #144]	; (a450 <nrfx_usbd_ep_enable+0x98>)
    a3c0:	4604      	mov	r4, r0
    a3c2:	f000 030f 	and.w	r3, r0, #15
    a3c6:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a3ca:	d012      	beq.n	a3f2 <nrfx_usbd_ep_enable+0x3a>
    a3cc:	4a21      	ldr	r2, [pc, #132]	; (a454 <nrfx_usbd_ep_enable+0x9c>)
    a3ce:	5cd2      	ldrb	r2, [r2, r3]
    a3d0:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    a3d4:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    a3d8:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    a3dc:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    a3de:	07d0      	lsls	r0, r2, #31
    a3e0:	d406      	bmi.n	a3f0 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    a3e2:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    a3e6:	fa05 f303 	lsl.w	r3, r5, r3
    a3ea:	4313      	orrs	r3, r2
    a3ec:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    a3f0:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a3f2:	4a19      	ldr	r2, [pc, #100]	; (a458 <nrfx_usbd_ep_enable+0xa0>)
    a3f4:	5cd2      	ldrb	r2, [r2, r3]
    a3f6:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    a3fa:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    a3fe:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    a402:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    a404:	07d2      	lsls	r2, r2, #31
    a406:	d4f3      	bmi.n	a3f0 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    a408:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    a40c:	fa05 f203 	lsl.w	r2, r5, r3
    a410:	4332      	orrs	r2, r6
    a412:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    a416:	2b00      	cmp	r3, #0
    a418:	d0ea      	beq.n	a3f0 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    a41a:	0703      	lsls	r3, r0, #28
    a41c:	d4e8      	bmi.n	a3f0 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    a41e:	f04f 0320 	mov.w	r3, #32
    a422:	f3ef 8611 	mrs	r6, BASEPRI
    a426:	f383 8812 	msr	BASEPRI_MAX, r3
    a42a:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    a42e:	f7ff fe29 	bl	a084 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a432:	4620      	mov	r0, r4
    a434:	f003 fac0 	bl	d9b8 <ep2bit>
    a438:	4a08      	ldr	r2, [pc, #32]	; (a45c <nrfx_usbd_ep_enable+0xa4>)
    a43a:	6813      	ldr	r3, [r2, #0]
    a43c:	fa05 f000 	lsl.w	r0, r5, r0
    a440:	ea23 0300 	bic.w	r3, r3, r0
    a444:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    a446:	f386 8811 	msr	BASEPRI, r6
    a44a:	f3bf 8f6f 	isb	sy
}
    a44e:	e7cf      	b.n	a3f0 <nrfx_usbd_ep_enable+0x38>
    a450:	40027000 	.word	0x40027000
    a454:	0000f958 	.word	0x0000f958
    a458:	0000f94f 	.word	0x0000f94f
    a45c:	20001a98 	.word	0x20001a98

0000a460 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a460:	0603      	lsls	r3, r0, #24
{
    a462:	b510      	push	{r4, lr}
    a464:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a466:	d405      	bmi.n	a474 <nrfx_usbd_ep_stall_clear+0x14>
    a468:	f7ff fd7a 	bl	9f60 <nrfx_usbd_ep_stall_check>
    a46c:	b110      	cbz	r0, a474 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    a46e:	4620      	mov	r0, r4
    a470:	f7ff fe08 	bl	a084 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    a474:	4b01      	ldr	r3, [pc, #4]	; (a47c <nrfx_usbd_ep_stall_clear+0x1c>)
    a476:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    a47a:	bd10      	pop	{r4, pc}
    a47c:	40027000 	.word	0x40027000

0000a480 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    a480:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    a482:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a486:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    a488:	6002      	str	r2, [r0, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a48a:	d004      	beq.n	a496 <nrf_gpio_pin_port_decode+0x16>
    NRF_GPIO_Type * p_port = NULL;
    a48c:	2b01      	cmp	r3, #1
    a48e:	4803      	ldr	r0, [pc, #12]	; (a49c <nrf_gpio_pin_port_decode+0x1c>)
    a490:	bf18      	it	ne
    a492:	2000      	movne	r0, #0
    a494:	4770      	bx	lr
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a496:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    a49a:	4770      	bx	lr
    a49c:	50000300 	.word	0x50000300

0000a4a0 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    a4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a4a2:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    a4a4:	f003 faf3 	bl	da8e <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    a4a8:	4608      	mov	r0, r1
    a4aa:	f003 faf0 	bl	da8e <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a4ae:	a801      	add	r0, sp, #4
    a4b0:	9601      	str	r6, [sp, #4]
    a4b2:	f7ff ffe5 	bl	a480 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a4b6:	9b01      	ldr	r3, [sp, #4]
    cnf &= ~to_update;
    a4b8:	4d2e      	ldr	r5, [pc, #184]	; (a574 <nrfx_twi_twim_bus_recover+0xd4>)
    a4ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
    a4be:	460c      	mov	r4, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a4c0:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    a4c4:	9401      	str	r4, [sp, #4]
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    a4c6:	f240 610d 	movw	r1, #1549	; 0x60d
    cnf &= ~to_update;
    a4ca:	402b      	ands	r3, r5
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    a4cc:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    a4ce:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a4d2:	a801      	add	r0, sp, #4
    a4d4:	f7ff ffd4 	bl	a480 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a4d8:	9b01      	ldr	r3, [sp, #4]
    a4da:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a4de:	2701      	movs	r7, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a4e0:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    a4e4:	402b      	ands	r3, r5
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    a4e6:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    a4e8:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    a4ec:	2004      	movs	r0, #4
    a4ee:	f003 f87d 	bl	d5ec <nrfx_busy_wait>
    a4f2:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a4f4:	a801      	add	r0, sp, #4
    a4f6:	9401      	str	r4, [sp, #4]
    a4f8:	f7ff ffc2 	bl	a480 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    a4fc:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    a4fe:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    a502:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    a504:	07db      	lsls	r3, r3, #31
    a506:	d415      	bmi.n	a534 <nrfx_twi_twim_bus_recover+0x94>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a508:	a801      	add	r0, sp, #4
    a50a:	9601      	str	r6, [sp, #4]
    a50c:	f7ff ffb8 	bl	a480 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a510:	9b01      	ldr	r3, [sp, #4]
    a512:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    a516:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    a51a:	2004      	movs	r0, #4
    a51c:	f003 f866 	bl	d5ec <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    a520:	4630      	mov	r0, r6
    a522:	f003 fab4 	bl	da8e <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    a526:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    a528:	2004      	movs	r0, #4
    a52a:	f003 f85f 	bl	d5ec <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    a52e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    a532:	d1df      	bne.n	a4f4 <nrfx_twi_twim_bus_recover+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a534:	a801      	add	r0, sp, #4
    a536:	9401      	str	r4, [sp, #4]
    a538:	f7ff ffa2 	bl	a480 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a53c:	9a01      	ldr	r2, [sp, #4]
    a53e:	2301      	movs	r3, #1
    a540:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    a542:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    a546:	2004      	movs	r0, #4
    a548:	f003 f850 	bl	d5ec <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    a54c:	4620      	mov	r0, r4
    a54e:	f003 fa9e 	bl	da8e <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    a552:	2004      	movs	r0, #4
    a554:	f003 f84a 	bl	d5ec <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a558:	a801      	add	r0, sp, #4
    a55a:	9401      	str	r4, [sp, #4]
    a55c:	f7ff ff90 	bl	a480 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    a560:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    a562:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    a566:	4804      	ldr	r0, [pc, #16]	; (a578 <nrfx_twi_twim_bus_recover+0xd8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    a568:	40d3      	lsrs	r3, r2
    a56a:	f003 0301 	and.w	r3, r3, #1
    a56e:	1ac0      	subs	r0, r0, r3
    a570:	b003      	add	sp, #12
    a572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a574:	fffcf8f0 	.word	0xfffcf8f0
    a578:	0bad0001 	.word	0x0bad0001

0000a57c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a57c:	4b10      	ldr	r3, [pc, #64]	; (a5c0 <z_sys_init_run_level+0x44>)
{
    a57e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a580:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a584:	3001      	adds	r0, #1
    a586:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    a58a:	42a6      	cmp	r6, r4
    a58c:	d800      	bhi.n	a590 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    a58e:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
    a590:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    a594:	b195      	cbz	r5, a5bc <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
    a596:	b153      	cbz	r3, a5ae <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
    a598:	4628      	mov	r0, r5
    a59a:	4798      	blx	r3
				if (rc != 0) {
    a59c:	b138      	cbz	r0, a5ae <z_sys_init_run_level+0x32>
					if (rc < 0) {
    a59e:	2800      	cmp	r0, #0
    a5a0:	bfb8      	it	lt
    a5a2:	4240      	neglt	r0, r0
					dev->state->init_res = rc;
    a5a4:	68eb      	ldr	r3, [r5, #12]
					if (rc > UINT8_MAX) {
    a5a6:	28ff      	cmp	r0, #255	; 0xff
    a5a8:	bfa8      	it	ge
    a5aa:	20ff      	movge	r0, #255	; 0xff
					dev->state->init_res = rc;
    a5ac:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    a5ae:	68ea      	ldr	r2, [r5, #12]
    a5b0:	7853      	ldrb	r3, [r2, #1]
    a5b2:	f043 0301 	orr.w	r3, r3, #1
    a5b6:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a5b8:	3408      	adds	r4, #8
    a5ba:	e7e6      	b.n	a58a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    a5bc:	4798      	blx	r3
    a5be:	e7fb      	b.n	a5b8 <z_sys_init_run_level+0x3c>
    a5c0:	0000e7c8 	.word	0x0000e7c8

0000a5c4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    a5c4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    a5c6:	4b0a      	ldr	r3, [pc, #40]	; (a5f0 <bg_thread_main+0x2c>)
    a5c8:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    a5ca:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    a5cc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    a5ce:	f7ff ffd5 	bl	a57c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    a5d2:	f001 f97b 	bl	b8cc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    a5d6:	2004      	movs	r0, #4
    a5d8:	f7ff ffd0 	bl	a57c <z_sys_init_run_level>

	z_init_static_threads();
    a5dc:	f000 f96a 	bl	a8b4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    a5e0:	f001 f9a7 	bl	b932 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a5e4:	4a03      	ldr	r2, [pc, #12]	; (a5f4 <bg_thread_main+0x30>)
    a5e6:	7b13      	ldrb	r3, [r2, #12]
    a5e8:	f023 0301 	bic.w	r3, r3, #1
    a5ec:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a5ee:	bd08      	pop	{r3, pc}
    a5f0:	2000202c 	.word	0x2000202c
    a5f4:	20000720 	.word	0x20000720

0000a5f8 <z_bss_zero>:
{
    a5f8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    a5fa:	4803      	ldr	r0, [pc, #12]	; (a608 <z_bss_zero+0x10>)
    a5fc:	4a03      	ldr	r2, [pc, #12]	; (a60c <z_bss_zero+0x14>)
    a5fe:	2100      	movs	r1, #0
    a600:	1a12      	subs	r2, r2, r0
    a602:	f003 fa84 	bl	db0e <z_early_memset>
}
    a606:	bd08      	pop	{r3, pc}
    a608:	20000440 	.word	0x20000440
    a60c:	20002030 	.word	0x20002030

0000a610 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    a610:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    a612:	2300      	movs	r3, #0
{
    a614:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    a616:	2201      	movs	r2, #1
    a618:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    a61c:	4e19      	ldr	r6, [pc, #100]	; (a684 <z_init_cpu+0x74>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a61e:	4d1a      	ldr	r5, [pc, #104]	; (a688 <z_init_cpu+0x78>)
	z_setup_new_thread(thread, stack,
    a620:	9301      	str	r3, [sp, #4]
    a622:	220f      	movs	r2, #15
    a624:	e9cd 3202 	strd	r3, r2, [sp, #8]
    a628:	4918      	ldr	r1, [pc, #96]	; (a68c <z_init_cpu+0x7c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a62a:	2314      	movs	r3, #20
    a62c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    a630:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    a634:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    a636:	f44f 70c0 	mov.w	r0, #384	; 0x180
    a63a:	4b15      	ldr	r3, [pc, #84]	; (a690 <z_init_cpu+0x80>)
    a63c:	9500      	str	r5, [sp, #0]
    a63e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a642:	fb00 1104 	mla	r1, r0, r4, r1
    a646:	4630      	mov	r0, r6
    a648:	f000 f8d6 	bl	a7f8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a64c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    a64e:	4a11      	ldr	r2, [pc, #68]	; (a694 <z_init_cpu+0x84>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    a650:	60ee      	str	r6, [r5, #12]
    a652:	f023 0304 	bic.w	r3, r3, #4
    a656:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    a658:	f44f 6304 	mov.w	r3, #2112	; 0x840
    a65c:	fb04 3303 	mla	r3, r4, r3, r3
    a660:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
    a662:	606b      	str	r3, [r5, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a664:	4b0c      	ldr	r3, [pc, #48]	; (a698 <z_init_cpu+0x88>)
	_kernel.cpus[id].id = id;
    a666:	742c      	strb	r4, [r5, #16]
    a668:	f3bf 8f5b 	dmb	ish
    a66c:	e853 1f00 	ldrex	r1, [r3]
    a670:	3101      	adds	r1, #1
    a672:	e843 1200 	strex	r2, r1, [r3]
    a676:	2a00      	cmp	r2, #0
    a678:	d1f8      	bne.n	a66c <z_init_cpu+0x5c>
    a67a:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
    a67e:	b006      	add	sp, #24
    a680:	bd70      	pop	{r4, r5, r6, pc}
    a682:	bf00      	nop
    a684:	200006a0 	.word	0x200006a0
    a688:	20001aa8 	.word	0x20001aa8
    a68c:	20004180 	.word	0x20004180
    a690:	0000a96d 	.word	0x0000a96d
    a694:	20003940 	.word	0x20003940
    a698:	20001aa4 	.word	0x20001aa4

0000a69c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    a69c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    a69e:	2000      	movs	r0, #0
{
    a6a0:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    a6a2:	f7ff ff6b 	bl	a57c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    a6a6:	4b2d      	ldr	r3, [pc, #180]	; (a75c <z_cstart+0xc0>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a6a8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    a6ac:	4d2c      	ldr	r5, [pc, #176]	; (a760 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    a6ae:	4e2d      	ldr	r6, [pc, #180]	; (a764 <z_cstart+0xc8>)
    a6b0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a6b2:	4f2d      	ldr	r7, [pc, #180]	; (a768 <z_cstart+0xcc>)
    a6b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a6b8:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a6ba:	2400      	movs	r4, #0
    a6bc:	23e0      	movs	r3, #224	; 0xe0
    a6be:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    a6c2:	77ec      	strb	r4, [r5, #31]
    a6c4:	762c      	strb	r4, [r5, #24]
    a6c6:	766c      	strb	r4, [r5, #25]
    a6c8:	76ac      	strb	r4, [r5, #26]
    a6ca:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a6ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a6d0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a6d4:	626b      	str	r3, [r5, #36]	; 0x24
    a6d6:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a6da:	f7fa fdd1 	bl	5280 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a6de:	f7fa fb37 	bl	4d50 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a6e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a6e6:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a6e8:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a6ea:	f7fa fead 	bl	5448 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a6ee:	f7fa fe13 	bl	5318 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    a6f2:	f240 1301 	movw	r3, #257	; 0x101
    a6f6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    a6fa:	ab06      	add	r3, sp, #24
    a6fc:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    a6fe:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    a702:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a704:	f003 f9d0 	bl	daa8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    a708:	2001      	movs	r0, #1
    a70a:	f7ff ff37 	bl	a57c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    a70e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    a710:	4d16      	ldr	r5, [pc, #88]	; (a76c <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    a712:	f7ff ff33 	bl	a57c <z_sys_init_run_level>
	z_sched_init();
    a716:	f000 fe29 	bl	b36c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a71a:	4b15      	ldr	r3, [pc, #84]	; (a770 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    a71c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a71e:	9305      	str	r3, [sp, #20]
    a720:	2301      	movs	r3, #1
    a722:	4914      	ldr	r1, [pc, #80]	; (a774 <z_cstart+0xd8>)
    a724:	9400      	str	r4, [sp, #0]
    a726:	e9cd 4303 	strd	r4, r3, [sp, #12]
    a72a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a72e:	463b      	mov	r3, r7
    a730:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a734:	4628      	mov	r0, r5
    a736:	f000 f85f 	bl	a7f8 <z_setup_new_thread>
    a73a:	7b6a      	ldrb	r2, [r5, #13]
    a73c:	4606      	mov	r6, r0
    a73e:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    a742:	4628      	mov	r0, r5
    a744:	736a      	strb	r2, [r5, #13]
    a746:	f003 fb70 	bl	de2a <z_ready_thread>
	z_init_cpu(0);
    a74a:	4620      	mov	r0, r4
    a74c:	f7ff ff60 	bl	a610 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a750:	463a      	mov	r2, r7
    a752:	4631      	mov	r1, r6
    a754:	4628      	mov	r0, r5
    a756:	f7fa fc11 	bl	4f7c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a75a:	bf00      	nop
    a75c:	20004180 	.word	0x20004180
    a760:	e000ed00 	.word	0xe000ed00
    a764:	20001aa8 	.word	0x20001aa8
    a768:	0000a5c5 	.word	0x0000a5c5
    a76c:	20000720 	.word	0x20000720
    a770:	0000f96b 	.word	0x0000f96b
    a774:	20004300 	.word	0x20004300

0000a778 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    a778:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a77a:	4c06      	ldr	r4, [pc, #24]	; (a794 <init_mem_slab_module+0x1c>)
    a77c:	4d06      	ldr	r5, [pc, #24]	; (a798 <init_mem_slab_module+0x20>)
	int rc = 0;
    a77e:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a780:	42ac      	cmp	r4, r5
    a782:	d300      	bcc.n	a786 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    a784:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    a786:	4620      	mov	r0, r4
    a788:	f003 f9c5 	bl	db16 <create_free_list>
		if (rc < 0) {
    a78c:	2800      	cmp	r0, #0
    a78e:	dbf9      	blt.n	a784 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a790:	341c      	adds	r4, #28
    a792:	e7f5      	b.n	a780 <init_mem_slab_module+0x8>
    a794:	20000300 	.word	0x20000300
    a798:	2000031c 	.word	0x2000031c

0000a79c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a79c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a79e:	460c      	mov	r4, r1
	__asm__ volatile(
    a7a0:	f04f 0520 	mov.w	r5, #32
    a7a4:	f3ef 8111 	mrs	r1, BASEPRI
    a7a8:	f385 8812 	msr	BASEPRI_MAX, r5
    a7ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a7b0:	6945      	ldr	r5, [r0, #20]
    a7b2:	b15d      	cbz	r5, a7cc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    a7b4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    a7b6:	682b      	ldr	r3, [r5, #0]
    a7b8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    a7ba:	6983      	ldr	r3, [r0, #24]
    a7bc:	3301      	adds	r3, #1
    a7be:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a7c0:	2000      	movs	r0, #0
	__asm__ volatile(
    a7c2:	f381 8811 	msr	BASEPRI, r1
    a7c6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    a7ca:	e011      	b.n	a7f0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a7cc:	ea52 0603 	orrs.w	r6, r2, r3
    a7d0:	d103      	bne.n	a7da <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    a7d2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    a7d4:	f06f 000b 	mvn.w	r0, #11
    a7d8:	e7f3      	b.n	a7c2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a7da:	e9cd 2300 	strd	r2, r3, [sp]
    a7de:	4602      	mov	r2, r0
    a7e0:	3008      	adds	r0, #8
    a7e2:	f000 fccd 	bl	b180 <z_pend_curr>
		if (result == 0) {
    a7e6:	b918      	cbnz	r0, a7f0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    a7e8:	4b02      	ldr	r3, [pc, #8]	; (a7f4 <k_mem_slab_alloc+0x58>)
    a7ea:	689b      	ldr	r3, [r3, #8]
    a7ec:	695b      	ldr	r3, [r3, #20]
    a7ee:	6023      	str	r3, [r4, #0]
}
    a7f0:	b002      	add	sp, #8
    a7f2:	bd70      	pop	{r4, r5, r6, pc}
    a7f4:	20001aa8 	.word	0x20001aa8

0000a7f8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    a7f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    a7fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    a7fe:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    a800:	2604      	movs	r6, #4
    a802:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    a804:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    a806:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a808:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    a80c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a80e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    a810:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a814:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    a816:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a818:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    a81c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    a81e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    a822:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    a826:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    a828:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    a82a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a82c:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a830:	9202      	str	r2, [sp, #8]
    a832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a834:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    a836:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a83a:	9200      	str	r2, [sp, #0]
    a83c:	4642      	mov	r2, r8
{
    a83e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a840:	f7fa fb6a 	bl	4f18 <arch_new_thread>
	if (!_current) {
    a844:	4b04      	ldr	r3, [pc, #16]	; (a858 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    a846:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    a848:	689b      	ldr	r3, [r3, #8]
    a84a:	b103      	cbz	r3, a84e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    a84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    a84e:	6723      	str	r3, [r4, #112]	; 0x70
}
    a850:	4640      	mov	r0, r8
    a852:	b004      	add	sp, #16
    a854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a858:	20001aa8 	.word	0x20001aa8

0000a85c <z_impl_k_thread_create>:
{
    a85c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a85e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a860:	2500      	movs	r5, #0
    a862:	9505      	str	r5, [sp, #20]
    a864:	9d10      	ldr	r5, [sp, #64]	; 0x40
    a866:	9504      	str	r5, [sp, #16]
    a868:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    a86a:	9503      	str	r5, [sp, #12]
    a86c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a86e:	9502      	str	r5, [sp, #8]
{
    a870:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a874:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a876:	9501      	str	r5, [sp, #4]
    a878:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    a87a:	9500      	str	r5, [sp, #0]
{
    a87c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a87e:	f7ff ffbb 	bl	a7f8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    a882:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    a886:	bf08      	it	eq
    a888:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    a88c:	d005      	beq.n	a89a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a88e:	ea56 0307 	orrs.w	r3, r6, r7
    a892:	d105      	bne.n	a8a0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    a894:	4620      	mov	r0, r4
    a896:	f000 fce9 	bl	b26c <z_sched_start>
}
    a89a:	4620      	mov	r0, r4
    a89c:	b007      	add	sp, #28
    a89e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a8a0:	4903      	ldr	r1, [pc, #12]	; (a8b0 <z_impl_k_thread_create+0x54>)
    a8a2:	463a      	mov	r2, r7
    a8a4:	4633      	mov	r3, r6
    a8a6:	f104 0018 	add.w	r0, r4, #24
    a8aa:	f000 fef5 	bl	b698 <z_add_timeout>
    a8ae:	e7f4      	b.n	a89a <z_impl_k_thread_create+0x3e>
    a8b0:	0000de8f 	.word	0x0000de8f

0000a8b4 <z_init_static_threads>:
{
    a8b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a8b8:	4c29      	ldr	r4, [pc, #164]	; (a960 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    a8ba:	4d2a      	ldr	r5, [pc, #168]	; (a964 <z_init_static_threads+0xb0>)
{
    a8bc:	b087      	sub	sp, #28
    a8be:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    a8c0:	42ae      	cmp	r6, r5
    a8c2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    a8c6:	d30f      	bcc.n	a8e8 <z_init_static_threads+0x34>
	k_sched_lock();
    a8c8:	f000 fd20 	bl	b30c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    a8cc:	4c24      	ldr	r4, [pc, #144]	; (a960 <z_init_static_threads+0xac>)
    a8ce:	f8df 9098 	ldr.w	r9, [pc, #152]	; a968 <z_init_static_threads+0xb4>
    a8d2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    a8d6:	f240 37e7 	movw	r7, #999	; 0x3e7
    a8da:	42ac      	cmp	r4, r5
    a8dc:	d320      	bcc.n	a920 <z_init_static_threads+0x6c>
}
    a8de:	b007      	add	sp, #28
    a8e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    a8e4:	f000 bd26 	b.w	b334 <k_sched_unlock>
		z_setup_new_thread(
    a8e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a8ec:	9305      	str	r3, [sp, #20]
    a8ee:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    a8f2:	9304      	str	r3, [sp, #16]
    a8f4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a8f8:	9303      	str	r3, [sp, #12]
    a8fa:	f854 3c14 	ldr.w	r3, [r4, #-20]
    a8fe:	9302      	str	r3, [sp, #8]
    a900:	f854 3c18 	ldr.w	r3, [r4, #-24]
    a904:	9301      	str	r3, [sp, #4]
    a906:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    a90a:	9300      	str	r3, [sp, #0]
    a90c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    a910:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    a914:	f7ff ff70 	bl	a7f8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a918:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    a91c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    a91e:	e7ce      	b.n	a8be <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    a920:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a922:	1c5a      	adds	r2, r3, #1
    a924:	d00d      	beq.n	a942 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    a926:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a92a:	2100      	movs	r1, #0
    a92c:	4638      	mov	r0, r7
    a92e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a932:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    a936:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a93a:	d104      	bne.n	a946 <z_init_static_threads+0x92>
	z_sched_start(thread);
    a93c:	4640      	mov	r0, r8
    a93e:	f000 fc95 	bl	b26c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    a942:	342c      	adds	r4, #44	; 0x2c
    a944:	e7c9      	b.n	a8da <z_init_static_threads+0x26>
    a946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a94a:	2300      	movs	r3, #0
    a94c:	f7f7 fa74 	bl	1e38 <__aeabi_uldivmod>
    a950:	4602      	mov	r2, r0
    a952:	460b      	mov	r3, r1
    a954:	f108 0018 	add.w	r0, r8, #24
    a958:	4649      	mov	r1, r9
    a95a:	f000 fe9d 	bl	b698 <z_add_timeout>
    a95e:	e7f0      	b.n	a942 <z_init_static_threads+0x8e>
    a960:	0000e3f8 	.word	0x0000e3f8
    a964:	0000e450 	.word	0x0000e450
    a968:	0000de8f 	.word	0x0000de8f

0000a96c <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
    a96c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    a96e:	4c0b      	ldr	r4, [pc, #44]	; (a99c <idle+0x30>)
	return !z_sys_post_kernel;
    a970:	4d0b      	ldr	r5, [pc, #44]	; (a9a0 <idle+0x34>)
	__asm__ volatile(
    a972:	f04f 0220 	mov.w	r2, #32
    a976:	f3ef 8311 	mrs	r3, BASEPRI
    a97a:	f382 8812 	msr	BASEPRI_MAX, r2
    a97e:	f3bf 8f6f 	isb	sy
    a982:	f003 fb1b 	bl	dfbc <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    a986:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    a988:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    a98a:	b913      	cbnz	r3, a992 <idle+0x26>
	arch_cpu_idle();
    a98c:	f7fa f9e6 	bl	4d5c <arch_cpu_idle>
}
    a990:	e7ef      	b.n	a972 <idle+0x6>
    a992:	f7f8 febb 	bl	370c <pm_system_suspend>
    a996:	2800      	cmp	r0, #0
    a998:	d1eb      	bne.n	a972 <idle+0x6>
    a99a:	e7f7      	b.n	a98c <idle+0x20>
    a99c:	20001aa8 	.word	0x20001aa8
    a9a0:	2000202c 	.word	0x2000202c

0000a9a4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    a9a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a9a8:	4604      	mov	r4, r0
    a9aa:	4617      	mov	r7, r2
    a9ac:	461e      	mov	r6, r3
    a9ae:	f04f 0320 	mov.w	r3, #32
    a9b2:	f3ef 8811 	mrs	r8, BASEPRI
    a9b6:	f383 8812 	msr	BASEPRI_MAX, r3
    a9ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a9be:	68c3      	ldr	r3, [r0, #12]
    a9c0:	4a33      	ldr	r2, [pc, #204]	; (aa90 <z_impl_k_mutex_lock+0xec>)
    a9c2:	b17b      	cbz	r3, a9e4 <z_impl_k_mutex_lock+0x40>
    a9c4:	6880      	ldr	r0, [r0, #8]
    a9c6:	6891      	ldr	r1, [r2, #8]
    a9c8:	4288      	cmp	r0, r1
    a9ca:	d019      	beq.n	aa00 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    a9cc:	ea57 0306 	orrs.w	r3, r7, r6
    a9d0:	d118      	bne.n	aa04 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    a9d2:	f388 8811 	msr	BASEPRI, r8
    a9d6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    a9da:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    a9de:	b002      	add	sp, #8
    a9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    a9e4:	6891      	ldr	r1, [r2, #8]
    a9e6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    a9ea:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    a9ec:	3301      	adds	r3, #1
    a9ee:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    a9f0:	6893      	ldr	r3, [r2, #8]
    a9f2:	60a3      	str	r3, [r4, #8]
    a9f4:	f388 8811 	msr	BASEPRI, r8
    a9f8:	f3bf 8f6f 	isb	sy
		return 0;
    a9fc:	2000      	movs	r0, #0
    a9fe:	e7ee      	b.n	a9de <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    aa00:	6921      	ldr	r1, [r4, #16]
    aa02:	e7f2      	b.n	a9ea <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    aa04:	f991 100e 	ldrsb.w	r1, [r1, #14]
    aa08:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    aa0c:	4299      	cmp	r1, r3
    aa0e:	bfa8      	it	ge
    aa10:	4619      	movge	r1, r3
    aa12:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    aa16:	4291      	cmp	r1, r2
    aa18:	bfb8      	it	lt
    aa1a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    aa1c:	428b      	cmp	r3, r1
    aa1e:	dd2e      	ble.n	aa7e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    aa20:	f003 f8ca 	bl	dbb8 <adjust_owner_prio.isra.0>
    aa24:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    aa26:	e9cd 7600 	strd	r7, r6, [sp]
    aa2a:	481a      	ldr	r0, [pc, #104]	; (aa94 <z_impl_k_mutex_lock+0xf0>)
    aa2c:	4622      	mov	r2, r4
    aa2e:	4641      	mov	r1, r8
    aa30:	f000 fba6 	bl	b180 <z_pend_curr>
	if (got_mutex == 0) {
    aa34:	2800      	cmp	r0, #0
    aa36:	d0e1      	beq.n	a9fc <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    aa38:	f04f 0320 	mov.w	r3, #32
    aa3c:	f3ef 8611 	mrs	r6, BASEPRI
    aa40:	f383 8812 	msr	BASEPRI_MAX, r3
    aa44:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    aa48:	68a0      	ldr	r0, [r4, #8]
    aa4a:	b1d0      	cbz	r0, aa82 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    aa4c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    aa4e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aa50:	429c      	cmp	r4, r3
    aa52:	d00a      	beq.n	aa6a <z_impl_k_mutex_lock+0xc6>
    aa54:	b14b      	cbz	r3, aa6a <z_impl_k_mutex_lock+0xc6>
    aa56:	f993 300e 	ldrsb.w	r3, [r3, #14]
    aa5a:	4299      	cmp	r1, r3
    aa5c:	bfa8      	it	ge
    aa5e:	4619      	movge	r1, r3
    aa60:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    aa64:	4299      	cmp	r1, r3
    aa66:	bfb8      	it	lt
    aa68:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    aa6a:	f003 f8a5 	bl	dbb8 <adjust_owner_prio.isra.0>
    aa6e:	b140      	cbz	r0, aa82 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    aa70:	4808      	ldr	r0, [pc, #32]	; (aa94 <z_impl_k_mutex_lock+0xf0>)
    aa72:	4631      	mov	r1, r6
    aa74:	f000 fbe8 	bl	b248 <z_reschedule>
	return -EAGAIN;
    aa78:	f06f 000a 	mvn.w	r0, #10
    aa7c:	e7af      	b.n	a9de <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    aa7e:	2500      	movs	r5, #0
    aa80:	e7d1      	b.n	aa26 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    aa82:	2d00      	cmp	r5, #0
    aa84:	d1f4      	bne.n	aa70 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    aa86:	f386 8811 	msr	BASEPRI, r6
    aa8a:	f3bf 8f6f 	isb	sy
    aa8e:	e7f3      	b.n	aa78 <z_impl_k_mutex_lock+0xd4>
    aa90:	20001aa8 	.word	0x20001aa8
    aa94:	2000202d 	.word	0x2000202d

0000aa98 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    aa98:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    aa9a:	6883      	ldr	r3, [r0, #8]
{
    aa9c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    aa9e:	b36b      	cbz	r3, aafc <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    aaa0:	4a19      	ldr	r2, [pc, #100]	; (ab08 <z_impl_k_mutex_unlock+0x70>)
    aaa2:	6892      	ldr	r2, [r2, #8]
    aaa4:	4293      	cmp	r3, r2
    aaa6:	d12c      	bne.n	ab02 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    aaa8:	68c3      	ldr	r3, [r0, #12]
    aaaa:	2b01      	cmp	r3, #1
    aaac:	d903      	bls.n	aab6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    aaae:	3b01      	subs	r3, #1
    aab0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    aab2:	2000      	movs	r0, #0
}
    aab4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    aab6:	f04f 0320 	mov.w	r3, #32
    aaba:	f3ef 8511 	mrs	r5, BASEPRI
    aabe:	f383 8812 	msr	BASEPRI_MAX, r3
    aac2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    aac6:	6901      	ldr	r1, [r0, #16]
    aac8:	6880      	ldr	r0, [r0, #8]
    aaca:	f003 f875 	bl	dbb8 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    aace:	4620      	mov	r0, r4
    aad0:	f003 f9e1 	bl	de96 <z_unpend_first_thread>
	mutex->owner = new_owner;
    aad4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    aad6:	b158      	cbz	r0, aaf0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    aad8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    aadc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    aade:	2200      	movs	r2, #0
    aae0:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    aae2:	f003 f9a2 	bl	de2a <z_ready_thread>
		z_reschedule(&lock, key);
    aae6:	4809      	ldr	r0, [pc, #36]	; (ab0c <z_impl_k_mutex_unlock+0x74>)
    aae8:	4629      	mov	r1, r5
    aaea:	f000 fbad 	bl	b248 <z_reschedule>
    aaee:	e7e0      	b.n	aab2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    aaf0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    aaf2:	f385 8811 	msr	BASEPRI, r5
    aaf6:	f3bf 8f6f 	isb	sy
    aafa:	e7da      	b.n	aab2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    aafc:	f06f 0015 	mvn.w	r0, #21
    ab00:	e7d8      	b.n	aab4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    ab02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ab06:	e7d5      	b.n	aab4 <z_impl_k_mutex_unlock+0x1c>
    ab08:	20001aa8 	.word	0x20001aa8
    ab0c:	2000202d 	.word	0x2000202d

0000ab10 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    ab10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ab12:	4611      	mov	r1, r2
	__asm__ volatile(
    ab14:	f04f 0220 	mov.w	r2, #32
    ab18:	f3ef 8511 	mrs	r5, BASEPRI
    ab1c:	f382 8812 	msr	BASEPRI_MAX, r2
    ab20:	f3bf 8f6f 	isb	sy
    ab24:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    ab26:	b19c      	cbz	r4, ab50 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ab28:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    ab2a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ab2c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    ab30:	4294      	cmp	r4, r2
	list->head = node;
    ab32:	6003      	str	r3, [r0, #0]
	list->tail = node;
    ab34:	bf08      	it	eq
    ab36:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    ab38:	2101      	movs	r1, #1
    ab3a:	4620      	mov	r0, r4
    ab3c:	f003 f8ad 	bl	dc9a <z_queue_node_peek>
    ab40:	4604      	mov	r4, r0
	__asm__ volatile(
    ab42:	f385 8811 	msr	BASEPRI, r5
    ab46:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    ab4a:	4620      	mov	r0, r4
    ab4c:	b003      	add	sp, #12
    ab4e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ab50:	ea51 0203 	orrs.w	r2, r1, r3
    ab54:	d0f5      	beq.n	ab42 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    ab56:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    ab5a:	e9cd 1300 	strd	r1, r3, [sp]
    ab5e:	4610      	mov	r0, r2
    ab60:	4629      	mov	r1, r5
    ab62:	f000 fb0d 	bl	b180 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    ab66:	2800      	cmp	r0, #0
    ab68:	d1ef      	bne.n	ab4a <z_impl_k_queue_get+0x3a>
    ab6a:	4b02      	ldr	r3, [pc, #8]	; (ab74 <z_impl_k_queue_get+0x64>)
    ab6c:	689b      	ldr	r3, [r3, #8]
    ab6e:	695c      	ldr	r4, [r3, #20]
    ab70:	e7eb      	b.n	ab4a <z_impl_k_queue_get+0x3a>
    ab72:	bf00      	nop
    ab74:	20001aa8 	.word	0x20001aa8

0000ab78 <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    ab78:	b538      	push	{r3, r4, r5, lr}
    ab7a:	4604      	mov	r4, r0
	__asm__ volatile(
    ab7c:	f04f 0320 	mov.w	r3, #32
    ab80:	f3ef 8511 	mrs	r5, BASEPRI
    ab84:	f383 8812 	msr	BASEPRI_MAX, r3
    ab88:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	bool resched = true;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    ab8c:	f003 f983 	bl	de96 <z_unpend_first_thread>

	if (thread != NULL) {
    ab90:	b148      	cbz	r0, aba6 <z_impl_k_sem_give+0x2e>
    ab92:	2200      	movs	r2, #0
    ab94:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    ab96:	f003 f948 	bl	de2a <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (resched) {
		z_reschedule(&lock, key);
    ab9a:	4629      	mov	r1, r5
    ab9c:	4807      	ldr	r0, [pc, #28]	; (abbc <z_impl_k_sem_give+0x44>)
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    ab9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
    aba2:	f000 bb51 	b.w	b248 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    aba6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    abaa:	429a      	cmp	r2, r3
    abac:	bf18      	it	ne
    abae:	3301      	addne	r3, #1
    abb0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    abb2:	f385 8811 	msr	BASEPRI, r5
    abb6:	f3bf 8f6f 	isb	sy
}
    abba:	bd38      	pop	{r3, r4, r5, pc}
    abbc:	2000202d 	.word	0x2000202d

0000abc0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    abc0:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
    abc2:	f04f 0420 	mov.w	r4, #32
    abc6:	f3ef 8111 	mrs	r1, BASEPRI
    abca:	f384 8812 	msr	BASEPRI_MAX, r4
    abce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    abd2:	6884      	ldr	r4, [r0, #8]
    abd4:	b144      	cbz	r4, abe8 <z_impl_k_sem_take+0x28>
		sem->count--;
    abd6:	3c01      	subs	r4, #1
    abd8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    abda:	f381 8811 	msr	BASEPRI, r1
    abde:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    abe2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    abe4:	b002      	add	sp, #8
    abe6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    abe8:	ea52 0403 	orrs.w	r4, r2, r3
    abec:	d106      	bne.n	abfc <z_impl_k_sem_take+0x3c>
    abee:	f381 8811 	msr	BASEPRI, r1
    abf2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    abf6:	f06f 000f 	mvn.w	r0, #15
    abfa:	e7f3      	b.n	abe4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    abfc:	e9cd 2300 	strd	r2, r3, [sp]
    ac00:	4602      	mov	r2, r0
    ac02:	4802      	ldr	r0, [pc, #8]	; (ac0c <z_impl_k_sem_take+0x4c>)
    ac04:	f000 fabc 	bl	b180 <z_pend_curr>
	return ret;
    ac08:	e7ec      	b.n	abe4 <z_impl_k_sem_take+0x24>
    ac0a:	bf00      	nop
    ac0c:	2000202d 	.word	0x2000202d

0000ac10 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
    ac10:	b570      	push	{r4, r5, r6, lr}
    ac12:	4604      	mov	r4, r0
	__asm__ volatile(
    ac14:	f04f 0320 	mov.w	r3, #32
    ac18:	f3ef 8511 	mrs	r5, BASEPRI
    ac1c:	f383 8812 	msr	BASEPRI_MAX, r3
    ac20:	f3bf 8f6f 	isb	sy
    ac24:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
    ac28:	4620      	mov	r0, r4
    ac2a:	f003 f934 	bl	de96 <z_unpend_first_thread>
		if (thread == NULL) {
    ac2e:	b118      	cbz	r0, ac38 <z_impl_k_sem_reset+0x28>
    ac30:	6786      	str	r6, [r0, #120]	; 0x78
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
    ac32:	f003 f8fa 	bl	de2a <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
    ac36:	e7f7      	b.n	ac28 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
    ac38:	60a0      	str	r0, [r4, #8]

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
    ac3a:	4629      	mov	r1, r5
    ac3c:	4802      	ldr	r0, [pc, #8]	; (ac48 <z_impl_k_sem_reset+0x38>)
}
    ac3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    ac42:	f000 bb01 	b.w	b248 <z_reschedule>
    ac46:	bf00      	nop
    ac48:	2000202d 	.word	0x2000202d

0000ac4c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    ac50:	4e4a      	ldr	r6, [pc, #296]	; (ad7c <work_queue_main+0x130>)
    ac52:	b085      	sub	sp, #20
    ac54:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    ac56:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    ac5a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    ac5e:	f04f 0320 	mov.w	r3, #32
    ac62:	f3ef 8711 	mrs	r7, BASEPRI
    ac66:	f383 8812 	msr	BASEPRI_MAX, r3
    ac6a:	f3bf 8f6f 	isb	sy
    ac6e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    ac72:	b98d      	cbnz	r5, ac98 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    ac74:	2102      	movs	r1, #2
    ac76:	f104 0098 	add.w	r0, r4, #152	; 0x98
    ac7a:	f003 f831 	bl	dce0 <flag_test_and_clear>
    ac7e:	2800      	cmp	r0, #0
    ac80:	d143      	bne.n	ad0a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    ac82:	2300      	movs	r3, #0
    ac84:	e9cd 8900 	strd	r8, r9, [sp]
    ac88:	9302      	str	r3, [sp, #8]
    ac8a:	f104 0288 	add.w	r2, r4, #136	; 0x88
    ac8e:	4639      	mov	r1, r7
    ac90:	483b      	ldr	r0, [pc, #236]	; (ad80 <work_queue_main+0x134>)
    ac92:	f000 fc8f 	bl	b5b4 <z_sched_wait>
			continue;
    ac96:	e7e2      	b.n	ac5e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ac98:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    ac9c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    ac9e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aca2:	4295      	cmp	r5, r2
	list->tail = node;
    aca4:	bf08      	it	eq
    aca6:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    acaa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    acae:	f043 0302 	orr.w	r3, r3, #2
    acb2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    acb6:	68eb      	ldr	r3, [r5, #12]
    acb8:	f023 0304 	bic.w	r3, r3, #4
    acbc:	f043 0301 	orr.w	r3, r3, #1
    acc0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    acc2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    acc4:	f387 8811 	msr	BASEPRI, r7
    acc8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    accc:	4628      	mov	r0, r5
    acce:	4798      	blx	r3
	__asm__ volatile(
    acd0:	f04f 0320 	mov.w	r3, #32
    acd4:	f3ef 8b11 	mrs	fp, BASEPRI
    acd8:	f383 8812 	msr	BASEPRI_MAX, r3
    acdc:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    ace0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ace2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    ace4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ace8:	d419      	bmi.n	ad1e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    acea:	60ea      	str	r2, [r5, #12]
    acec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    acf0:	f023 0302 	bic.w	r3, r3, #2
    acf4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    acf8:	f38b 8811 	msr	BASEPRI, fp
    acfc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    ad00:	05db      	lsls	r3, r3, #23
    ad02:	d4ac      	bmi.n	ac5e <work_queue_main+0x12>
	z_impl_k_yield();
    ad04:	f000 fb3a 	bl	b37c <z_impl_k_yield>
}
    ad08:	e7a9      	b.n	ac5e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    ad0a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    ad0e:	2200      	movs	r2, #0
    ad10:	2101      	movs	r1, #1
    ad12:	4628      	mov	r0, r5
    ad14:	f003 f919 	bl	df4a <z_sched_wake>
    ad18:	2800      	cmp	r0, #0
    ad1a:	d1f8      	bne.n	ad0e <work_queue_main+0xc2>
    ad1c:	e7b1      	b.n	ac82 <work_queue_main+0x36>
	return list->head;
    ad1e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    ad20:	f023 0303 	bic.w	r3, r3, #3
    ad24:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ad26:	2800      	cmp	r0, #0
    ad28:	d0e0      	beq.n	acec <work_queue_main+0xa0>
	return node->next;
    ad2a:	2700      	movs	r7, #0
    ad2c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    ad30:	463b      	mov	r3, r7
    ad32:	2800      	cmp	r0, #0
    ad34:	d0da      	beq.n	acec <work_queue_main+0xa0>
		if (wc->work == work) {
    ad36:	6842      	ldr	r2, [r0, #4]
    ad38:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    ad3a:	4601      	mov	r1, r0
		if (wc->work == work) {
    ad3c:	d10c      	bne.n	ad58 <work_queue_main+0x10c>
	return node->next;
    ad3e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    ad40:	b99f      	cbnz	r7, ad6a <work_queue_main+0x11e>
    ad42:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    ad44:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    ad46:	4282      	cmp	r2, r0
    ad48:	d100      	bne.n	ad4c <work_queue_main+0x100>
	list->tail = node;
    ad4a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    ad4c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    ad50:	f7ff ff12 	bl	ab78 <z_impl_k_sem_give>
}
    ad54:	4639      	mov	r1, r7
    ad56:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ad58:	f1ba 0f00 	cmp.w	sl, #0
    ad5c:	d00b      	beq.n	ad76 <work_queue_main+0x12a>
	return node->next;
    ad5e:	f8da 2000 	ldr.w	r2, [sl]
    ad62:	4650      	mov	r0, sl
    ad64:	460f      	mov	r7, r1
    ad66:	4692      	mov	sl, r2
    ad68:	e7e3      	b.n	ad32 <work_queue_main+0xe6>
	parent->next = child;
    ad6a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    ad6c:	6872      	ldr	r2, [r6, #4]
    ad6e:	4282      	cmp	r2, r0
	list->tail = node;
    ad70:	bf08      	it	eq
    ad72:	6077      	streq	r7, [r6, #4]
}
    ad74:	e7ea      	b.n	ad4c <work_queue_main+0x100>
    ad76:	4652      	mov	r2, sl
    ad78:	e7f3      	b.n	ad62 <work_queue_main+0x116>
    ad7a:	bf00      	nop
    ad7c:	20001acc 	.word	0x20001acc
    ad80:	2000202d 	.word	0x2000202d

0000ad84 <submit_to_queue_locked>:
{
    ad84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    ad86:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ad88:	079a      	lsls	r2, r3, #30
{
    ad8a:	4604      	mov	r4, r0
    ad8c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ad8e:	f3c3 0640 	ubfx	r6, r3, #1, #1
    ad92:	d42c      	bmi.n	adee <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    ad94:	075b      	lsls	r3, r3, #29
    ad96:	d41a      	bmi.n	adce <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    ad98:	680b      	ldr	r3, [r1, #0]
    ad9a:	b90b      	cbnz	r3, ada0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    ad9c:	6883      	ldr	r3, [r0, #8]
    ad9e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    ada0:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    ada2:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    ada4:	bf44      	itt	mi
    ada6:	68a3      	ldrmi	r3, [r4, #8]
    ada8:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    adaa:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    adac:	bf4c      	ite	mi
    adae:	2602      	movmi	r6, #2
		ret = 1;
    adb0:	2601      	movpl	r6, #1
	if (queue == NULL) {
    adb2:	2d00      	cmp	r5, #0
    adb4:	d03a      	beq.n	ae2c <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    adb6:	4b1f      	ldr	r3, [pc, #124]	; (ae34 <submit_to_queue_locked+0xb0>)
    adb8:	689b      	ldr	r3, [r3, #8]
    adba:	42ab      	cmp	r3, r5
    adbc:	d00a      	beq.n	add4 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    adbe:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    adc2:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    adc4:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    adc8:	d414      	bmi.n	adf4 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    adca:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    adce:	2300      	movs	r3, #0
    add0:	603b      	str	r3, [r7, #0]
	return ret;
    add2:	e025      	b.n	ae20 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    add4:	f002 fede 	bl	db94 <k_is_in_isr>
    add8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    addc:	2800      	cmp	r0, #0
    adde:	d1f0      	bne.n	adc2 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    ade0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    ade2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    ade6:	d5f0      	bpl.n	adca <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    ade8:	b152      	cbz	r2, ae00 <submit_to_queue_locked+0x7c>
    adea:	075b      	lsls	r3, r3, #29
    adec:	d408      	bmi.n	ae00 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    adee:	f06f 060f 	mvn.w	r6, #15
    adf2:	e7ec      	b.n	adce <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    adf4:	2a00      	cmp	r2, #0
    adf6:	d1fa      	bne.n	adee <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    adf8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    adfc:	2b00      	cmp	r3, #0
    adfe:	d1f6      	bne.n	adee <submit_to_queue_locked+0x6a>
	parent->next = child;
    ae00:	2300      	movs	r3, #0
    ae02:	6023      	str	r3, [r4, #0]
	return list->tail;
    ae04:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    ae08:	b963      	cbnz	r3, ae24 <submit_to_queue_locked+0xa0>
	list->head = node;
    ae0a:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    ae0e:	4628      	mov	r0, r5
    ae10:	f002 ff71 	bl	dcf6 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    ae14:	68e3      	ldr	r3, [r4, #12]
    ae16:	f043 0304 	orr.w	r3, r3, #4
    ae1a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    ae1c:	683b      	ldr	r3, [r7, #0]
    ae1e:	60a3      	str	r3, [r4, #8]
}
    ae20:	4630      	mov	r0, r6
    ae22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    ae24:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ae26:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    ae2a:	e7f0      	b.n	ae0e <submit_to_queue_locked+0x8a>
		return -EINVAL;
    ae2c:	f06f 0615 	mvn.w	r6, #21
    ae30:	e7cd      	b.n	adce <submit_to_queue_locked+0x4a>
    ae32:	bf00      	nop
    ae34:	20001aa8 	.word	0x20001aa8

0000ae38 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    ae38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae3a:	b089      	sub	sp, #36	; 0x24
    ae3c:	4604      	mov	r4, r0
	list->head = NULL;
    ae3e:	2000      	movs	r0, #0
	list->tail = NULL;
    ae40:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    ae44:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ae46:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    ae4a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    ae4e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    ae52:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    ae56:	b31d      	cbz	r5, aea0 <k_work_queue_start+0x68>
    ae58:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    ae5a:	2800      	cmp	r0, #0
    ae5c:	f240 1001 	movw	r0, #257	; 0x101
    ae60:	bf08      	it	eq
    ae62:	2001      	moveq	r0, #1
	*flagp = flags;
    ae64:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ae68:	2000      	movs	r0, #0
    ae6a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    ae6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    ae72:	e9cd 3003 	strd	r3, r0, [sp, #12]
    ae76:	e9cd 0001 	strd	r0, r0, [sp, #4]
    ae7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    ae7e:	4b09      	ldr	r3, [pc, #36]	; (aea4 <k_work_queue_start+0x6c>)
    ae80:	9400      	str	r4, [sp, #0]
    ae82:	4620      	mov	r0, r4
    ae84:	f7ff fcea 	bl	a85c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    ae88:	b125      	cbz	r5, ae94 <k_work_queue_start+0x5c>
    ae8a:	6829      	ldr	r1, [r5, #0]
    ae8c:	b111      	cbz	r1, ae94 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    ae8e:	4620      	mov	r0, r4
    ae90:	f002 fe86 	bl	dba0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    ae94:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    ae96:	b009      	add	sp, #36	; 0x24
    ae98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ae9c:	f002 be83 	b.w	dba6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    aea0:	2001      	movs	r0, #1
    aea2:	e7df      	b.n	ae64 <k_work_queue_start+0x2c>
    aea4:	0000ac4d 	.word	0x0000ac4d

0000aea8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    aea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    aeaa:	9001      	str	r0, [sp, #4]
    aeac:	4608      	mov	r0, r1
	__asm__ volatile(
    aeae:	f04f 0120 	mov.w	r1, #32
    aeb2:	f3ef 8411 	mrs	r4, BASEPRI
    aeb6:	f381 8812 	msr	BASEPRI_MAX, r1
    aeba:	f3bf 8f6f 	isb	sy
	return *flagp;
    aebe:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    aec0:	f011 0f0e 	tst.w	r1, #14
    aec4:	d116      	bne.n	aef4 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    aec6:	ea53 0502 	orrs.w	r5, r3, r2
    aeca:	d108      	bne.n	aede <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    aecc:	a901      	add	r1, sp, #4
    aece:	f7ff ff59 	bl	ad84 <submit_to_queue_locked>
	__asm__ volatile(
    aed2:	f384 8811 	msr	BASEPRI, r4
    aed6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    aeda:	b003      	add	sp, #12
    aedc:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    aede:	f041 0108 	orr.w	r1, r1, #8
    aee2:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    aee4:	9901      	ldr	r1, [sp, #4]
    aee6:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    aee8:	3010      	adds	r0, #16
    aeea:	4903      	ldr	r1, [pc, #12]	; (aef8 <k_work_schedule_for_queue+0x50>)
    aeec:	f000 fbd4 	bl	b698 <z_add_timeout>
	return ret;
    aef0:	2001      	movs	r0, #1
    aef2:	e7ee      	b.n	aed2 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    aef4:	2000      	movs	r0, #0
    aef6:	e7ec      	b.n	aed2 <k_work_schedule_for_queue+0x2a>
    aef8:	0000dd05 	.word	0x0000dd05

0000aefc <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    aefc:	89c3      	ldrh	r3, [r0, #14]
    aefe:	2b7f      	cmp	r3, #127	; 0x7f
    af00:	d812      	bhi.n	af28 <sliceable+0x2c>
	int ret = slice_ticks;
    af02:	4b0a      	ldr	r3, [pc, #40]	; (af2c <sliceable+0x30>)
    af04:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    af06:	b163      	cbz	r3, af22 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    af08:	4b09      	ldr	r3, [pc, #36]	; (af30 <sliceable+0x34>)
    af0a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    af0e:	681b      	ldr	r3, [r3, #0]
    af10:	429a      	cmp	r2, r3
    af12:	db09      	blt.n	af28 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    af14:	7b43      	ldrb	r3, [r0, #13]
    af16:	06db      	lsls	r3, r3, #27
    af18:	d106      	bne.n	af28 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    af1a:	4b06      	ldr	r3, [pc, #24]	; (af34 <sliceable+0x38>)
    af1c:	1ac3      	subs	r3, r0, r3
    af1e:	bf18      	it	ne
    af20:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    af22:	f003 0001 	and.w	r0, r3, #1
    af26:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    af28:	2300      	movs	r3, #0
    af2a:	e7fa      	b.n	af22 <sliceable+0x26>
    af2c:	20001adc 	.word	0x20001adc
    af30:	20001ad8 	.word	0x20001ad8
    af34:	200006a0 	.word	0x200006a0

0000af38 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    af38:	4b04      	ldr	r3, [pc, #16]	; (af4c <slice_timeout+0x14>)
    af3a:	1ac0      	subs	r0, r0, r3
    af3c:	4b04      	ldr	r3, [pc, #16]	; (af50 <slice_timeout+0x18>)
    af3e:	10c0      	asrs	r0, r0, #3
    af40:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    af42:	4b04      	ldr	r3, [pc, #16]	; (af54 <slice_timeout+0x1c>)
    af44:	2201      	movs	r2, #1
    af46:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    af48:	4770      	bx	lr
    af4a:	bf00      	nop
    af4c:	200007a0 	.word	0x200007a0
    af50:	aaaaaaab 	.word	0xaaaaaaab
    af54:	2000202d 	.word	0x2000202d

0000af58 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    af58:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    af5a:	4b0e      	ldr	r3, [pc, #56]	; (af94 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    af5c:	4c0e      	ldr	r4, [pc, #56]	; (af98 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    af5e:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    af60:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    af64:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    af68:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    af6a:	4620      	mov	r0, r4
    af6c:	f003 f810 	bl	df90 <z_abort_timeout>
	slice_expired[cpu] = false;
    af70:	4b0a      	ldr	r3, [pc, #40]	; (af9c <z_reset_time_slice+0x44>)
    af72:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    af74:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    af76:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    af78:	f7ff ffc0 	bl	aefc <sliceable>
    af7c:	b148      	cbz	r0, af92 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    af7e:	4b08      	ldr	r3, [pc, #32]	; (afa0 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    af80:	4908      	ldr	r1, [pc, #32]	; (afa4 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    af82:	681a      	ldr	r2, [r3, #0]
    af84:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    af86:	4620      	mov	r0, r4
    af88:	17d3      	asrs	r3, r2, #31
	}
}
    af8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    af8e:	f000 bb83 	b.w	b698 <z_add_timeout>
}
    af92:	bd70      	pop	{r4, r5, r6, pc}
    af94:	20001aa8 	.word	0x20001aa8
    af98:	200007a0 	.word	0x200007a0
    af9c:	2000202d 	.word	0x2000202d
    afa0:	20001adc 	.word	0x20001adc
    afa4:	0000af39 	.word	0x0000af39

0000afa8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    afa8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    afaa:	4d0d      	ldr	r5, [pc, #52]	; (afe0 <update_cache+0x38>)
    afac:	462b      	mov	r3, r5
    afae:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    afb2:	429c      	cmp	r4, r3
    afb4:	d000      	beq.n	afb8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    afb6:	b904      	cbnz	r4, afba <update_cache+0x12>
    afb8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    afba:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    afbc:	b938      	cbnz	r0, afce <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    afbe:	7b5a      	ldrb	r2, [r3, #13]
    afc0:	06d2      	lsls	r2, r2, #27
    afc2:	d104      	bne.n	afce <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    afc4:	69a2      	ldr	r2, [r4, #24]
    afc6:	b912      	cbnz	r2, afce <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    afc8:	89da      	ldrh	r2, [r3, #14]
    afca:	2a7f      	cmp	r2, #127	; 0x7f
    afcc:	d805      	bhi.n	afda <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    afce:	429c      	cmp	r4, r3
    afd0:	d002      	beq.n	afd8 <update_cache+0x30>
			z_reset_time_slice(thread);
    afd2:	4620      	mov	r0, r4
    afd4:	f7ff ffc0 	bl	af58 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    afd8:	4623      	mov	r3, r4
    afda:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    afdc:	bd38      	pop	{r3, r4, r5, pc}
    afde:	bf00      	nop
    afe0:	20001aa8 	.word	0x20001aa8

0000afe4 <move_thread_to_end_of_prio_q>:
{
    afe4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    afe6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    afea:	7b43      	ldrb	r3, [r0, #13]
    afec:	2a00      	cmp	r2, #0
{
    afee:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    aff0:	da04      	bge.n	affc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    aff6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    aff8:	f002 fedd 	bl	ddb6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    affc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    affe:	4a15      	ldr	r2, [pc, #84]	; (b054 <move_thread_to_end_of_prio_q+0x70>)
    b000:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b004:	4610      	mov	r0, r2
    b006:	734b      	strb	r3, [r1, #13]
    b008:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    b00c:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b00e:	4283      	cmp	r3, r0
    b010:	bf08      	it	eq
    b012:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b014:	b923      	cbnz	r3, b020 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    b016:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    b01a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    b01c:	6211      	str	r1, [r2, #32]
}
    b01e:	e00c      	b.n	b03a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    b020:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    b024:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    b028:	42b5      	cmp	r5, r6
    b02a:	d00e      	beq.n	b04a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b02c:	42ae      	cmp	r6, r5
    b02e:	dd0c      	ble.n	b04a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    b030:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    b032:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    b036:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    b038:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    b03a:	6890      	ldr	r0, [r2, #8]
    b03c:	1a43      	subs	r3, r0, r1
    b03e:	4258      	negs	r0, r3
}
    b040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    b044:	4158      	adcs	r0, r3
    b046:	f7ff bfaf 	b.w	afa8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b04a:	429c      	cmp	r4, r3
    b04c:	d0e3      	beq.n	b016 <move_thread_to_end_of_prio_q+0x32>
    b04e:	681b      	ldr	r3, [r3, #0]
    b050:	e7e0      	b.n	b014 <move_thread_to_end_of_prio_q+0x30>
    b052:	bf00      	nop
    b054:	20001aa8 	.word	0x20001aa8

0000b058 <ready_thread>:
{
    b058:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    b05a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b05e:	7b42      	ldrb	r2, [r0, #13]
    b060:	2b00      	cmp	r3, #0
    b062:	db29      	blt.n	b0b8 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b064:	06d3      	lsls	r3, r2, #27
    b066:	d127      	bne.n	b0b8 <ready_thread+0x60>
	return node->next != NULL;
    b068:	6983      	ldr	r3, [r0, #24]
    b06a:	bb2b      	cbnz	r3, b0b8 <ready_thread+0x60>
	return list->head == list;
    b06c:	4913      	ldr	r1, [pc, #76]	; (b0bc <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    b06e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b072:	7342      	strb	r2, [r0, #13]
    b074:	460a      	mov	r2, r1
    b076:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b07a:	4294      	cmp	r4, r2
    b07c:	bf18      	it	ne
    b07e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    b080:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b082:	b923      	cbnz	r3, b08e <ready_thread+0x36>
	node->prev = tail;
    b084:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    b088:	6020      	str	r0, [r4, #0]
	list->tail = node;
    b08a:	6208      	str	r0, [r1, #32]
}
    b08c:	e00c      	b.n	b0a8 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    b08e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    b092:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    b096:	42b5      	cmp	r5, r6
    b098:	d00a      	beq.n	b0b0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b09a:	42ae      	cmp	r6, r5
    b09c:	dd08      	ble.n	b0b0 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    b09e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b0a0:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    b0a4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    b0a6:	6058      	str	r0, [r3, #4]
}
    b0a8:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    b0aa:	2000      	movs	r0, #0
    b0ac:	f7ff bf7c 	b.w	afa8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b0b0:	42a3      	cmp	r3, r4
    b0b2:	d0e7      	beq.n	b084 <ready_thread+0x2c>
    b0b4:	681b      	ldr	r3, [r3, #0]
    b0b6:	e7e4      	b.n	b082 <ready_thread+0x2a>
}
    b0b8:	bc70      	pop	{r4, r5, r6}
    b0ba:	4770      	bx	lr
    b0bc:	20001aa8 	.word	0x20001aa8

0000b0c0 <unready_thread>:
{
    b0c0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    b0c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    b0c6:	7b43      	ldrb	r3, [r0, #13]
    b0c8:	2a00      	cmp	r2, #0
{
    b0ca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    b0cc:	da04      	bge.n	b0d8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b0ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b0d2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b0d4:	f002 fe6f 	bl	ddb6 <sys_dlist_remove>
	update_cache(thread == _current);
    b0d8:	4b04      	ldr	r3, [pc, #16]	; (b0ec <unready_thread+0x2c>)
    b0da:	6898      	ldr	r0, [r3, #8]
    b0dc:	1a43      	subs	r3, r0, r1
    b0de:	4258      	negs	r0, r3
    b0e0:	4158      	adcs	r0, r3
}
    b0e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    b0e6:	f7ff bf5f 	b.w	afa8 <update_cache>
    b0ea:	bf00      	nop
    b0ec:	20001aa8 	.word	0x20001aa8

0000b0f0 <pend_locked>:
{
    b0f0:	b570      	push	{r4, r5, r6, lr}
    b0f2:	4615      	mov	r5, r2
    b0f4:	461c      	mov	r4, r3
    b0f6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    b0f8:	f002 fe6f 	bl	ddda <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b0fc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    b100:	bf08      	it	eq
    b102:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    b106:	d008      	beq.n	b11a <pend_locked+0x2a>
    b108:	462a      	mov	r2, r5
    b10a:	4623      	mov	r3, r4
    b10c:	f106 0018 	add.w	r0, r6, #24
    b110:	4902      	ldr	r1, [pc, #8]	; (b11c <pend_locked+0x2c>)
}
    b112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b116:	f000 babf 	b.w	b698 <z_add_timeout>
    b11a:	bd70      	pop	{r4, r5, r6, pc}
    b11c:	0000de8f 	.word	0x0000de8f

0000b120 <z_time_slice>:
{
    b120:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b122:	f04f 0320 	mov.w	r3, #32
    b126:	f3ef 8511 	mrs	r5, BASEPRI
    b12a:	f383 8812 	msr	BASEPRI_MAX, r3
    b12e:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    b132:	4b10      	ldr	r3, [pc, #64]	; (b174 <z_time_slice+0x54>)
	if (pending_current == curr) {
    b134:	4a10      	ldr	r2, [pc, #64]	; (b178 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    b136:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    b138:	6810      	ldr	r0, [r2, #0]
    b13a:	42a0      	cmp	r0, r4
    b13c:	d106      	bne.n	b14c <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    b13e:	f7ff ff0b 	bl	af58 <z_reset_time_slice>
	__asm__ volatile(
    b142:	f385 8811 	msr	BASEPRI, r5
    b146:	f3bf 8f6f 	isb	sy
}
    b14a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    b14c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    b14e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    b150:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    b152:	4a0a      	ldr	r2, [pc, #40]	; (b17c <z_time_slice+0x5c>)
    b154:	5cd3      	ldrb	r3, [r2, r3]
    b156:	2b00      	cmp	r3, #0
    b158:	d0f3      	beq.n	b142 <z_time_slice+0x22>
    b15a:	4620      	mov	r0, r4
    b15c:	f7ff fece 	bl	aefc <sliceable>
    b160:	2800      	cmp	r0, #0
    b162:	d0ee      	beq.n	b142 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    b164:	7b63      	ldrb	r3, [r4, #13]
    b166:	06db      	lsls	r3, r3, #27
    b168:	d102      	bne.n	b170 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    b16a:	4620      	mov	r0, r4
    b16c:	f7ff ff3a 	bl	afe4 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    b170:	4620      	mov	r0, r4
    b172:	e7e4      	b.n	b13e <z_time_slice+0x1e>
    b174:	20001aa8 	.word	0x20001aa8
    b178:	20001ad4 	.word	0x20001ad4
    b17c:	2000202d 	.word	0x2000202d

0000b180 <z_pend_curr>:
{
    b180:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    b182:	480c      	ldr	r0, [pc, #48]	; (b1b4 <z_pend_curr+0x34>)
    b184:	4d0c      	ldr	r5, [pc, #48]	; (b1b8 <z_pend_curr+0x38>)
    b186:	6886      	ldr	r6, [r0, #8]
    b188:	602e      	str	r6, [r5, #0]
{
    b18a:	460c      	mov	r4, r1
    b18c:	4611      	mov	r1, r2
    b18e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    b192:	f04f 0620 	mov.w	r6, #32
    b196:	f3ef 8511 	mrs	r5, BASEPRI
    b19a:	f386 8812 	msr	BASEPRI_MAX, r6
    b19e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    b1a2:	6880      	ldr	r0, [r0, #8]
    b1a4:	f7ff ffa4 	bl	b0f0 <pend_locked>
	ret = arch_swap(key);
    b1a8:	4620      	mov	r0, r4
}
    b1aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b1ae:	f7f9 be5f 	b.w	4e70 <arch_swap>
    b1b2:	bf00      	nop
    b1b4:	20001aa8 	.word	0x20001aa8
    b1b8:	20001ad4 	.word	0x20001ad4

0000b1bc <z_set_prio>:
{
    b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b1be:	4604      	mov	r4, r0
    b1c0:	f04f 0320 	mov.w	r3, #32
    b1c4:	f3ef 8611 	mrs	r6, BASEPRI
    b1c8:	f383 8812 	msr	BASEPRI_MAX, r3
    b1cc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    b1d0:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b1d2:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    b1d4:	b249      	sxtb	r1, r1
    b1d6:	d119      	bne.n	b20c <z_set_prio+0x50>
	return node->next != NULL;
    b1d8:	6985      	ldr	r5, [r0, #24]
    b1da:	b9bd      	cbnz	r5, b20c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b1dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b1e0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b1e2:	f002 fde8 	bl	ddb6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    b1e6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    b1e8:	4a16      	ldr	r2, [pc, #88]	; (b244 <z_set_prio+0x88>)
				thread->base.prio = prio;
    b1ea:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    b1ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b1f0:	7343      	strb	r3, [r0, #13]
    b1f2:	4613      	mov	r3, r2
    b1f4:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b1f8:	4298      	cmp	r0, r3
    b1fa:	bf18      	it	ne
    b1fc:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    b1fe:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b200:	b95d      	cbnz	r5, b21a <z_set_prio+0x5e>
	node->prev = tail;
    b202:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    b206:	6004      	str	r4, [r0, #0]
	list->tail = node;
    b208:	6214      	str	r4, [r2, #32]
}
    b20a:	e011      	b.n	b230 <z_set_prio+0x74>
			thread->base.prio = prio;
    b20c:	73a1      	strb	r1, [r4, #14]
    b20e:	2000      	movs	r0, #0
	__asm__ volatile(
    b210:	f386 8811 	msr	BASEPRI, r6
    b214:	f3bf 8f6f 	isb	sy
}
    b218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    b21a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    b21e:	42b9      	cmp	r1, r7
    b220:	d00b      	beq.n	b23a <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b222:	428f      	cmp	r7, r1
    b224:	dd09      	ble.n	b23a <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    b226:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    b228:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    b22c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b22e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    b230:	2001      	movs	r0, #1
    b232:	f7ff feb9 	bl	afa8 <update_cache>
    b236:	2001      	movs	r0, #1
    b238:	e7ea      	b.n	b210 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    b23a:	42a8      	cmp	r0, r5
    b23c:	d0e1      	beq.n	b202 <z_set_prio+0x46>
    b23e:	682d      	ldr	r5, [r5, #0]
    b240:	e7de      	b.n	b200 <z_set_prio+0x44>
    b242:	bf00      	nop
    b244:	20001aa8 	.word	0x20001aa8

0000b248 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b248:	b949      	cbnz	r1, b25e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b24a:	f3ef 8005 	mrs	r0, IPSR
    b24e:	b930      	cbnz	r0, b25e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    b250:	4b05      	ldr	r3, [pc, #20]	; (b268 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    b252:	699a      	ldr	r2, [r3, #24]
    b254:	689b      	ldr	r3, [r3, #8]
    b256:	429a      	cmp	r2, r3
    b258:	d001      	beq.n	b25e <z_reschedule+0x16>
    b25a:	f7f9 be09 	b.w	4e70 <arch_swap>
    b25e:	f381 8811 	msr	BASEPRI, r1
    b262:	f3bf 8f6f 	isb	sy
}
    b266:	4770      	bx	lr
    b268:	20001aa8 	.word	0x20001aa8

0000b26c <z_sched_start>:
{
    b26c:	b510      	push	{r4, lr}
	__asm__ volatile(
    b26e:	f04f 0220 	mov.w	r2, #32
    b272:	f3ef 8411 	mrs	r4, BASEPRI
    b276:	f382 8812 	msr	BASEPRI_MAX, r2
    b27a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    b27e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    b280:	0751      	lsls	r1, r2, #29
    b282:	d404      	bmi.n	b28e <z_sched_start+0x22>
	__asm__ volatile(
    b284:	f384 8811 	msr	BASEPRI, r4
    b288:	f3bf 8f6f 	isb	sy
}
    b28c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b28e:	f022 0204 	bic.w	r2, r2, #4
    b292:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    b294:	f7ff fee0 	bl	b058 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    b298:	4621      	mov	r1, r4
    b29a:	4802      	ldr	r0, [pc, #8]	; (b2a4 <z_sched_start+0x38>)
}
    b29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    b2a0:	f7ff bfd2 	b.w	b248 <z_reschedule>
    b2a4:	2000202e 	.word	0x2000202e

0000b2a8 <z_impl_k_thread_suspend>:
{
    b2a8:	b570      	push	{r4, r5, r6, lr}
    b2aa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    b2ac:	3018      	adds	r0, #24
    b2ae:	f002 fe6f 	bl	df90 <z_abort_timeout>
	__asm__ volatile(
    b2b2:	f04f 0320 	mov.w	r3, #32
    b2b6:	f3ef 8611 	mrs	r6, BASEPRI
    b2ba:	f383 8812 	msr	BASEPRI_MAX, r3
    b2be:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    b2c2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    b2c6:	7b63      	ldrb	r3, [r4, #13]
    b2c8:	2a00      	cmp	r2, #0
    b2ca:	da05      	bge.n	b2d8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b2cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b2d0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b2d2:	4620      	mov	r0, r4
    b2d4:	f002 fd6f 	bl	ddb6 <sys_dlist_remove>
		update_cache(thread == _current);
    b2d8:	4d0b      	ldr	r5, [pc, #44]	; (b308 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b2da:	7b63      	ldrb	r3, [r4, #13]
    b2dc:	68a8      	ldr	r0, [r5, #8]
    b2de:	f043 0310 	orr.w	r3, r3, #16
    b2e2:	7363      	strb	r3, [r4, #13]
    b2e4:	1b03      	subs	r3, r0, r4
    b2e6:	4258      	negs	r0, r3
    b2e8:	4158      	adcs	r0, r3
    b2ea:	f7ff fe5d 	bl	afa8 <update_cache>
	__asm__ volatile(
    b2ee:	f386 8811 	msr	BASEPRI, r6
    b2f2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    b2f6:	68ab      	ldr	r3, [r5, #8]
    b2f8:	42a3      	cmp	r3, r4
    b2fa:	d103      	bne.n	b304 <z_impl_k_thread_suspend+0x5c>
}
    b2fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    b300:	f002 be09 	b.w	df16 <z_reschedule_unlocked>
}
    b304:	bd70      	pop	{r4, r5, r6, pc}
    b306:	bf00      	nop
    b308:	20001aa8 	.word	0x20001aa8

0000b30c <k_sched_lock>:
	__asm__ volatile(
    b30c:	f04f 0320 	mov.w	r3, #32
    b310:	f3ef 8111 	mrs	r1, BASEPRI
    b314:	f383 8812 	msr	BASEPRI_MAX, r3
    b318:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    b31c:	4b04      	ldr	r3, [pc, #16]	; (b330 <k_sched_lock+0x24>)
    b31e:	689a      	ldr	r2, [r3, #8]
    b320:	7bd3      	ldrb	r3, [r2, #15]
    b322:	3b01      	subs	r3, #1
    b324:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    b326:	f381 8811 	msr	BASEPRI, r1
    b32a:	f3bf 8f6f 	isb	sy
}
    b32e:	4770      	bx	lr
    b330:	20001aa8 	.word	0x20001aa8

0000b334 <k_sched_unlock>:
{
    b334:	b510      	push	{r4, lr}
	__asm__ volatile(
    b336:	f04f 0320 	mov.w	r3, #32
    b33a:	f3ef 8411 	mrs	r4, BASEPRI
    b33e:	f383 8812 	msr	BASEPRI_MAX, r3
    b342:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    b346:	4b08      	ldr	r3, [pc, #32]	; (b368 <k_sched_unlock+0x34>)
    b348:	689a      	ldr	r2, [r3, #8]
    b34a:	7bd3      	ldrb	r3, [r2, #15]
    b34c:	3301      	adds	r3, #1
    b34e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    b350:	2000      	movs	r0, #0
    b352:	f7ff fe29 	bl	afa8 <update_cache>
	__asm__ volatile(
    b356:	f384 8811 	msr	BASEPRI, r4
    b35a:	f3bf 8f6f 	isb	sy
}
    b35e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    b362:	f002 bdd8 	b.w	df16 <z_reschedule_unlocked>
    b366:	bf00      	nop
    b368:	20001aa8 	.word	0x20001aa8

0000b36c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    b36c:	4b02      	ldr	r3, [pc, #8]	; (b378 <z_sched_init+0xc>)
    b36e:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    b372:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    b376:	4770      	bx	lr
    b378:	20001aa8 	.word	0x20001aa8

0000b37c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    b37e:	f04f 0320 	mov.w	r3, #32
    b382:	f3ef 8511 	mrs	r5, BASEPRI
    b386:	f383 8812 	msr	BASEPRI_MAX, r3
    b38a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    b38e:	4919      	ldr	r1, [pc, #100]	; (b3f4 <z_impl_k_yield+0x78>)
    b390:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b392:	7b43      	ldrb	r3, [r0, #13]
    b394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b398:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b39a:	f002 fd0c 	bl	ddb6 <sys_dlist_remove>
	}
	queue_thread(_current);
    b39e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    b3a0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    b3a2:	4608      	mov	r0, r1
    b3a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b3a8:	735a      	strb	r2, [r3, #13]
    b3aa:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    b3ae:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b3b0:	4282      	cmp	r2, r0
    b3b2:	bf08      	it	eq
    b3b4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b3b6:	b922      	cbnz	r2, b3c2 <z_impl_k_yield+0x46>
	node->prev = tail;
    b3b8:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    b3bc:	6023      	str	r3, [r4, #0]
	list->tail = node;
    b3be:	620b      	str	r3, [r1, #32]
}
    b3c0:	e00c      	b.n	b3dc <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    b3c2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    b3c6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    b3ca:	42be      	cmp	r6, r7
    b3cc:	d00e      	beq.n	b3ec <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b3ce:	42b7      	cmp	r7, r6
    b3d0:	dd0c      	ble.n	b3ec <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    b3d2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    b3d4:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    b3d8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    b3da:	6053      	str	r3, [r2, #4]
	update_cache(1);
    b3dc:	2001      	movs	r0, #1
    b3de:	f7ff fde3 	bl	afa8 <update_cache>
    b3e2:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    b3e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b3e8:	f7f9 bd42 	b.w	4e70 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    b3ec:	42a2      	cmp	r2, r4
    b3ee:	d0e3      	beq.n	b3b8 <z_impl_k_yield+0x3c>
    b3f0:	6812      	ldr	r2, [r2, #0]
    b3f2:	e7e0      	b.n	b3b6 <z_impl_k_yield+0x3a>
    b3f4:	20001aa8 	.word	0x20001aa8

0000b3f8 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    b3f8:	ea50 0301 	orrs.w	r3, r0, r1
{
    b3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b400:	4605      	mov	r5, r0
    b402:	460e      	mov	r6, r1
	if (ticks == 0) {
    b404:	d103      	bne.n	b40e <z_tick_sleep+0x16>
	z_impl_k_yield();
    b406:	f7ff ffb9 	bl	b37c <z_impl_k_yield>
		k_yield();
		return 0;
    b40a:	2000      	movs	r0, #0
    b40c:	e02c      	b.n	b468 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    b40e:	1c83      	adds	r3, r0, #2
    b410:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    b414:	db2a      	blt.n	b46c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    b416:	f002 fde1 	bl	dfdc <sys_clock_tick_get_32>
    b41a:	182c      	adds	r4, r5, r0
    b41c:	f04f 0320 	mov.w	r3, #32
    b420:	f3ef 8811 	mrs	r8, BASEPRI
    b424:	f383 8812 	msr	BASEPRI_MAX, r3
    b428:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    b42c:	4f11      	ldr	r7, [pc, #68]	; (b474 <z_tick_sleep+0x7c>)
    b42e:	4b12      	ldr	r3, [pc, #72]	; (b478 <z_tick_sleep+0x80>)
    b430:	68b8      	ldr	r0, [r7, #8]
    b432:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    b434:	f7ff fe44 	bl	b0c0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    b438:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b43a:	4910      	ldr	r1, [pc, #64]	; (b47c <z_tick_sleep+0x84>)
    b43c:	462a      	mov	r2, r5
    b43e:	4633      	mov	r3, r6
    b440:	3018      	adds	r0, #24
    b442:	f000 f929 	bl	b698 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    b446:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b448:	7b53      	ldrb	r3, [r2, #13]
    b44a:	f043 0310 	orr.w	r3, r3, #16
    b44e:	7353      	strb	r3, [r2, #13]
    b450:	4640      	mov	r0, r8
    b452:	f7f9 fd0d 	bl	4e70 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    b456:	f002 fdc1 	bl	dfdc <sys_clock_tick_get_32>
    b45a:	1a20      	subs	r0, r4, r0
    b45c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    b460:	2801      	cmp	r0, #1
    b462:	f173 0300 	sbcs.w	r3, r3, #0
    b466:	dbd0      	blt.n	b40a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    b468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    b46c:	f06f 0401 	mvn.w	r4, #1
    b470:	1a24      	subs	r4, r4, r0
    b472:	e7d3      	b.n	b41c <z_tick_sleep+0x24>
    b474:	20001aa8 	.word	0x20001aa8
    b478:	20001ad4 	.word	0x20001ad4
    b47c:	0000de8f 	.word	0x0000de8f

0000b480 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b480:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    b484:	bf08      	it	eq
    b486:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    b48a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b48c:	d106      	bne.n	b49c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    b48e:	4b08      	ldr	r3, [pc, #32]	; (b4b0 <z_impl_k_sleep+0x30>)
    b490:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    b492:	f7ff ff09 	bl	b2a8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    b496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    b49a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    b49c:	f7ff ffac 	bl	b3f8 <z_tick_sleep>
    b4a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b4a4:	fb80 0303 	smull	r0, r3, r0, r3
    b4a8:	0bc0      	lsrs	r0, r0, #15
    b4aa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    b4ae:	e7f4      	b.n	b49a <z_impl_k_sleep+0x1a>
    b4b0:	20001aa8 	.word	0x20001aa8

0000b4b4 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    b4b4:	b538      	push	{r3, r4, r5, lr}
    b4b6:	4c0a      	ldr	r4, [pc, #40]	; (b4e0 <z_impl_k_usleep+0x2c>)
    b4b8:	4a0a      	ldr	r2, [pc, #40]	; (b4e4 <z_impl_k_usleep+0x30>)
    b4ba:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    b4be:	2100      	movs	r1, #0
    b4c0:	fbc0 4105 	smlal	r4, r1, r0, r5
    b4c4:	2300      	movs	r3, #0
    b4c6:	4620      	mov	r0, r4
    b4c8:	f7f6 fcb6 	bl	1e38 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    b4cc:	17c1      	asrs	r1, r0, #31
    b4ce:	f7ff ff93 	bl	b3f8 <z_tick_sleep>
    b4d2:	4b04      	ldr	r3, [pc, #16]	; (b4e4 <z_impl_k_usleep+0x30>)
    b4d4:	fb80 0303 	smull	r0, r3, r0, r3
    b4d8:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    b4da:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    b4de:	bd38      	pop	{r3, r4, r5, pc}
    b4e0:	000f423f 	.word	0x000f423f
    b4e4:	000f4240 	.word	0x000f4240

0000b4e8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    b4e8:	4b01      	ldr	r3, [pc, #4]	; (b4f0 <z_impl_z_current_get+0x8>)
    b4ea:	6898      	ldr	r0, [r3, #8]
    b4ec:	4770      	bx	lr
    b4ee:	bf00      	nop
    b4f0:	20001aa8 	.word	0x20001aa8

0000b4f4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    b4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4f8:	4604      	mov	r4, r0
    b4fa:	f04f 0320 	mov.w	r3, #32
    b4fe:	f3ef 8611 	mrs	r6, BASEPRI
    b502:	f383 8812 	msr	BASEPRI_MAX, r3
    b506:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    b50a:	7b03      	ldrb	r3, [r0, #12]
    b50c:	07d9      	lsls	r1, r3, #31
    b50e:	d50b      	bpl.n	b528 <z_thread_abort+0x34>
	__asm__ volatile(
    b510:	f386 8811 	msr	BASEPRI, r6
    b514:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    b518:	4040      	eors	r0, r0
    b51a:	f380 8811 	msr	BASEPRI, r0
    b51e:	f04f 0004 	mov.w	r0, #4
    b522:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    b524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    b528:	7b43      	ldrb	r3, [r0, #13]
    b52a:	071a      	lsls	r2, r3, #28
    b52c:	d504      	bpl.n	b538 <z_thread_abort+0x44>
    b52e:	f386 8811 	msr	BASEPRI, r6
    b532:	f3bf 8f6f 	isb	sy
    b536:	e7f5      	b.n	b524 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b538:	f023 0220 	bic.w	r2, r3, #32
    b53c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    b540:	09d2      	lsrs	r2, r2, #7
    b542:	d120      	bne.n	b586 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b544:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    b546:	68a3      	ldr	r3, [r4, #8]
    b548:	b113      	cbz	r3, b550 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    b54a:	4620      	mov	r0, r4
    b54c:	f002 fc3b 	bl	ddc6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    b550:	f104 0018 	add.w	r0, r4, #24
    b554:	f002 fd1c 	bl	df90 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b558:	f104 0758 	add.w	r7, r4, #88	; 0x58
    b55c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    b560:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b562:	42bd      	cmp	r5, r7
    b564:	d000      	beq.n	b568 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b566:	b9b5      	cbnz	r5, b596 <z_thread_abort+0xa2>
		update_cache(1);
    b568:	2001      	movs	r0, #1
    b56a:	f7ff fd1d 	bl	afa8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    b56e:	4b10      	ldr	r3, [pc, #64]	; (b5b0 <z_thread_abort+0xbc>)
    b570:	689b      	ldr	r3, [r3, #8]
    b572:	42a3      	cmp	r3, r4
    b574:	d1db      	bne.n	b52e <z_thread_abort+0x3a>
    b576:	f3ef 8305 	mrs	r3, IPSR
    b57a:	2b00      	cmp	r3, #0
    b57c:	d1d7      	bne.n	b52e <z_thread_abort+0x3a>
    b57e:	4630      	mov	r0, r6
    b580:	f7f9 fc76 	bl	4e70 <arch_swap>
	return ret;
    b584:	e7d3      	b.n	b52e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b586:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    b58a:	f043 0308 	orr.w	r3, r3, #8
    b58e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b590:	f002 fc11 	bl	ddb6 <sys_dlist_remove>
}
    b594:	e7d7      	b.n	b546 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    b596:	4628      	mov	r0, r5
    b598:	f002 fc15 	bl	ddc6 <unpend_thread_no_timeout>
    b59c:	f105 0018 	add.w	r0, r5, #24
    b5a0:	f002 fcf6 	bl	df90 <z_abort_timeout>
    b5a4:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    b5a8:	4628      	mov	r0, r5
    b5aa:	f7ff fd55 	bl	b058 <ready_thread>
    b5ae:	e7d7      	b.n	b560 <z_thread_abort+0x6c>
    b5b0:	20001aa8 	.word	0x20001aa8

0000b5b4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    b5b4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b5b6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    b5ba:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b5bc:	e9cd 6700 	strd	r6, r7, [sp]
    b5c0:	f7ff fdde 	bl	b180 <z_pend_curr>

	if (data != NULL) {
    b5c4:	b11c      	cbz	r4, b5ce <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    b5c6:	4b03      	ldr	r3, [pc, #12]	; (b5d4 <z_sched_wait+0x20>)
    b5c8:	689b      	ldr	r3, [r3, #8]
    b5ca:	695b      	ldr	r3, [r3, #20]
    b5cc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    b5ce:	b002      	add	sp, #8
    b5d0:	bdd0      	pop	{r4, r6, r7, pc}
    b5d2:	bf00      	nop
    b5d4:	20001aa8 	.word	0x20001aa8

0000b5d8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    b5d8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    b5da:	4806      	ldr	r0, [pc, #24]	; (b5f4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    b5dc:	4a06      	ldr	r2, [pc, #24]	; (b5f8 <z_data_copy+0x20>)
    b5de:	4907      	ldr	r1, [pc, #28]	; (b5fc <z_data_copy+0x24>)
    b5e0:	1a12      	subs	r2, r2, r0
    b5e2:	f002 fa96 	bl	db12 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b5e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    b5ea:	4a05      	ldr	r2, [pc, #20]	; (b600 <z_data_copy+0x28>)
    b5ec:	4905      	ldr	r1, [pc, #20]	; (b604 <z_data_copy+0x2c>)
    b5ee:	4806      	ldr	r0, [pc, #24]	; (b608 <z_data_copy+0x30>)
    b5f0:	f002 ba8f 	b.w	db12 <z_early_memcpy>
    b5f4:	20000000 	.word	0x20000000
    b5f8:	20000440 	.word	0x20000440
    b5fc:	0000f9c0 	.word	0x0000f9c0
    b600:	00000000 	.word	0x00000000
    b604:	0000f9c0 	.word	0x0000f9c0
    b608:	20000000 	.word	0x20000000

0000b60c <elapsed>:
	 *
	 * The distinction is implemented by looking at announce_remaining which
	 * will be non-zero while sys_clock_announce() is executing and zero
	 * otherwise.
	 */
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b60c:	4b03      	ldr	r3, [pc, #12]	; (b61c <elapsed+0x10>)
    b60e:	681b      	ldr	r3, [r3, #0]
    b610:	b90b      	cbnz	r3, b616 <elapsed+0xa>
    b612:	f7fc bd53 	b.w	80bc <sys_clock_elapsed>
}
    b616:	2000      	movs	r0, #0
    b618:	4770      	bx	lr
    b61a:	bf00      	nop
    b61c:	20001ae0 	.word	0x20001ae0

0000b620 <next_timeout>:

static int32_t next_timeout(void)
{
    b620:	b510      	push	{r4, lr}
	return list->head == list;
    b622:	4b0e      	ldr	r3, [pc, #56]	; (b65c <next_timeout+0x3c>)
    b624:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b626:	429c      	cmp	r4, r3
    b628:	d104      	bne.n	b634 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    b62a:	f7ff ffef 	bl	b60c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    b62e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    b632:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    b634:	f7ff ffea 	bl	b60c <elapsed>
	if ((to == NULL) ||
    b638:	2c00      	cmp	r4, #0
    b63a:	d0f8      	beq.n	b62e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    b63c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    b640:	1a1b      	subs	r3, r3, r0
    b642:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    b646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b64a:	f172 0100 	sbcs.w	r1, r2, #0
    b64e:	daee      	bge.n	b62e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    b650:	2a00      	cmp	r2, #0
    b652:	bfac      	ite	ge
    b654:	4618      	movge	r0, r3
    b656:	2000      	movlt	r0, #0
	return ret;
    b658:	e7eb      	b.n	b632 <next_timeout+0x12>
    b65a:	bf00      	nop
    b65c:	200002e4 	.word	0x200002e4

0000b660 <remove_timeout>:
{
    b660:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b662:	b170      	cbz	r0, b682 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    b664:	4b0b      	ldr	r3, [pc, #44]	; (b694 <remove_timeout+0x34>)
    b666:	685b      	ldr	r3, [r3, #4]
    b668:	4298      	cmp	r0, r3
    b66a:	d00a      	beq.n	b682 <remove_timeout+0x22>
    b66c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    b66e:	b143      	cbz	r3, b682 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    b670:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    b674:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    b678:	1912      	adds	r2, r2, r4
    b67a:	eb41 0105 	adc.w	r1, r1, r5
    b67e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    b682:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    b686:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b688:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b68a:	2300      	movs	r3, #0
	node->prev = NULL;
    b68c:	e9c0 3300 	strd	r3, r3, [r0]
}
    b690:	bd30      	pop	{r4, r5, pc}
    b692:	bf00      	nop
    b694:	200002e4 	.word	0x200002e4

0000b698 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b69c:	bf08      	it	eq
    b69e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    b6a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6a4:	4604      	mov	r4, r0
    b6a6:	461d      	mov	r5, r3
    b6a8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b6aa:	d05c      	beq.n	b766 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b6ac:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    b6ae:	f04f 0320 	mov.w	r3, #32
    b6b2:	f3ef 8711 	mrs	r7, BASEPRI
    b6b6:	f383 8812 	msr	BASEPRI_MAX, r3
    b6ba:	f3bf 8f6f 	isb	sy

	K_SPINLOCK(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b6be:	3201      	adds	r2, #1
    b6c0:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    b6c4:	da24      	bge.n	b710 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b6c6:	492d      	ldr	r1, [pc, #180]	; (b77c <z_add_timeout+0xe4>)
    b6c8:	e9d1 2000 	ldrd	r2, r0, [r1]
    b6cc:	f06f 0301 	mvn.w	r3, #1
    b6d0:	1a9b      	subs	r3, r3, r2
    b6d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b6d6:	eb62 0000 	sbc.w	r0, r2, r0
    b6da:	1b9e      	subs	r6, r3, r6
    b6dc:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    b6e0:	2e01      	cmp	r6, #1
    b6e2:	f170 0300 	sbcs.w	r3, r0, #0
    b6e6:	da01      	bge.n	b6ec <z_add_timeout+0x54>
    b6e8:	2601      	movs	r6, #1
    b6ea:	2000      	movs	r0, #0
    b6ec:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    b6f0:	4e23      	ldr	r6, [pc, #140]	; (b780 <z_add_timeout+0xe8>)
    b6f2:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    b6f6:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b6f8:	45b4      	cmp	ip, r6
    b6fa:	bf08      	it	eq
    b6fc:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    b700:	f1bc 0f00 	cmp.w	ip, #0
    b704:	d10d      	bne.n	b722 <z_add_timeout+0x8a>
	node->prev = tail;
    b706:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    b70a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    b70c:	6074      	str	r4, [r6, #4]
}
    b70e:	e01c      	b.n	b74a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    b710:	f7ff ff7c 	bl	b60c <elapsed>
    b714:	3601      	adds	r6, #1
    b716:	f145 0500 	adc.w	r5, r5, #0
    b71a:	1836      	adds	r6, r6, r0
    b71c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    b720:	e7e4      	b.n	b6ec <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    b722:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    b726:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    b72a:	4293      	cmp	r3, r2
    b72c:	eb71 0e00 	sbcs.w	lr, r1, r0
    b730:	da1a      	bge.n	b768 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    b732:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    b734:	f8dc 3004 	ldr.w	r3, [ip, #4]
    b738:	eb60 0001 	sbc.w	r0, r0, r1
    b73c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    b740:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    b744:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b746:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    b74a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b74c:	42b3      	cmp	r3, r6
    b74e:	d006      	beq.n	b75e <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b750:	429c      	cmp	r4, r3
    b752:	d104      	bne.n	b75e <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    b754:	f7ff ff64 	bl	b620 <next_timeout>
    b758:	2100      	movs	r1, #0
    b75a:	f7fc fc7b 	bl	8054 <sys_clock_set_timeout>
	__asm__ volatile(
    b75e:	f387 8811 	msr	BASEPRI, r7
    b762:	f3bf 8f6f 	isb	sy
		}
	}
}
    b766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    b768:	1a9b      	subs	r3, r3, r2
    b76a:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    b76e:	45ac      	cmp	ip, r5
    b770:	e9c4 3104 	strd	r3, r1, [r4, #16]
    b774:	d0c7      	beq.n	b706 <z_add_timeout+0x6e>
    b776:	f8dc c000 	ldr.w	ip, [ip]
    b77a:	e7c1      	b.n	b700 <z_add_timeout+0x68>
    b77c:	200007b8 	.word	0x200007b8
    b780:	200002e4 	.word	0x200002e4

0000b784 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    b784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    b788:	f04f 0320 	mov.w	r3, #32
    b78c:	f3ef 8c11 	mrs	ip, BASEPRI
    b790:	f383 8812 	msr	BASEPRI_MAX, r3
    b794:	f3bf 8f6f 	isb	sy
	return list->head == list;
    b798:	f8df a0b0 	ldr.w	sl, [pc, #176]	; b84c <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    b79c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; b850 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    b7a0:	4f2c      	ldr	r7, [pc, #176]	; (b854 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    b7a2:	f8c9 0000 	str.w	r0, [r9]
    b7a6:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    b7aa:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b7ac:	4550      	cmp	r0, sl
    b7ae:	bf08      	it	eq
    b7b0:	2000      	moveq	r0, #0
    b7b2:	2500      	movs	r5, #0
		curr_tick += dt;
    b7b4:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    b7b8:	f8d9 3000 	ldr.w	r3, [r9]
    b7bc:	46e0      	mov	r8, ip
    b7be:	b380      	cbz	r0, b822 <sys_clock_announce+0x9e>
    b7c0:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    b7c4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    b7c8:	42b3      	cmp	r3, r6
    b7ca:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    b7ce:	da05      	bge.n	b7dc <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    b7d0:	1af6      	subs	r6, r6, r3
    b7d2:	eb6c 040e 	sbc.w	r4, ip, lr
    b7d6:	e9c0 6404 	strd	r6, r4, [r0, #16]
    b7da:	e022      	b.n	b822 <sys_clock_announce+0x9e>
		curr_tick += dt;
    b7dc:	18b2      	adds	r2, r6, r2
    b7de:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    b7e2:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    b7e6:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    b7ea:	f7ff ff39 	bl	b660 <remove_timeout>
	__asm__ volatile(
    b7ee:	f388 8811 	msr	BASEPRI, r8
    b7f2:	f3bf 8f6f 	isb	sy
		t->fn(t);
    b7f6:	6883      	ldr	r3, [r0, #8]
    b7f8:	4798      	blx	r3
	__asm__ volatile(
    b7fa:	f04f 0320 	mov.w	r3, #32
    b7fe:	f3ef 8811 	mrs	r8, BASEPRI
    b802:	f383 8812 	msr	BASEPRI_MAX, r3
    b806:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    b80a:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    b80e:	f8da 0000 	ldr.w	r0, [sl]
    b812:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b814:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    b816:	46c4      	mov	ip, r8
    b818:	f8c9 3000 	str.w	r3, [r9]
    b81c:	d1ca      	bne.n	b7b4 <sys_clock_announce+0x30>
		curr_tick += dt;
    b81e:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    b822:	189a      	adds	r2, r3, r2
    b824:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    b828:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    b82a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    b82e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    b832:	f7ff fef5 	bl	b620 <next_timeout>
    b836:	4621      	mov	r1, r4
    b838:	f7fc fc0c 	bl	8054 <sys_clock_set_timeout>
	__asm__ volatile(
    b83c:	f388 8811 	msr	BASEPRI, r8
    b840:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    b844:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    b848:	f7ff bc6a 	b.w	b120 <z_time_slice>
    b84c:	200002e4 	.word	0x200002e4
    b850:	20001ae0 	.word	0x20001ae0
    b854:	200007b8 	.word	0x200007b8

0000b858 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b858:	b510      	push	{r4, lr}
	__asm__ volatile(
    b85a:	f04f 0320 	mov.w	r3, #32
    b85e:	f3ef 8411 	mrs	r4, BASEPRI
    b862:	f383 8812 	msr	BASEPRI_MAX, r3
    b866:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	K_SPINLOCK(&timeout_lock) {
		t = curr_tick + elapsed();
    b86a:	f7ff fecf 	bl	b60c <elapsed>
    b86e:	4a06      	ldr	r2, [pc, #24]	; (b888 <sys_clock_tick_get+0x30>)
    b870:	4603      	mov	r3, r0
    b872:	e9d2 0100 	ldrd	r0, r1, [r2]
    b876:	1818      	adds	r0, r3, r0
    b878:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    b87c:	f384 8811 	msr	BASEPRI, r4
    b880:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    b884:	bd10      	pop	{r4, pc}
    b886:	bf00      	nop
    b888:	200007b8 	.word	0x200007b8

0000b88c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    b88c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b88e:	4606      	mov	r6, r0
    b890:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    b892:	f002 f97f 	bl	db94 <k_is_in_isr>
    b896:	b978      	cbnz	r0, b8b8 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    b898:	4b0b      	ldr	r3, [pc, #44]	; (b8c8 <z_thread_aligned_alloc+0x3c>)
    b89a:	689b      	ldr	r3, [r3, #8]
    b89c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    b89e:	b17c      	cbz	r4, b8c0 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    b8a0:	1d2a      	adds	r2, r5, #4
    b8a2:	d209      	bcs.n	b8b8 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    b8a4:	2000      	movs	r0, #0
    b8a6:	2100      	movs	r1, #0
    b8a8:	e9cd 0100 	strd	r0, r1, [sp]
    b8ac:	f046 0104 	orr.w	r1, r6, #4
    b8b0:	4620      	mov	r0, r4
    b8b2:	f002 fbcc 	bl	e04e <k_heap_aligned_alloc>
	if (mem == NULL) {
    b8b6:	b908      	cbnz	r0, b8bc <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    b8b8:	2400      	movs	r4, #0
	}

	return ret;
    b8ba:	e001      	b.n	b8c0 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    b8bc:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    b8be:	1d04      	adds	r4, r0, #4
}
    b8c0:	4620      	mov	r0, r4
    b8c2:	b002      	add	sp, #8
    b8c4:	bd70      	pop	{r4, r5, r6, pc}
    b8c6:	bf00      	nop
    b8c8:	20001aa8 	.word	0x20001aa8

0000b8cc <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    b8cc:	4801      	ldr	r0, [pc, #4]	; (b8d4 <boot_banner+0x8>)
    b8ce:	f000 b8a2 	b.w	ba16 <printk>
    b8d2:	bf00      	nop
    b8d4:	0000f973 	.word	0x0000f973

0000b8d8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    b8d8:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b8da:	4c06      	ldr	r4, [pc, #24]	; (b8f4 <statics_init+0x1c>)
    b8dc:	4d06      	ldr	r5, [pc, #24]	; (b8f8 <statics_init+0x20>)
    b8de:	42ac      	cmp	r4, r5
    b8e0:	d301      	bcc.n	b8e6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    b8e2:	2000      	movs	r0, #0
    b8e4:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b8e6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    b8ea:	4620      	mov	r0, r4
    b8ec:	f002 fba7 	bl	e03e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b8f0:	3414      	adds	r4, #20
    b8f2:	e7f4      	b.n	b8de <statics_init+0x6>
    b8f4:	2000031c 	.word	0x2000031c
    b8f8:	2000031c 	.word	0x2000031c

0000b8fc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    b8fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    b8fe:	4b09      	ldr	r3, [pc, #36]	; (b924 <k_sys_work_q_init+0x28>)
    b900:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    b902:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    b904:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    b906:	9300      	str	r3, [sp, #0]
    b908:	4907      	ldr	r1, [pc, #28]	; (b928 <k_sys_work_q_init+0x2c>)
    b90a:	4808      	ldr	r0, [pc, #32]	; (b92c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    b90c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    b910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b914:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b918:	f7ff fa8e 	bl	ae38 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    b91c:	4620      	mov	r0, r4
    b91e:	b004      	add	sp, #16
    b920:	bd10      	pop	{r4, pc}
    b922:	bf00      	nop
    b924:	0000f9b4 	.word	0x0000f9b4
    b928:	20004b40 	.word	0x20004b40
    b92c:	200007c0 	.word	0x200007c0

0000b930 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    b930:	4770      	bx	lr

0000b932 <main>:
{
    b932:	b508      	push	{r3, lr}
	myTimer_init();
    b934:	f7f7 f926 	bl	2b84 <myTimer_init>
	led_indication_init();
    b938:	f7f7 f988 	bl	2c4c <led_indication_init>
	led_indication_set(LED_INDICATION_FAST_BLINK);
    b93c:	2001      	movs	r0, #1
    b93e:	f7f7 f959 	bl	2bf4 <led_indication_set>
	return z_impl_k_sleep(timeout);
    b942:	2100      	movs	r1, #0
    b944:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    b948:	f7ff fd9a 	bl	b480 <z_impl_k_sleep>
	while (1)
    b94c:	e7f9      	b.n	b942 <main+0x10>

0000b94e <pathExists>:
{
    b94e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b952:	4606      	mov	r6, r0
    b954:	4688      	mov	r8, r1
    b956:	b0a1      	sub	sp, #132	; 0x84
    myFile tempFile = rootDir();
    b958:	f7f6 fd4e 	bl	23f8 <rootDir>
    if (strlen(path) == 1 && path[0] == '/')
    b95c:	4640      	mov	r0, r8
    myFile tempFile = rootDir();
    b95e:	6a35      	ldr	r5, [r6, #32]
    if (strlen(path) == 1 && path[0] == '/')
    b960:	f000 fdb5 	bl	c4ce <strlen>
    b964:	2801      	cmp	r0, #1
    b966:	d103      	bne.n	b970 <pathExists+0x22>
    b968:	f898 3000 	ldrb.w	r3, [r8]
    b96c:	2b2f      	cmp	r3, #47	; 0x2f
    b96e:	d006      	beq.n	b97e <pathExists+0x30>
    b970:	2400      	movs	r4, #0
        char dirName[36] = "";
    b972:	f04f 0900 	mov.w	r9, #0
    while (path[charCnt] != '\0')
    b976:	f818 3004 	ldrb.w	r3, [r8, r4]
    b97a:	b923      	cbnz	r3, b986 <pathExists+0x38>
    return tempFile;
    b97c:	6235      	str	r5, [r6, #32]
}
    b97e:	4630      	mov	r0, r6
    b980:	b021      	add	sp, #132	; 0x84
    b982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        char dirName[36] = "";
    b986:	2100      	movs	r1, #0
    b988:	2220      	movs	r2, #32
    b98a:	a818      	add	r0, sp, #96	; 0x60
    b98c:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
    b990:	f000 fdaf 	bl	c4f2 <memset>
        for (uint8_t i = index + 1; i < index + 36; i++)
    b994:	4623      	mov	r3, r4
    b996:	f104 0123 	add.w	r1, r4, #35	; 0x23
    b99a:	1c5f      	adds	r7, r3, #1
    b99c:	b2ff      	uxtb	r7, r7
    b99e:	42b9      	cmp	r1, r7
    b9a0:	da22      	bge.n	b9e8 <pathExists+0x9a>
    b9a2:	461f      	mov	r7, r3
        tempFile = fileExists(dirName, tempFile);
    b9a4:	6235      	str	r5, [r6, #32]
    b9a6:	f106 0508 	add.w	r5, r6, #8
    b9aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b9ac:	466c      	mov	r4, sp
    b9ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b9b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b9b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b9b4:	682b      	ldr	r3, [r5, #0]
    b9b6:	6023      	str	r3, [r4, #0]
    b9b8:	e896 000c 	ldmia.w	r6, {r2, r3}
    b9bc:	a917      	add	r1, sp, #92	; 0x5c
    b9be:	a80a      	add	r0, sp, #40	; 0x28
    b9c0:	ac0a      	add	r4, sp, #40	; 0x28
    b9c2:	f7f6 feb7 	bl	2734 <fileExists>
    b9c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    b9c8:	4635      	mov	r5, r6
    b9ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b9cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    b9ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b9d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    uint32_t startClus = (uint32_t)p_file.DIR_FstClusLO;
    b9d4:	8b73      	ldrh	r3, [r6, #26]
        tempFile = fileExists(dirName, tempFile);
    b9d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    startClus |= ((uint32_t)(p_file.DIR_FstClusHI)) << 16;
    b9da:	8ab2      	ldrh	r2, [r6, #20]
        if (startCluster(tempFile) == 0)
    b9dc:	ea53 4302 	orrs.w	r3, r3, r2, lsl #16
    b9e0:	d0cd      	beq.n	b97e <pathExists+0x30>
        index = charCnt;
    b9e2:	463c      	mov	r4, r7
        tempFile.entryIndex = 2;
    b9e4:	2502      	movs	r5, #2
    b9e6:	e7c6      	b.n	b976 <pathExists+0x28>
            if (path[i] == '/' || path[i] == '\0')
    b9e8:	f818 2007 	ldrb.w	r2, [r8, r7]
    b9ec:	2a2f      	cmp	r2, #47	; 0x2f
    b9ee:	d0d9      	beq.n	b9a4 <pathExists+0x56>
    b9f0:	2a00      	cmp	r2, #0
    b9f2:	d0d7      	beq.n	b9a4 <pathExists+0x56>
            dirName[charCnt - index - 1] = path[i];
    b9f4:	1b3b      	subs	r3, r7, r4
    b9f6:	3380      	adds	r3, #128	; 0x80
    b9f8:	446b      	add	r3, sp
    b9fa:	f803 2c25 	strb.w	r2, [r3, #-37]
            charCnt++;
    b9fe:	463b      	mov	r3, r7
    ba00:	e7cb      	b.n	b99a <pathExists+0x4c>

0000ba02 <myTimer_create>:
	instance->is_running = false;
    ba02:	2300      	movs	r3, #0
	instance->mode = mode;
    ba04:	7082      	strb	r2, [r0, #2]
	instance->is_running = false;
    ba06:	7043      	strb	r3, [r0, #1]
	instance->timeout_handler = timeout_handler;
    ba08:	6041      	str	r1, [r0, #4]
	instance->next_node = NULL;
    ba0a:	6103      	str	r3, [r0, #16]
}
    ba0c:	4770      	bx	lr

0000ba0e <normal_blink_timer_handler>:
	gpio_pin_toggle_dt(&led1);
    ba0e:	f7f7 b8d5 	b.w	2bbc <gpio_pin_toggle_dt.constprop.0.isra.0>

0000ba12 <arch_printk_char_out>:
}
    ba12:	2000      	movs	r0, #0
    ba14:	4770      	bx	lr

0000ba16 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    ba16:	b40f      	push	{r0, r1, r2, r3}
    ba18:	b507      	push	{r0, r1, r2, lr}
    ba1a:	a904      	add	r1, sp, #16
    ba1c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    ba20:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    ba22:	f7f7 f939 	bl	2c98 <vprintk>

	va_end(ap);
}
    ba26:	b003      	add	sp, #12
    ba28:	f85d eb04 	ldr.w	lr, [sp], #4
    ba2c:	b004      	add	sp, #16
    ba2e:	4770      	bx	lr

0000ba30 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    ba30:	4604      	mov	r4, r0
    ba32:	b508      	push	{r3, lr}
    ba34:	4608      	mov	r0, r1
    ba36:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    ba38:	461a      	mov	r2, r3
    ba3a:	47a0      	blx	r4
	return z_impl_z_current_get();
    ba3c:	f7ff fd54 	bl	b4e8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    ba40:	f7f9 fc54 	bl	52ec <z_impl_k_thread_abort>

0000ba44 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    ba44:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    ba48:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    ba4a:	0840      	lsrs	r0, r0, #1
    ba4c:	4770      	bx	lr

0000ba4e <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    ba4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba50:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    ba52:	f7ff fff7 	bl	ba44 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    ba56:	fab0 f080 	clz	r0, r0
    ba5a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    ba5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    ba62:	00ca      	lsls	r2, r1, #3
    ba64:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    ba68:	1d17      	adds	r7, r2, #4
{
    ba6a:	460c      	mov	r4, r1
    ba6c:	3206      	adds	r2, #6
    ba6e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    ba70:	b956      	cbnz	r6, ba88 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    ba72:	2101      	movs	r1, #1
    ba74:	fa01 f000 	lsl.w	r0, r1, r0
    ba78:	68d9      	ldr	r1, [r3, #12]
    ba7a:	4301      	orrs	r1, r0
    ba7c:	60d9      	str	r1, [r3, #12]
		b->next = c;
    ba7e:	f8cc 4010 	str.w	r4, [ip, #16]
    ba82:	53dd      	strh	r5, [r3, r7]
    ba84:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    ba86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    ba88:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    ba8a:	3104      	adds	r1, #4
    ba8c:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    ba8e:	53d8      	strh	r0, [r3, r7]
    ba90:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    ba94:	529e      	strh	r6, [r3, r2]
    ba96:	80c5      	strh	r5, [r0, #6]
    ba98:	525d      	strh	r5, [r3, r1]
    ba9a:	e7f4      	b.n	ba86 <free_list_add+0x38>

0000ba9c <free_list_remove_bidx>:
{
    ba9c:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    ba9e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    baa2:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    baa4:	4299      	cmp	r1, r3
    baa6:	f102 0104 	add.w	r1, r2, #4
    baaa:	d10a      	bne.n	bac2 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    baac:	2301      	movs	r3, #1
    baae:	fa03 f202 	lsl.w	r2, r3, r2
    bab2:	68c3      	ldr	r3, [r0, #12]
    bab4:	ea23 0302 	bic.w	r3, r3, r2
    bab8:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    baba:	2300      	movs	r3, #0
    babc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    bac0:	bd10      	pop	{r4, pc}
    bac2:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    bac4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    bac8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    bacc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    bad0:	80cb      	strh	r3, [r1, #6]
    bad2:	8082      	strh	r2, [r0, #4]
}
    bad4:	e7f4      	b.n	bac0 <free_list_remove_bidx+0x24>

0000bad6 <free_list_remove>:
{
    bad6:	b508      	push	{r3, lr}
    bad8:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    bada:	f7ff ffb3 	bl	ba44 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    bade:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    bae2:	f1c2 021f 	rsb	r2, r2, #31
    bae6:	4618      	mov	r0, r3
}
    bae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    baec:	f7ff bfd6 	b.w	ba9c <free_list_remove_bidx>

0000baf0 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    baf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    baf4:	fab1 f581 	clz	r5, r1
    baf8:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    bafc:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    bb00:	4603      	mov	r3, r0
	if (b->next) {
    bb02:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    bb06:	460e      	mov	r6, r1
	if (b->next) {
    bb08:	b1c2      	cbz	r2, bb3c <alloc_chunk+0x4c>
    bb0a:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    bb0c:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    bb10:	4618      	mov	r0, r3
    bb12:	4621      	mov	r1, r4
    bb14:	f7ff ff96 	bl	ba44 <chunk_size>
    bb18:	42b0      	cmp	r0, r6
    bb1a:	d306      	bcc.n	bb2a <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    bb1c:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    bb1e:	4618      	mov	r0, r3
    bb20:	f7ff ffbc 	bl	ba9c <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    bb24:	4620      	mov	r0, r4
    bb26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    bb2a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    bb2e:	3f01      	subs	r7, #1
    bb30:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    bb32:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    bb36:	d001      	beq.n	bb3c <alloc_chunk+0x4c>
    bb38:	4282      	cmp	r2, r0
    bb3a:	d1e7      	bne.n	bb0c <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    bb3c:	f1c5 0220 	rsb	r2, r5, #32
    bb40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    bb44:	4094      	lsls	r4, r2
    bb46:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    bb48:	4014      	ands	r4, r2
    bb4a:	d0eb      	beq.n	bb24 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    bb4c:	fa94 f2a4 	rbit	r2, r4
    bb50:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    bb54:	1d11      	adds	r1, r2, #4
    bb56:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    bb5a:	4621      	mov	r1, r4
    bb5c:	e7df      	b.n	bb1e <alloc_chunk+0x2e>

0000bb5e <merge_chunks>:
{
    bb5e:	b538      	push	{r3, r4, r5, lr}
    bb60:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    bb62:	f7ff ff6f 	bl	ba44 <chunk_size>
{
    bb66:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    bb68:	4604      	mov	r4, r0
    bb6a:	4611      	mov	r1, r2
    bb6c:	4618      	mov	r0, r3
    bb6e:	f7ff ff69 	bl	ba44 <chunk_size>
		((uint16_t *)cmem)[f] = val;
    bb72:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    bb76:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bb78:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    bb7a:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    bb7c:	4618      	mov	r0, r3
    bb7e:	f7ff ff61 	bl	ba44 <chunk_size>
	void *cmem = &buf[c];
    bb82:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    bb84:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    bb88:	bd38      	pop	{r3, r4, r5, pc}

0000bb8a <split_chunks>:
{
    bb8a:	b538      	push	{r3, r4, r5, lr}
    bb8c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    bb8e:	f7ff ff59 	bl	ba44 <chunk_size>
{
    bb92:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    bb94:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    bb96:	1a51      	subs	r1, r2, r1
    bb98:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    bb9c:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bb9e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    bba0:	8060      	strh	r0, [r4, #2]
    bba2:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bba6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    bba8:	8044      	strh	r4, [r0, #2]
    bbaa:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    bbae:	4618      	mov	r0, r3
    bbb0:	4611      	mov	r1, r2
    bbb2:	f7ff ff47 	bl	ba44 <chunk_size>
	void *cmem = &buf[c];
    bbb6:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    bbb8:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    bbbc:	bd38      	pop	{r3, r4, r5, pc}

0000bbbe <free_chunk>:
{
    bbbe:	b538      	push	{r3, r4, r5, lr}
    bbc0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    bbc2:	f7ff ff3f 	bl	ba44 <chunk_size>
    bbc6:	460c      	mov	r4, r1
    bbc8:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    bbca:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    bbce:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    bbd0:	07da      	lsls	r2, r3, #31
    bbd2:	d40a      	bmi.n	bbea <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    bbd4:	4628      	mov	r0, r5
    bbd6:	f7ff ff7e 	bl	bad6 <free_list_remove>
	return c + chunk_size(h, c);
    bbda:	4621      	mov	r1, r4
    bbdc:	4628      	mov	r0, r5
    bbde:	f7ff ff31 	bl	ba44 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    bbe2:	1822      	adds	r2, r4, r0
    bbe4:	4628      	mov	r0, r5
    bbe6:	f7ff ffba 	bl	bb5e <merge_chunks>
		return ((uint16_t *)cmem)[f];
    bbea:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    bbee:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    bbf0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    bbf4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    bbf6:	07db      	lsls	r3, r3, #31
    bbf8:	d40c      	bmi.n	bc14 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    bbfa:	4628      	mov	r0, r5
    bbfc:	f7ff ff6b 	bl	bad6 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    bc00:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    bc04:	4622      	mov	r2, r4
    bc06:	1a61      	subs	r1, r4, r1
    bc08:	4628      	mov	r0, r5
    bc0a:	f7ff ffa8 	bl	bb5e <merge_chunks>
    bc0e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    bc12:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    bc14:	4621      	mov	r1, r4
    bc16:	4628      	mov	r0, r5
}
    bc18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    bc1c:	f7ff bf17 	b.w	ba4e <free_list_add>

0000bc20 <sys_heap_free>:
	if (mem == NULL) {
    bc20:	b161      	cbz	r1, bc3c <sys_heap_free+0x1c>
    bc22:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bc24:	3904      	subs	r1, #4
    bc26:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    bc28:	f021 0307 	bic.w	r3, r1, #7
    bc2c:	4403      	add	r3, r0
	free_chunk(h, c);
    bc2e:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    bc30:	885a      	ldrh	r2, [r3, #2]
    bc32:	f022 0201 	bic.w	r2, r2, #1
    bc36:	805a      	strh	r2, [r3, #2]
    bc38:	f7ff bfc1 	b.w	bbbe <free_chunk>
}
    bc3c:	4770      	bx	lr

0000bc3e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    bc3e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    bc40:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    bc42:	b909      	cbnz	r1, bc48 <sys_heap_alloc+0xa>
		return NULL;
    bc44:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    bc46:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    bc48:	68ab      	ldr	r3, [r5, #8]
    bc4a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    bc4e:	d9f9      	bls.n	bc44 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bc50:	310b      	adds	r1, #11
    bc52:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    bc54:	4621      	mov	r1, r4
    bc56:	4628      	mov	r0, r5
    bc58:	f7ff ff4a 	bl	baf0 <alloc_chunk>
	if (c == 0U) {
    bc5c:	4606      	mov	r6, r0
    bc5e:	2800      	cmp	r0, #0
    bc60:	d0f0      	beq.n	bc44 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    bc62:	4601      	mov	r1, r0
    bc64:	4628      	mov	r0, r5
    bc66:	f7ff feed 	bl	ba44 <chunk_size>
    bc6a:	42a0      	cmp	r0, r4
    bc6c:	d907      	bls.n	bc7e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    bc6e:	1932      	adds	r2, r6, r4
    bc70:	4628      	mov	r0, r5
    bc72:	f7ff ff8a 	bl	bb8a <split_chunks>
		free_list_add(h, c + chunk_sz);
    bc76:	4611      	mov	r1, r2
    bc78:	4628      	mov	r0, r5
    bc7a:	f7ff fee8 	bl	ba4e <free_list_add>
	void *cmem = &buf[c];
    bc7e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    bc82:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    bc84:	8853      	ldrh	r3, [r2, #2]
    bc86:	f043 0301 	orr.w	r3, r3, #1
    bc8a:	8053      	strh	r3, [r2, #2]
    bc8c:	3004      	adds	r0, #4
	return mem;
    bc8e:	e7da      	b.n	bc46 <sys_heap_alloc+0x8>

0000bc90 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    bc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bc94:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    bc98:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    bc9c:	6806      	ldr	r6, [r0, #0]
{
    bc9e:	460f      	mov	r7, r1
    bca0:	4614      	mov	r4, r2
	if (align != rew) {
    bca2:	d00c      	beq.n	bcbe <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    bca4:	424b      	negs	r3, r1
    bca6:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    bca8:	2b04      	cmp	r3, #4
    bcaa:	461a      	mov	r2, r3
    bcac:	464f      	mov	r7, r9
    bcae:	bf28      	it	cs
    bcb0:	2204      	movcs	r2, #4
	rew = align & -align;
    bcb2:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    bcb4:	b964      	cbnz	r4, bcd0 <sys_heap_aligned_alloc+0x40>
		return NULL;
    bcb6:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    bcb8:	4628      	mov	r0, r5
    bcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    bcbe:	2904      	cmp	r1, #4
    bcc0:	d804      	bhi.n	bccc <sys_heap_aligned_alloc+0x3c>
}
    bcc2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    bcc6:	4611      	mov	r1, r2
    bcc8:	f7ff bfb9 	b.w	bc3e <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    bccc:	2204      	movs	r2, #4
    bcce:	e7f1      	b.n	bcb4 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    bcd0:	68b3      	ldr	r3, [r6, #8]
    bcd2:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    bcd6:	d9ee      	bls.n	bcb6 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bcd8:	f104 010b 	add.w	r1, r4, #11
    bcdc:	4439      	add	r1, r7
    bcde:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    bce0:	08c9      	lsrs	r1, r1, #3
    bce2:	4630      	mov	r0, r6
    bce4:	f7ff ff04 	bl	baf0 <alloc_chunk>
	if (c0 == 0) {
    bce8:	4680      	mov	r8, r0
    bcea:	2800      	cmp	r0, #0
    bcec:	d0e3      	beq.n	bcb6 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    bcee:	f109 0504 	add.w	r5, r9, #4
    bcf2:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    bcf6:	1e7b      	subs	r3, r7, #1
    bcf8:	4435      	add	r5, r6
    bcfa:	441d      	add	r5, r3
    bcfc:	427f      	negs	r7, r7
    bcfe:	403d      	ands	r5, r7
    bd00:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    bd04:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bd06:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    bd08:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bd0a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    bd0c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    bd10:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    bd12:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bd16:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    bd1a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    bd1e:	d208      	bcs.n	bd32 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    bd20:	4601      	mov	r1, r0
    bd22:	463a      	mov	r2, r7
    bd24:	4630      	mov	r0, r6
    bd26:	f7ff ff30 	bl	bb8a <split_chunks>
		free_list_add(h, c0);
    bd2a:	4641      	mov	r1, r8
    bd2c:	4630      	mov	r0, r6
    bd2e:	f7ff fe8e 	bl	ba4e <free_list_add>
	return c + chunk_size(h, c);
    bd32:	4639      	mov	r1, r7
    bd34:	4630      	mov	r0, r6
    bd36:	f7ff fe85 	bl	ba44 <chunk_size>
    bd3a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    bd3c:	4284      	cmp	r4, r0
    bd3e:	d207      	bcs.n	bd50 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    bd40:	4630      	mov	r0, r6
    bd42:	4622      	mov	r2, r4
    bd44:	f7ff ff21 	bl	bb8a <split_chunks>
		free_list_add(h, c_end);
    bd48:	4621      	mov	r1, r4
    bd4a:	4630      	mov	r0, r6
    bd4c:	f7ff fe7f 	bl	ba4e <free_list_add>
	void *cmem = &buf[c];
    bd50:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    bd54:	8873      	ldrh	r3, [r6, #2]
    bd56:	f043 0301 	orr.w	r3, r3, #1
    bd5a:	8073      	strh	r3, [r6, #2]
    bd5c:	e7ac      	b.n	bcb8 <sys_heap_aligned_alloc+0x28>

0000bd5e <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    bd5e:	3a04      	subs	r2, #4
{
    bd60:	b4f0      	push	{r4, r5, r6, r7}
    bd62:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    bd64:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    bd66:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    bd68:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    bd6c:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    bd70:	1a0e      	subs	r6, r1, r0
    bd72:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    bd74:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    bd76:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    bd7a:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    bd7c:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    bd80:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    bd82:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    bd84:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    bd86:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bd8a:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    bd8c:	f1c2 0220 	rsb	r2, r2, #32
    bd90:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    bd92:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    bd96:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    bd9a:	4294      	cmp	r4, r2
    bd9c:	d1fb      	bne.n	bd96 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bd9e:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    bda0:	f042 0201 	orr.w	r2, r2, #1
    bda4:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    bda6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    bdaa:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bdac:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    bdae:	8007      	strh	r7, [r0, #0]
    bdb0:	8065      	strh	r5, [r4, #2]
    bdb2:	1984      	adds	r4, r0, r6
    bdb4:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    bdb8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    bdbc:	8067      	strh	r7, [r4, #2]
    bdbe:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    bdc0:	885a      	ldrh	r2, [r3, #2]
    bdc2:	f042 0201 	orr.w	r2, r2, #1
    bdc6:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    bdc8:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    bdca:	f7ff be40 	b.w	ba4e <free_list_add>

0000bdce <sys_slist_find_and_remove>:
	return list->head;
    bdce:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bdd0:	2200      	movs	r2, #0
    bdd2:	b90b      	cbnz	r3, bdd8 <sys_slist_find_and_remove+0xa>
    bdd4:	4618      	mov	r0, r3
    bdd6:	4770      	bx	lr
    bdd8:	428b      	cmp	r3, r1
    bdda:	d110      	bne.n	bdfe <sys_slist_find_and_remove+0x30>
	return node->next;
    bddc:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    bdde:	b942      	cbnz	r2, bdf2 <sys_slist_find_and_remove+0x24>
    bde0:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    bde2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    bde4:	4291      	cmp	r1, r2
    bde6:	d100      	bne.n	bdea <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    bde8:	6043      	str	r3, [r0, #4]
	parent->next = child;
    bdea:	2300      	movs	r3, #0
    bdec:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bdee:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    bdf0:	4770      	bx	lr
	parent->next = child;
    bdf2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    bdf4:	6843      	ldr	r3, [r0, #4]
    bdf6:	4299      	cmp	r1, r3
	list->tail = node;
    bdf8:	bf08      	it	eq
    bdfa:	6042      	streq	r2, [r0, #4]
}
    bdfc:	e7f5      	b.n	bdea <sys_slist_find_and_remove+0x1c>
	return node->next;
    bdfe:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    be00:	681b      	ldr	r3, [r3, #0]
    be02:	e7e6      	b.n	bdd2 <sys_slist_find_and_remove+0x4>

0000be04 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    be04:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    be06:	f013 0307 	ands.w	r3, r3, #7
    be0a:	d105      	bne.n	be18 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    be0c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    be0e:	2b00      	cmp	r3, #0
    be10:	bf0c      	ite	eq
    be12:	2000      	moveq	r0, #0
    be14:	2003      	movne	r0, #3
    be16:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    be18:	2b02      	cmp	r3, #2
    be1a:	d105      	bne.n	be28 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    be1c:	8b40      	ldrh	r0, [r0, #26]
    be1e:	fab0 f080 	clz	r0, r0
    be22:	0940      	lsrs	r0, r0, #5
    be24:	0080      	lsls	r0, r0, #2
    be26:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    be28:	2b01      	cmp	r3, #1
    be2a:	d105      	bne.n	be38 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    be2c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    be2e:	2b00      	cmp	r3, #0
    be30:	bf0c      	ite	eq
    be32:	2000      	moveq	r0, #0
    be34:	2005      	movne	r0, #5
    be36:	4770      	bx	lr
	int evt = EVT_NOP;
    be38:	2000      	movs	r0, #0
}
    be3a:	4770      	bx	lr

0000be3c <validate_args>:
{
    be3c:	b510      	push	{r4, lr}
    be3e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    be40:	b100      	cbz	r0, be44 <validate_args+0x8>
    be42:	b911      	cbnz	r1, be4a <validate_args+0xe>
		return -EINVAL;
    be44:	f06f 0015 	mvn.w	r0, #21
}
    be48:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    be4a:	1d08      	adds	r0, r1, #4
    be4c:	f000 f8d6 	bl	bffc <sys_notify_validate>
	if ((rv == 0)
    be50:	2800      	cmp	r0, #0
    be52:	d1f9      	bne.n	be48 <validate_args+0xc>
	    && ((cli->notify.flags
    be54:	68a3      	ldr	r3, [r4, #8]
    be56:	2b03      	cmp	r3, #3
    be58:	d9f6      	bls.n	be48 <validate_args+0xc>
    be5a:	e7f3      	b.n	be44 <validate_args+0x8>

0000be5c <notify_one>:
{
    be5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be60:	460d      	mov	r5, r1
    be62:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    be64:	4619      	mov	r1, r3
    be66:	1d28      	adds	r0, r5, #4
{
    be68:	4690      	mov	r8, r2
    be6a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    be6c:	f000 f8d7 	bl	c01e <sys_notify_finalize>
	if (cb) {
    be70:	4604      	mov	r4, r0
    be72:	b138      	cbz	r0, be84 <notify_one+0x28>
		cb(mgr, cli, state, res);
    be74:	4633      	mov	r3, r6
    be76:	4642      	mov	r2, r8
    be78:	4629      	mov	r1, r5
    be7a:	4638      	mov	r0, r7
    be7c:	46a4      	mov	ip, r4
}
    be7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    be82:	4760      	bx	ip
}
    be84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000be88 <transition_complete>:
{
    be88:	b410      	push	{r4}
	__asm__ volatile(
    be8a:	f04f 0420 	mov.w	r4, #32
    be8e:	f3ef 8211 	mrs	r2, BASEPRI
    be92:	f384 8812 	msr	BASEPRI_MAX, r4
    be96:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    be9a:	6141      	str	r1, [r0, #20]
}
    be9c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    be9e:	2101      	movs	r1, #1
    bea0:	f7f6 bf08 	b.w	2cb4 <process_event>

0000bea4 <onoff_manager_init>:
{
    bea4:	b538      	push	{r3, r4, r5, lr}
    bea6:	460c      	mov	r4, r1
	if ((mgr == NULL)
    bea8:	4605      	mov	r5, r0
    beaa:	b158      	cbz	r0, bec4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    beac:	b151      	cbz	r1, bec4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    beae:	680b      	ldr	r3, [r1, #0]
    beb0:	b143      	cbz	r3, bec4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    beb2:	684b      	ldr	r3, [r1, #4]
    beb4:	b133      	cbz	r3, bec4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    beb6:	221c      	movs	r2, #28
    beb8:	2100      	movs	r1, #0
    beba:	f000 fb1a 	bl	c4f2 <memset>
    bebe:	612c      	str	r4, [r5, #16]
	return 0;
    bec0:	2000      	movs	r0, #0
}
    bec2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    bec4:	f06f 0015 	mvn.w	r0, #21
    bec8:	e7fb      	b.n	bec2 <onoff_manager_init+0x1e>

0000beca <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    beca:	b570      	push	{r4, r5, r6, lr}
    becc:	4605      	mov	r5, r0
    bece:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    bed0:	f7ff ffb4 	bl	be3c <validate_args>

	if (rv < 0) {
    bed4:	1e04      	subs	r4, r0, #0
    bed6:	db15      	blt.n	bf04 <onoff_request+0x3a>
    bed8:	f04f 0320 	mov.w	r3, #32
    bedc:	f3ef 8211 	mrs	r2, BASEPRI
    bee0:	f383 8812 	msr	BASEPRI_MAX, r3
    bee4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    bee8:	8b6b      	ldrh	r3, [r5, #26]
    beea:	8b2c      	ldrh	r4, [r5, #24]
    beec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bef0:	428b      	cmp	r3, r1
    bef2:	f004 0407 	and.w	r4, r4, #7
    bef6:	d107      	bne.n	bf08 <onoff_request+0x3e>
	__asm__ volatile(
    bef8:	f382 8811 	msr	BASEPRI, r2
    befc:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    bf00:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    bf04:	4620      	mov	r0, r4
    bf06:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    bf08:	2c02      	cmp	r4, #2
    bf0a:	d10c      	bne.n	bf26 <onoff_request+0x5c>
		mgr->refs += 1U;
    bf0c:	3301      	adds	r3, #1
    bf0e:	836b      	strh	r3, [r5, #26]
    bf10:	f382 8811 	msr	BASEPRI, r2
    bf14:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    bf18:	2300      	movs	r3, #0
    bf1a:	4622      	mov	r2, r4
    bf1c:	4631      	mov	r1, r6
    bf1e:	4628      	mov	r0, r5
    bf20:	f7ff ff9c 	bl	be5c <notify_one>
    bf24:	e7ee      	b.n	bf04 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    bf26:	2c06      	cmp	r4, #6
    bf28:	d814      	bhi.n	bf54 <onoff_request+0x8a>
    bf2a:	e8df f004 	tbb	[pc, r4]
    bf2e:	1304      	.short	0x1304
    bf30:	1a041313 	.word	0x1a041313
    bf34:	04          	.byte	0x04
    bf35:	00          	.byte	0x00
	parent->next = child;
    bf36:	2300      	movs	r3, #0
    bf38:	6033      	str	r3, [r6, #0]
	return list->tail;
    bf3a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    bf3c:	b93b      	cbnz	r3, bf4e <onoff_request+0x84>
	list->head = node;
    bf3e:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    bf42:	b9ac      	cbnz	r4, bf70 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    bf44:	2102      	movs	r1, #2
    bf46:	4628      	mov	r0, r5
    bf48:	f7f6 feb4 	bl	2cb4 <process_event>
    bf4c:	e7da      	b.n	bf04 <onoff_request+0x3a>
	parent->next = child;
    bf4e:	601e      	str	r6, [r3, #0]
	list->tail = node;
    bf50:	606e      	str	r6, [r5, #4]
}
    bf52:	e7f6      	b.n	bf42 <onoff_request+0x78>
    bf54:	f382 8811 	msr	BASEPRI, r2
    bf58:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    bf5c:	f06f 0404 	mvn.w	r4, #4
    bf60:	e7d0      	b.n	bf04 <onoff_request+0x3a>
    bf62:	f382 8811 	msr	BASEPRI, r2
    bf66:	f3bf 8f6f 	isb	sy
    bf6a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    bf6e:	e7c9      	b.n	bf04 <onoff_request+0x3a>
    bf70:	f382 8811 	msr	BASEPRI, r2
    bf74:	f3bf 8f6f 	isb	sy
		if (notify) {
    bf78:	e7c4      	b.n	bf04 <onoff_request+0x3a>

0000bf7a <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    bf7a:	b510      	push	{r4, lr}
	__asm__ volatile(
    bf7c:	f04f 0320 	mov.w	r3, #32
    bf80:	f3ef 8211 	mrs	r2, BASEPRI
    bf84:	f383 8812 	msr	BASEPRI_MAX, r3
    bf88:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bf8c:	8b04      	ldrh	r4, [r0, #24]
    bf8e:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    bf92:	2c02      	cmp	r4, #2
    bf94:	d00a      	beq.n	bfac <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    bf96:	2c01      	cmp	r4, #1
    bf98:	bf0c      	ite	eq
    bf9a:	f06f 0004 	mvneq.w	r0, #4
    bf9e:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    bfa2:	f382 8811 	msr	BASEPRI, r2
    bfa6:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    bfaa:	e008      	b.n	bfbe <onoff_release+0x44>
	mgr->refs -= 1U;
    bfac:	8b43      	ldrh	r3, [r0, #26]
    bfae:	3b01      	subs	r3, #1
    bfb0:	b29b      	uxth	r3, r3
    bfb2:	8343      	strh	r3, [r0, #26]
	if (stop) {
    bfb4:	b923      	cbnz	r3, bfc0 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    bfb6:	4621      	mov	r1, r4
    bfb8:	f7f6 fe7c 	bl	2cb4 <process_event>
	int rv = state;
    bfbc:	4620      	mov	r0, r4
}
    bfbe:	bd10      	pop	{r4, pc}
	int rv = state;
    bfc0:	4620      	mov	r0, r4
    bfc2:	e7ee      	b.n	bfa2 <onoff_release+0x28>

0000bfc4 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    bfc4:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    bfc6:	b1b0      	cbz	r0, bff6 <onoff_cancel+0x32>
    bfc8:	b1a9      	cbz	r1, bff6 <onoff_cancel+0x32>
	__asm__ volatile(
    bfca:	f04f 0220 	mov.w	r2, #32
    bfce:	f3ef 8511 	mrs	r5, BASEPRI
    bfd2:	f382 8812 	msr	BASEPRI_MAX, r2
    bfd6:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bfda:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    bfdc:	f7ff fef7 	bl	bdce <sys_slist_find_and_remove>
    bfe0:	b130      	cbz	r0, bff0 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    bfe2:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    bfe6:	f385 8811 	msr	BASEPRI, r5
    bfea:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    bfee:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    bff0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    bff4:	e7f7      	b.n	bfe6 <onoff_cancel+0x22>
		return -EINVAL;
    bff6:	f06f 0015 	mvn.w	r0, #21
    bffa:	e7f8      	b.n	bfee <onoff_cancel+0x2a>

0000bffc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    bffc:	4603      	mov	r3, r0
    bffe:	b158      	cbz	r0, c018 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c000:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    c002:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    c006:	2a01      	cmp	r2, #1
    c008:	d003      	beq.n	c012 <sys_notify_validate+0x16>
    c00a:	2a03      	cmp	r2, #3
    c00c:	d104      	bne.n	c018 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    c00e:	6802      	ldr	r2, [r0, #0]
    c010:	b112      	cbz	r2, c018 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    c012:	2000      	movs	r0, #0
    c014:	6098      	str	r0, [r3, #8]
    c016:	4770      	bx	lr
    c018:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    c01c:	4770      	bx	lr

0000c01e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c01e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    c020:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    c022:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    c026:	2a03      	cmp	r2, #3
    c028:	f04f 0200 	mov.w	r2, #0
{
    c02c:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    c02e:	bf0c      	ite	eq
    c030:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    c032:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    c034:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    c036:	4770      	bx	lr

0000c038 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    c038:	440a      	add	r2, r1
    c03a:	428a      	cmp	r2, r1
    c03c:	d100      	bne.n	c040 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    c03e:	4770      	bx	lr
		seed ^= *src++;
    c040:	f811 3b01 	ldrb.w	r3, [r1], #1
    c044:	ba40      	rev16	r0, r0
    c046:	b280      	uxth	r0, r0
    c048:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    c04a:	f3c0 1303 	ubfx	r3, r0, #4, #4
    c04e:	4043      	eors	r3, r0
		seed ^= seed << 12U;
    c050:	0318      	lsls	r0, r3, #12
    c052:	b280      	uxth	r0, r0
    c054:	4043      	eors	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    c056:	0158      	lsls	r0, r3, #5
    c058:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    c05c:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    c05e:	e7ec      	b.n	c03a <crc16_itu_t+0x2>

0000c060 <crc7_be>:

#include <zephyr/sys/crc.h>

uint8_t crc7_be(uint8_t seed, const uint8_t *src, size_t len)
{
	while (len--) {
    c060:	440a      	add	r2, r1
    c062:	4291      	cmp	r1, r2
    c064:	d100      	bne.n	c068 <crc7_be+0x8>

		seed = (f << 1) ^ (f << 4);
	}

	return seed;
}
    c066:	4770      	bx	lr
		uint8_t e = seed ^ *src++;
    c068:	f811 3b01 	ldrb.w	r3, [r1], #1
    c06c:	4058      	eors	r0, r3
		uint8_t f = e ^ (e >> 4) ^ (e >> 7);
    c06e:	09c3      	lsrs	r3, r0, #7
    c070:	ea83 1310 	eor.w	r3, r3, r0, lsr #4
		seed = (f << 1) ^ (f << 4);
    c074:	4058      	eors	r0, r3
    c076:	0103      	lsls	r3, r0, #4
    c078:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
    c07c:	b2d8      	uxtb	r0, r3
    c07e:	e7f0      	b.n	c062 <crc7_be+0x2>

0000c080 <encode_uint>:
{
    c080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c084:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    c086:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    c088:	2b6f      	cmp	r3, #111	; 0x6f
{
    c08a:	4680      	mov	r8, r0
    c08c:	460f      	mov	r7, r1
    c08e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c090:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c094:	d029      	beq.n	c0ea <encode_uint+0x6a>
    c096:	d824      	bhi.n	c0e2 <encode_uint+0x62>
		return 10;
    c098:	2b58      	cmp	r3, #88	; 0x58
    c09a:	bf0c      	ite	eq
    c09c:	2610      	moveq	r6, #16
    c09e:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    c0a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    c0a4:	4632      	mov	r2, r6
    c0a6:	2300      	movs	r3, #0
    c0a8:	4640      	mov	r0, r8
    c0aa:	4639      	mov	r1, r7
    c0ac:	f7f5 fec4 	bl	1e38 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c0b0:	2a09      	cmp	r2, #9
    c0b2:	b2d4      	uxtb	r4, r2
    c0b4:	d81e      	bhi.n	c0f4 <encode_uint+0x74>
    c0b6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    c0b8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c0ba:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    c0bc:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c0c0:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    c0c4:	d301      	bcc.n	c0ca <encode_uint+0x4a>
    c0c6:	45d1      	cmp	r9, sl
    c0c8:	d811      	bhi.n	c0ee <encode_uint+0x6e>
	if (conv->flag_hash) {
    c0ca:	782b      	ldrb	r3, [r5, #0]
    c0cc:	069b      	lsls	r3, r3, #26
    c0ce:	d505      	bpl.n	c0dc <encode_uint+0x5c>
		if (radix == 8) {
    c0d0:	2e08      	cmp	r6, #8
    c0d2:	d115      	bne.n	c100 <encode_uint+0x80>
			conv->altform_0 = true;
    c0d4:	78ab      	ldrb	r3, [r5, #2]
    c0d6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    c0da:	70ab      	strb	r3, [r5, #2]
}
    c0dc:	4648      	mov	r0, r9
    c0de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    c0e2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    c0e6:	2b70      	cmp	r3, #112	; 0x70
    c0e8:	e7d7      	b.n	c09a <encode_uint+0x1a>
	switch (specifier) {
    c0ea:	2608      	movs	r6, #8
    c0ec:	e7d8      	b.n	c0a0 <encode_uint+0x20>
		value /= radix;
    c0ee:	4680      	mov	r8, r0
    c0f0:	460f      	mov	r7, r1
    c0f2:	e7d7      	b.n	c0a4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c0f4:	f1bb 0f19 	cmp.w	fp, #25
    c0f8:	bf94      	ite	ls
    c0fa:	3437      	addls	r4, #55	; 0x37
    c0fc:	3457      	addhi	r4, #87	; 0x57
    c0fe:	e7db      	b.n	c0b8 <encode_uint+0x38>
		} else if (radix == 16) {
    c100:	2e10      	cmp	r6, #16
    c102:	d1eb      	bne.n	c0dc <encode_uint+0x5c>
			conv->altform_0c = true;
    c104:	78ab      	ldrb	r3, [r5, #2]
    c106:	f043 0310 	orr.w	r3, r3, #16
    c10a:	e7e6      	b.n	c0da <encode_uint+0x5a>

0000c10c <outs>:
{
    c10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c110:	4607      	mov	r7, r0
    c112:	4688      	mov	r8, r1
    c114:	4615      	mov	r5, r2
    c116:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c118:	4614      	mov	r4, r2
    c11a:	42b4      	cmp	r4, r6
    c11c:	d305      	bcc.n	c12a <outs+0x1e>
    c11e:	b10e      	cbz	r6, c124 <outs+0x18>
	return (int)count;
    c120:	1b60      	subs	r0, r4, r5
    c122:	e008      	b.n	c136 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c124:	7823      	ldrb	r3, [r4, #0]
    c126:	2b00      	cmp	r3, #0
    c128:	d0fa      	beq.n	c120 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    c12a:	f814 0b01 	ldrb.w	r0, [r4], #1
    c12e:	4641      	mov	r1, r8
    c130:	47b8      	blx	r7
		if (rc < 0) {
    c132:	2800      	cmp	r0, #0
    c134:	daf1      	bge.n	c11a <outs+0xe>
}
    c136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c13a <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c13a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
    c13c:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    c13e:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
    c140:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
    c142:	1baf      	subs	r7, r5, r6
{
    c144:	4604      	mov	r4, r0
    c146:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
    c148:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    c14a:	bf98      	it	ls
    c14c:	1aff      	subls	r7, r7, r3
    c14e:	eba5 0000 	sub.w	r0, r5, r0
{
    c152:	4694      	mov	ip, r2
		base += buf->size;
    c154:	bf98      	it	ls
    c156:	18f6      	addls	r6, r6, r3
    c158:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
    c15a:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
    c15c:	6823      	ldr	r3, [r4, #0]
    c15e:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
    c160:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    c162:	442b      	add	r3, r5
	size = MIN(size, free_space);
    c164:	bf28      	it	cs
    c166:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    c168:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    c16a:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
    c16c:	4290      	cmp	r0, r2
    c16e:	bf28      	it	cs
    c170:	4610      	movcs	r0, r2
	buf->put_head += size;
    c172:	4403      	add	r3, r0
    c174:	6063      	str	r3, [r4, #4]

	return size;
}
    c176:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c178 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    c178:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    c17c:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    c17e:	428a      	cmp	r2, r1
    c180:	d30c      	bcc.n	c19c <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    c182:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    c184:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    c186:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    c188:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    c18c:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    c18e:	428a      	cmp	r2, r1
    c190:	d901      	bls.n	c196 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    c192:	2000      	movs	r0, #0
    c194:	4770      	bx	lr
		buf->put_base += buf->size;
    c196:	4413      	add	r3, r2
    c198:	60c3      	str	r3, [r0, #12]
    c19a:	e7fa      	b.n	c192 <ring_buf_put_finish+0x1a>
		return -EINVAL;
    c19c:	f06f 0015 	mvn.w	r0, #21
}
    c1a0:	4770      	bx	lr

0000c1a2 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    c1a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c1a6:	4680      	mov	r8, r0
    c1a8:	460e      	mov	r6, r1
    c1aa:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c1ac:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    c1ae:	462a      	mov	r2, r5
    c1b0:	a901      	add	r1, sp, #4
    c1b2:	4640      	mov	r0, r8
    c1b4:	f7ff ffc1 	bl	c13a <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    c1b8:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    c1ba:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    c1bc:	4602      	mov	r2, r0
    c1be:	9801      	ldr	r0, [sp, #4]
    c1c0:	f000 f98c 	bl	c4dc <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    c1c4:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    c1c6:	4427      	add	r7, r4
		data += partial_size;
    c1c8:	4426      	add	r6, r4
	} while (size && partial_size);
    c1ca:	d001      	beq.n	c1d0 <ring_buf_put+0x2e>
    c1cc:	2c00      	cmp	r4, #0
    c1ce:	d1ee      	bne.n	c1ae <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    c1d0:	4639      	mov	r1, r7
    c1d2:	4640      	mov	r0, r8
    c1d4:	f7ff ffd0 	bl	c178 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    c1d8:	4638      	mov	r0, r7
    c1da:	b002      	add	sp, #8
    c1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c1e0 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1e2:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    c1e4:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    c1e6:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
    c1e8:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    c1ea:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
    c1ec:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    c1ee:	42b8      	cmp	r0, r7
{
    c1f0:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    c1f2:	bf98      	it	ls
    c1f4:	1836      	addls	r6, r6, r0
    c1f6:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
    c1fa:	6823      	ldr	r3, [r4, #0]
    c1fc:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
    c200:	bf98      	it	ls
    c202:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
    c204:	442b      	add	r3, r5
	size = MIN(size, available_size);
    c206:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
    c208:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
    c20c:	bf28      	it	cs
    c20e:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
    c210:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    c212:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
    c214:	4290      	cmp	r0, r2
    c216:	bf28      	it	cs
    c218:	4610      	movcs	r0, r2
	buf->get_head += size;
    c21a:	4403      	add	r3, r0
    c21c:	6123      	str	r3, [r4, #16]

	return size;
}
    c21e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c220 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    c220:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    c224:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    c226:	428a      	cmp	r2, r1
    c228:	d30c      	bcc.n	c244 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    c22a:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    c22c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
    c230:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
    c234:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    c236:	428a      	cmp	r2, r1
    c238:	d901      	bls.n	c23e <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    c23a:	2000      	movs	r0, #0
    c23c:	4770      	bx	lr
		buf->get_base += buf->size;
    c23e:	4413      	add	r3, r2
    c240:	6183      	str	r3, [r0, #24]
    c242:	e7fa      	b.n	c23a <ring_buf_get_finish+0x1a>
		return -EINVAL;
    c244:	f06f 0015 	mvn.w	r0, #21
}
    c248:	4770      	bx	lr

0000c24a <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    c24a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c24e:	4680      	mov	r8, r0
    c250:	460d      	mov	r5, r1
    c252:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c254:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    c256:	4632      	mov	r2, r6
    c258:	a901      	add	r1, sp, #4
    c25a:	4640      	mov	r0, r8
    c25c:	f7ff ffc0 	bl	c1e0 <ring_buf_get_claim>
    c260:	4604      	mov	r4, r0
		if (data) {
    c262:	b12d      	cbz	r5, c270 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    c264:	4602      	mov	r2, r0
    c266:	9901      	ldr	r1, [sp, #4]
    c268:	4628      	mov	r0, r5
    c26a:	f000 f937 	bl	c4dc <memcpy>
			data += partial_size;
    c26e:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    c270:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    c272:	4427      	add	r7, r4
	} while (size && partial_size);
    c274:	d001      	beq.n	c27a <ring_buf_get+0x30>
    c276:	2c00      	cmp	r4, #0
    c278:	d1ed      	bne.n	c256 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    c27a:	4639      	mov	r1, r7
    c27c:	4640      	mov	r0, r8
    c27e:	f7ff ffcf 	bl	c220 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    c282:	4638      	mov	r0, r7
    c284:	b002      	add	sp, #8
    c286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c28a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_TAINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    c28a:	4770      	bx	lr

0000c28c <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    c28c:	f010 0f70 	tst.w	r0, #112	; 0x70
    c290:	d108      	bne.n	c2a4 <get_ep_bm_from_addr+0x18>
	ep_idx = ep & (~USB_EP_DIR_IN);
    c292:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
    c296:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    c29a:	bf18      	it	ne
    c29c:	3310      	addne	r3, #16
    c29e:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    c2a0:	4098      	lsls	r0, r3
    c2a2:	4770      	bx	lr
	uint32_t ep_bm = 0;
    c2a4:	2000      	movs	r0, #0
}
    c2a6:	4770      	bx	lr

0000c2a8 <usb_write>:
{
    c2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c2ac:	4606      	mov	r6, r0
    c2ae:	460f      	mov	r7, r1
    c2b0:	4690      	mov	r8, r2
    c2b2:	4699      	mov	r9, r3
    c2b4:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    c2b6:	464b      	mov	r3, r9
    c2b8:	4642      	mov	r2, r8
    c2ba:	4639      	mov	r1, r7
    c2bc:	4630      	mov	r0, r6
    c2be:	f7f9 ffc9 	bl	6254 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    c2c2:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    c2c6:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    c2c8:	d103      	bne.n	c2d2 <usb_write+0x2a>
	z_impl_k_yield();
    c2ca:	f7ff f857 	bl	b37c <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    c2ce:	3d01      	subs	r5, #1
    c2d0:	d1f1      	bne.n	c2b6 <usb_write+0xe>
}
    c2d2:	4620      	mov	r0, r4
    c2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c2d8 <usb_get_dev_data_by_cfg>:
	return list->head;
    c2d8:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c2da:	b140      	cbz	r0, c2ee <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    c2dc:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    c2e0:	685b      	ldr	r3, [r3, #4]
    c2e2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c2e4:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    c2e8:	d001      	beq.n	c2ee <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    c2ea:	6840      	ldr	r0, [r0, #4]
    c2ec:	e7f5      	b.n	c2da <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    c2ee:	4770      	bx	lr

0000c2f0 <usb_get_dev_data_by_iface>:
	return list->head;
    c2f0:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c2f2:	b150      	cbz	r0, c30a <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    c2f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    c2f8:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    c2fa:	685b      	ldr	r3, [r3, #4]
    c2fc:	789b      	ldrb	r3, [r3, #2]
    c2fe:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c300:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    c304:	d001      	beq.n	c30a <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    c306:	6840      	ldr	r0, [r0, #4]
    c308:	e7f3      	b.n	c2f2 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    c30a:	4770      	bx	lr

0000c30c <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    c30c:	b530      	push	{r4, r5, lr}
	return list->head;
    c30e:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c310:	b188      	cbz	r0, c336 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    c312:	f850 3c04 	ldr.w	r3, [r0, #-4]
    c316:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    c318:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    c31a:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c31c:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    c31e:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    c320:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    c322:	b2dc      	uxtb	r4, r3
    c324:	42a5      	cmp	r5, r4
    c326:	d801      	bhi.n	c32c <usb_get_dev_data_by_ep+0x20>
	return node->next;
    c328:	6840      	ldr	r0, [r0, #4]
    c32a:	e7f1      	b.n	c310 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    c32c:	3301      	adds	r3, #1
    c32e:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    c332:	428c      	cmp	r4, r1
    c334:	d1f5      	bne.n	c322 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    c336:	bd30      	pop	{r4, r5, pc}

0000c338 <usb_transfer_is_busy>:
{
    c338:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    c33a:	f7f8 f843 	bl	43c4 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    c33e:	b128      	cbz	r0, c34c <usb_transfer_is_busy+0x14>
    c340:	6840      	ldr	r0, [r0, #4]
    c342:	f110 0f10 	cmn.w	r0, #16
    c346:	bf14      	ite	ne
    c348:	2000      	movne	r0, #0
    c34a:	2001      	moveq	r0, #1
}
    c34c:	bd08      	pop	{r3, pc}

0000c34e <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    c34e:	1c4b      	adds	r3, r1, #1
    c350:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    c352:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    c354:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    c356:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    c35a:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    c35c:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    c360:	4770      	bx	lr

0000c362 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    c362:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    c366:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    c36a:	4718      	bx	r3

0000c36c <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c36c:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    c36e:	2200      	movs	r2, #0
    c370:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
    c374:	4770      	bx	lr

0000c376 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c376:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    c378:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    c37c:	b108      	cbz	r0, c382 <cdc_acm_irq_tx_ready+0xc>
    c37e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    c382:	4770      	bx	lr

0000c384 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c384:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    c386:	2200      	movs	r2, #0
    c388:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
    c38c:	4770      	bx	lr

0000c38e <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    c38e:	6903      	ldr	r3, [r0, #16]
}
    c390:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    c394:	4770      	bx	lr

0000c396 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c396:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    c398:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    c39c:	b112      	cbz	r2, c3a4 <cdc_acm_irq_is_pending+0xe>
    c39e:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    c3a2:	b92a      	cbnz	r2, c3b0 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    c3a4:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    c3a8:	b118      	cbz	r0, c3b2 <cdc_acm_irq_is_pending+0x1c>
    c3aa:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
    c3ae:	4770      	bx	lr
		return 1;
    c3b0:	2001      	movs	r0, #1
}
    c3b2:	4770      	bx	lr

0000c3b4 <cdc_acm_irq_update>:
}
    c3b4:	2001      	movs	r0, #1
    c3b6:	4770      	bx	lr

0000c3b8 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c3b8:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    c3ba:	e9c3 1200 	strd	r1, r2, [r3]
}
    c3be:	4770      	bx	lr

0000c3c0 <cdc_acm_configure>:
}
    c3c0:	2000      	movs	r0, #0
    c3c2:	4770      	bx	lr

0000c3c4 <cdc_acm_config_get>:
{
    c3c4:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c3c6:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    c3c8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c3cc:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    c3ce:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    c3d2:	b16a      	cbz	r2, c3f0 <cdc_acm_config_get+0x2c>
    c3d4:	2a01      	cmp	r2, #1
    c3d6:	bf0c      	ite	eq
    c3d8:	2202      	moveq	r2, #2
    c3da:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    c3dc:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    c3de:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
    c3e2:	1e50      	subs	r0, r2, #1
    c3e4:	2803      	cmp	r0, #3
    c3e6:	d805      	bhi.n	c3f4 <cdc_acm_config_get+0x30>
    c3e8:	e8df f000 	tbb	[pc, r0]
    c3ec:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
    c3f0:	2201      	movs	r2, #1
    c3f2:	e7f3      	b.n	c3dc <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
    c3f4:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
    c3f6:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    c3f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    c3fc:	2b06      	cmp	r3, #6
    c3fe:	d009      	beq.n	c414 <cdc_acm_config_get+0x50>
    c400:	2b07      	cmp	r3, #7
    c402:	d009      	beq.n	c418 <cdc_acm_config_get+0x54>
    c404:	2b05      	cmp	r3, #5
    c406:	bf0c      	ite	eq
    c408:	2300      	moveq	r3, #0
    c40a:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    c40c:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    c40e:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    c410:	71c8      	strb	r0, [r1, #7]
}
    c412:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
    c414:	2301      	movs	r3, #1
    c416:	e7f9      	b.n	c40c <cdc_acm_config_get+0x48>
    c418:	2302      	movs	r3, #2
    c41a:	e7f7      	b.n	c40c <cdc_acm_config_get+0x48>

0000c41c <cdc_acm_fifo_read>:
{
    c41c:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c41e:	6904      	ldr	r4, [r0, #16]
{
    c420:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    c422:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c426:	f7ff ff10 	bl	c24a <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    c42a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    c42e:	689a      	ldr	r2, [r3, #8]
    c430:	6919      	ldr	r1, [r3, #16]
    c432:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
    c434:	bf04      	itt	eq
    c436:	2200      	moveq	r2, #0
    c438:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
    c43c:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    c440:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
    c442:	b19a      	cbz	r2, c46c <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
    c444:	685a      	ldr	r2, [r3, #4]
    c446:	6959      	ldr	r1, [r3, #20]
    c448:	69db      	ldr	r3, [r3, #28]
    c44a:	1a52      	subs	r2, r2, r1
    c44c:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    c44e:	2b3f      	cmp	r3, #63	; 0x3f
    c450:	d90c      	bls.n	c46c <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
    c452:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    c456:	b133      	cbz	r3, c466 <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    c458:	686b      	ldr	r3, [r5, #4]
    c45a:	6a1b      	ldr	r3, [r3, #32]
    c45c:	4622      	mov	r2, r4
    c45e:	7b18      	ldrb	r0, [r3, #12]
    c460:	2100      	movs	r1, #0
    c462:	f7f8 fa7d 	bl	4960 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
    c466:	2300      	movs	r3, #0
    c468:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    c46c:	4630      	mov	r0, r6
    c46e:	bd70      	pop	{r4, r5, r6, pc}

0000c470 <cdc_acm_poll_in>:
{
    c470:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    c472:	2201      	movs	r2, #1
    c474:	f7ff ffd2 	bl	c41c <cdc_acm_fifo_read>
}
    c478:	3801      	subs	r0, #1
    c47a:	bf18      	it	ne
    c47c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c480:	bd08      	pop	{r3, pc}

0000c482 <oled_displayOn>:
	api->display_on(dev);
    c482:	6883      	ldr	r3, [r0, #8]
    c484:	685b      	ldr	r3, [r3, #4]
    c486:	4718      	bx	r3

0000c488 <oled_display>:
	api->write_buffer(dev);
    c488:	6883      	ldr	r3, [r0, #8]
    c48a:	68db      	ldr	r3, [r3, #12]
    c48c:	4718      	bx	r3

0000c48e <oled_clearDisplay>:
{
    c48e:	2300      	movs	r3, #0
    c490:	b510      	push	{r4, lr}
			FRAME_BUFFER[page][column] = 0;
    c492:	461c      	mov	r4, r3
{
    c494:	2200      	movs	r2, #0
			FRAME_BUFFER[page][column] = 0;
    c496:	6901      	ldr	r1, [r0, #16]
    c498:	4411      	add	r1, r2
		for (uint8_t column = 0; column < 128; column++) {
    c49a:	3201      	adds	r2, #1
    c49c:	2a80      	cmp	r2, #128	; 0x80
			FRAME_BUFFER[page][column] = 0;
    c49e:	54cc      	strb	r4, [r1, r3]
		for (uint8_t column = 0; column < 128; column++) {
    c4a0:	d1f9      	bne.n	c496 <oled_clearDisplay+0x8>
	for (uint8_t page = 0; page < 8; page++) {
    c4a2:	3380      	adds	r3, #128	; 0x80
    c4a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c4a8:	d1f4      	bne.n	c494 <oled_clearDisplay+0x6>
}
    c4aa:	bd10      	pop	{r4, pc}

0000c4ac <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    c4ac:	f001 bb14 	b.w	dad8 <z_fatal_error>

0000c4b0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    c4b0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    c4b2:	6800      	ldr	r0, [r0, #0]
    c4b4:	f001 bb10 	b.w	dad8 <z_fatal_error>

0000c4b8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    c4b8:	2100      	movs	r1, #0
    c4ba:	2001      	movs	r0, #1
    c4bc:	f7ff bff6 	b.w	c4ac <z_arm_fatal_error>

0000c4c0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    c4c0:	b508      	push	{r3, lr}
	handler();
    c4c2:	f7f8 fcad 	bl	4e20 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    c4c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    c4ca:	f7f8 bd8d 	b.w	4fe8 <z_arm_exc_exit>

0000c4ce <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    c4ce:	4603      	mov	r3, r0
	size_t n = 0;
    c4d0:	2000      	movs	r0, #0

	while (*s != '\0') {
    c4d2:	5c1a      	ldrb	r2, [r3, r0]
    c4d4:	b902      	cbnz	r2, c4d8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    c4d6:	4770      	bx	lr
		n++;
    c4d8:	3001      	adds	r0, #1
    c4da:	e7fa      	b.n	c4d2 <strlen+0x4>

0000c4dc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    c4dc:	b510      	push	{r4, lr}
    c4de:	1e43      	subs	r3, r0, #1
    c4e0:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    c4e2:	4291      	cmp	r1, r2
    c4e4:	d100      	bne.n	c4e8 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    c4e6:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    c4e8:	f811 4b01 	ldrb.w	r4, [r1], #1
    c4ec:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    c4f0:	e7f7      	b.n	c4e2 <memcpy+0x6>

0000c4f2 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    c4f2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    c4f4:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    c4f6:	4603      	mov	r3, r0
	while (n > 0) {
    c4f8:	4293      	cmp	r3, r2
    c4fa:	d100      	bne.n	c4fe <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    c4fc:	4770      	bx	lr
		*(d_byte++) = c_byte;
    c4fe:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    c502:	e7f9      	b.n	c4f8 <memset+0x6>

0000c504 <_stdout_hook_default>:
}
    c504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c508:	4770      	bx	lr

0000c50a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    c50a:	4603      	mov	r3, r0
	size_t n = 0;
    c50c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    c50e:	5c1a      	ldrb	r2, [r3, r0]
    c510:	b10a      	cbz	r2, c516 <strnlen+0xc>
    c512:	4288      	cmp	r0, r1
    c514:	d100      	bne.n	c518 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    c516:	4770      	bx	lr
		n++;
    c518:	3001      	adds	r0, #1
    c51a:	e7f8      	b.n	c50e <strnlen+0x4>

0000c51c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    c51c:	2806      	cmp	r0, #6
    c51e:	d108      	bne.n	c532 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    c520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c524:	2201      	movs	r2, #1
    c526:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    c52a:	f3bf 8f4f 	dsb	sy
        __WFE();
    c52e:	bf20      	wfe
    while (true)
    c530:	e7fd      	b.n	c52e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    c532:	4770      	bx	lr

0000c534 <pm_state_exit_post_ops>:
    c534:	2300      	movs	r3, #0
    c536:	f383 8811 	msr	BASEPRI, r3
    c53a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    c53e:	4770      	bx	lr

0000c540 <sdhc_set_io>:
	struct sdhc_io *io)
{
	const struct sdhc_driver_api *api =
		(const struct sdhc_driver_api *)dev->api;

	if (!api->set_io) {
    c540:	6883      	ldr	r3, [r0, #8]
    c542:	689b      	ldr	r3, [r3, #8]
    c544:	b103      	cbz	r3, c548 <sdhc_set_io+0x8>
		return -ENOSYS;
	}

	return api->set_io(dev, io);
    c546:	4718      	bx	r3
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SDHC_SET_IO);
	}
#endif
	compiler_barrier();
	return z_impl_sdhc_set_io(dev, io);
}
    c548:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c54c:	4770      	bx	lr

0000c54e <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    c54e:	f7fe baa3 	b.w	aa98 <z_impl_k_mutex_unlock>

0000c552 <sdhc_request.constprop.0>:
	if (!api->request) {
    c552:	6883      	ldr	r3, [r0, #8]
    c554:	685b      	ldr	r3, [r3, #4]
    c556:	b10b      	cbz	r3, c55c <sdhc_request.constprop.0+0xa>
	return api->request(dev, cmd, data);
    c558:	2200      	movs	r2, #0
    c55a:	4718      	bx	r3
}
    c55c:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c560:	4770      	bx	lr

0000c562 <sd_idle.isra.0>:
static inline int sd_idle(struct sd_card *card)
    c562:	b510      	push	{r4, lr}
    c564:	b08a      	sub	sp, #40	; 0x28
    c566:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
    c568:	2220      	movs	r2, #32
    c56a:	2100      	movs	r1, #0
    c56c:	a801      	add	r0, sp, #4
    c56e:	f7ff ffc0 	bl	c4f2 <memset>
	cmd.response_type = (SD_RSP_TYPE_NONE | SD_SPI_RSP_TYPE_R1);
    c572:	2310      	movs	r3, #16
    c574:	9307      	str	r3, [sp, #28]
	return sdhc_request(card->sdhc, &cmd, NULL);
    c576:	a901      	add	r1, sp, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    c578:	23c8      	movs	r3, #200	; 0xc8
	return sdhc_request(card->sdhc, &cmd, NULL);
    c57a:	4620      	mov	r0, r4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    c57c:	9309      	str	r3, [sp, #36]	; 0x24
	return sdhc_request(card->sdhc, &cmd, NULL);
    c57e:	f7ff ffe8 	bl	c552 <sdhc_request.constprop.0>
}
    c582:	b00a      	add	sp, #40	; 0x28
    c584:	bd10      	pop	{r4, pc}

0000c586 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    c586:	b538      	push	{r3, r4, r5, lr}
    c588:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
    c58a:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    c58e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    c592:	f240 30e7 	movw	r0, #999	; 0x3e7
    c596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c59a:	2300      	movs	r3, #0
    c59c:	fbc4 0105 	smlal	r0, r1, r4, r5
    c5a0:	f7f5 fc4a 	bl	1e38 <__aeabi_uldivmod>
}
    c5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    c5a8:	f7fe bf6a 	b.w	b480 <z_impl_k_sleep>

0000c5ac <sd_command_init>:

/*
 * Performs init flow described in section 3.6 of SD specification.
 */
static int sd_command_init(struct sd_card *card)
{
    c5ac:	b530      	push	{r4, r5, lr}
    c5ae:	4604      	mov	r4, r0
    c5b0:	b08b      	sub	sp, #44	; 0x2c
	k_msleep(millis);
    c5b2:	2001      	movs	r0, #1
    c5b4:	f7ff ffe7 	bl	c586 <k_msleep.isra.0>
	ret = sd_idle(card);
    c5b8:	6820      	ldr	r0, [r4, #0]
    c5ba:	f7ff ffd2 	bl	c562 <sd_idle.isra.0>
	if (ret) {
    c5be:	bb50      	cbnz	r0, c616 <sd_command_init+0x6a>
    c5c0:	250b      	movs	r5, #11
	struct sdhc_command cmd = {0};
    c5c2:	2100      	movs	r1, #0
    c5c4:	2218      	movs	r2, #24
    c5c6:	a803      	add	r0, sp, #12
    c5c8:	f7ff ff93 	bl	c4f2 <memset>
	cmd.arg = SD_IF_COND_VHS_3V3 | SD_IF_COND_CHECK;
    c5cc:	2008      	movs	r0, #8
    c5ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    c5d2:	e9cd 0301 	strd	r0, r3, [sp, #4]
	cmd.response_type = (SD_RSP_TYPE_R7 | SD_SPI_RSP_TYPE_R7);
    c5d6:	2379      	movs	r3, #121	; 0x79
    c5d8:	9307      	str	r3, [sp, #28]
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    c5da:	6820      	ldr	r0, [r4, #0]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    c5dc:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    c5de:	a901      	add	r1, sp, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    c5e0:	9309      	str	r3, [sp, #36]	; 0x24
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    c5e2:	f7ff ffb6 	bl	c552 <sdhc_request.constprop.0>
	if (ret) {
    c5e6:	b9d0      	cbnz	r0, c61e <sd_command_init+0x72>
	if (card->host_props.is_spi) {
    c5e8:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
    c5ec:	b1aa      	cbz	r2, c61a <sd_command_init+0x6e>
		resp = cmd.response[1];
    c5ee:	9b04      	ldr	r3, [sp, #16]
	if ((resp & 0xFF) != SD_IF_COND_CHECK) {
    c5f0:	b2d9      	uxtb	r1, r3
    c5f2:	29aa      	cmp	r1, #170	; 0xaa
    c5f4:	d113      	bne.n	c61e <sd_command_init+0x72>
	if ((resp & SD_IF_COND_VHS_MASK) != SD_IF_COND_VHS_3V3) {
    c5f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    c5fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c5fe:	d108      	bne.n	c612 <sd_command_init+0x66>
	card->flags |= SD_SDHC_FLAG;
    c600:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    c602:	f043 0308 	orr.w	r3, r3, #8
    c606:	67e3      	str	r3, [r4, #124]	; 0x7c
	if (card->host_props.is_spi &&
    c608:	b98a      	cbnz	r2, c62e <sd_command_init+0x82>
		return 0;
	}
#endif /* CONFIG_SDIO_STACK */
#ifdef CONFIG_SDMMC_STACK
	/* Attempt to initialize SDMMC card */
	if (!sdmmc_card_init(card)) {
    c60a:	4620      	mov	r0, r4
    c60c:	f7f9 f834 	bl	5678 <sdmmc_card_init>
    c610:	b108      	cbz	r0, c616 <sd_command_init+0x6a>
	if (!mmc_card_init(card)) {
		return 0;
	}
#endif /* CONFIG_MMC_STACK */
	/* Unknown card type */
	return -ENOTSUP;
    c612:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    c616:	b00b      	add	sp, #44	; 0x2c
    c618:	bd30      	pop	{r4, r5, pc}
		resp = cmd.response[0];
    c61a:	9b03      	ldr	r3, [sp, #12]
    c61c:	e7e8      	b.n	c5f0 <sd_command_init+0x44>
	while (retries-- >= 0) {
    c61e:	3d01      	subs	r5, #1
    c620:	d1cf      	bne.n	c5c2 <sd_command_init+0x16>
		return sd_idle(card);
    c622:	6820      	ldr	r0, [r4, #0]
    c624:	f7ff ff9d 	bl	c562 <sd_idle.isra.0>
	if (ret) {
    c628:	2800      	cmp	r0, #0
    c62a:	d0ee      	beq.n	c60a <sd_command_init+0x5e>
    c62c:	e7f3      	b.n	c616 <sd_command_init+0x6a>
	struct sdhc_command cmd = {0};
    c62e:	2218      	movs	r2, #24
    c630:	2100      	movs	r1, #0
    c632:	a803      	add	r0, sp, #12
    c634:	6825      	ldr	r5, [r4, #0]
    c636:	f7ff ff5c 	bl	c4f2 <memset>
	cmd.arg = 0x1; /* Enable CRC */
    c63a:	223b      	movs	r2, #59	; 0x3b
    c63c:	2301      	movs	r3, #1
    c63e:	e9cd 2301 	strd	r2, r3, [sp, #4]
	cmd.response_type = SD_SPI_RSP_TYPE_R1;
    c642:	2310      	movs	r3, #16
    c644:	9307      	str	r3, [sp, #28]
	return sdhc_request(card->sdhc, &cmd, NULL);
    c646:	a901      	add	r1, sp, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    c648:	23c8      	movs	r3, #200	; 0xc8
	return sdhc_request(card->sdhc, &cmd, NULL);
    c64a:	4628      	mov	r0, r5
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    c64c:	9309      	str	r3, [sp, #36]	; 0x24
	return sdhc_request(card->sdhc, &cmd, NULL);
    c64e:	f7ff ff80 	bl	c552 <sdhc_request.constprop.0>
    c652:	e7e9      	b.n	c628 <sd_command_init+0x7c>

0000c654 <sd_init>:

/* Initializes SD/SDIO card */
int sd_init(const struct device *sdhc_dev, struct sd_card *card)
{
    c654:	b570      	push	{r4, r5, r6, lr}
    c656:	460d      	mov	r5, r1
	int ret;

	if (!sdhc_dev) {
    c658:	2800      	cmp	r0, #0
    c65a:	d047      	beq.n	c6ec <sd_init+0x98>
		return -ENODEV;
	}
	card->sdhc = sdhc_dev;
    c65c:	f841 0b28 	str.w	r0, [r1], #40
	struct sdhc_host_props *props)
{
	const struct sdhc_driver_api *api =
		(const struct sdhc_driver_api *)dev->api;

	if (!api->get_host_props) {
    c660:	6883      	ldr	r3, [r0, #8]
    c662:	699b      	ldr	r3, [r3, #24]
    c664:	2b00      	cmp	r3, #0
    c666:	d044      	beq.n	c6f2 <sd_init+0x9e>
		return -ENOSYS;
	}

	return api->get_host_props(dev, props);
    c668:	4798      	blx	r3
	ret = sdhc_get_host_props(card->sdhc, &card->host_props);
	if (ret) {
    c66a:	4604      	mov	r4, r0
    c66c:	b9b0      	cbnz	r0, c69c <sd_init+0x48>
		LOG_ERR("SD host controller returned invalid properties");
		return ret;
	}

	/* init and lock card mutex */
	ret = k_mutex_init(&card->lock);
    c66e:	f105 0614 	add.w	r6, r5, #20
	return z_impl_k_mutex_init(mutex);
    c672:	4630      	mov	r0, r6
    c674:	f001 faa8 	bl	dbc8 <z_impl_k_mutex_init>
	if (ret) {
    c678:	4604      	mov	r4, r0
    c67a:	b978      	cbnz	r0, c69c <sd_init+0x48>
	return z_impl_k_mutex_lock(mutex, timeout);
    c67c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    c680:	2300      	movs	r3, #0
    c682:	4630      	mov	r0, r6
    c684:	f7fe f98e 	bl	a9a4 <z_impl_k_mutex_lock>
		LOG_DBG("Could not init card mutex");
		return ret;
	}
	ret = k_mutex_lock(&card->lock, K_MSEC(CONFIG_SD_INIT_TIMEOUT));
	if (ret) {
    c688:	4604      	mov	r4, r0
    c68a:	b938      	cbnz	r0, c69c <sd_init+0x48>
		LOG_ERR("Timeout while trying to acquire card mutex");
		return ret;
	}

	/* Initialize SDHC IO with defaults */
	ret = sd_init_io(card);
    c68c:	4628      	mov	r0, r5
    c68e:	f7f8 ff7b 	bl	5588 <sd_init_io>
	if (ret) {
    c692:	4604      	mov	r4, r0
    c694:	b120      	cbz	r0, c6a0 <sd_init+0x4c>
			return ret;
		}
		ret = sd_command_init(card);
		if (ret) {
			LOG_ERR("Failed to init SD card after I/O reset");
			k_mutex_unlock(&card->lock);
    c696:	4630      	mov	r0, r6
    c698:	f7ff ff59 	bl	c54e <k_mutex_unlock>
	if (ret) {
		LOG_DBG("Could not unlock card mutex");
		return ret;
	}
	return ret;
}
    c69c:	4620      	mov	r0, r4
    c69e:	bd70      	pop	{r4, r5, r6, pc}
	ret = sd_command_init(card);
    c6a0:	4628      	mov	r0, r5
    c6a2:	f7ff ff83 	bl	c5ac <sd_command_init>
	if (ret == SD_RESTART) {
    c6a6:	2803      	cmp	r0, #3
	ret = sd_command_init(card);
    c6a8:	4604      	mov	r4, r0
	if (ret == SD_RESTART) {
    c6aa:	d116      	bne.n	c6da <sd_init+0x86>
		card->status = CARD_ERROR;
    c6ac:	2301      	movs	r3, #1
    c6ae:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
		ret = sd_init_io(card);
    c6b2:	4628      	mov	r0, r5
    c6b4:	f7f8 ff68 	bl	5588 <sd_init_io>
		if (ret) {
    c6b8:	4604      	mov	r4, r0
    c6ba:	2800      	cmp	r0, #0
    c6bc:	d1eb      	bne.n	c696 <sd_init+0x42>
		ret = sd_command_init(card);
    c6be:	4628      	mov	r0, r5
    c6c0:	f7ff ff74 	bl	c5ac <sd_command_init>
		if (ret) {
    c6c4:	4604      	mov	r4, r0
    c6c6:	2800      	cmp	r0, #0
    c6c8:	d1e5      	bne.n	c696 <sd_init+0x42>
	card->status = CARD_INITIALIZED;
    c6ca:	2302      	movs	r3, #2
    c6cc:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ret = k_mutex_unlock(&card->lock);
    c6d0:	4630      	mov	r0, r6
}
    c6d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = k_mutex_unlock(&card->lock);
    c6d6:	f7ff bf3a 	b.w	c54e <k_mutex_unlock>
	} else if (ret != 0) {
    c6da:	2800      	cmp	r0, #0
    c6dc:	d0f5      	beq.n	c6ca <sd_init+0x76>
		k_mutex_unlock(&card->lock);
    c6de:	4630      	mov	r0, r6
    c6e0:	f7ff ff35 	bl	c54e <k_mutex_unlock>
		card->status = CARD_ERROR;
    c6e4:	2301      	movs	r3, #1
    c6e6:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
		return ret;
    c6ea:	e7d7      	b.n	c69c <sd_init+0x48>
		return -ENODEV;
    c6ec:	f06f 0412 	mvn.w	r4, #18
    c6f0:	e7d4      	b.n	c69c <sd_init+0x48>
		return -ENOSYS;
    c6f2:	f06f 0457 	mvn.w	r4, #87	; 0x57
    c6f6:	e7d1      	b.n	c69c <sd_init+0x48>

0000c6f8 <sdhc_request>:
	if (!api->request) {
    c6f8:	6883      	ldr	r3, [r0, #8]
    c6fa:	685b      	ldr	r3, [r3, #4]
    c6fc:	b103      	cbz	r3, c700 <sdhc_request+0x8>
	return api->request(dev, cmd, data);
    c6fe:	4718      	bx	r3
    c700:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c704:	4770      	bx	lr

0000c706 <sdhc_card_busy>:
	if (!api->card_busy) {
    c706:	6883      	ldr	r3, [r0, #8]
    c708:	695b      	ldr	r3, [r3, #20]
    c70a:	b103      	cbz	r3, c70e <sdhc_card_busy+0x8>
	return api->card_busy(dev);
    c70c:	4718      	bx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_SDHC_CARD_BUSY);
	}
#endif
	compiler_barrier();
	return z_impl_sdhc_card_busy(dev);
}
    c70e:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c712:	4770      	bx	lr

0000c714 <sdmmc_spi_read_cxd>:
{
    c714:	b5f0      	push	{r4, r5, r6, r7, lr}
    c716:	b091      	sub	sp, #68	; 0x44
	struct sdhc_data data = {0};
    c718:	2610      	movs	r6, #16
{
    c71a:	4604      	mov	r4, r0
    c71c:	460f      	mov	r7, r1
    c71e:	4615      	mov	r5, r2
	struct sdhc_command cmd = {0};
    c720:	2100      	movs	r1, #0
    c722:	221c      	movs	r2, #28
    c724:	a808      	add	r0, sp, #32
    c726:	f7ff fee4 	bl	c4f2 <memset>
	struct sdhc_data data = {0};
    c72a:	4632      	mov	r2, r6
    c72c:	2100      	movs	r1, #0
    c72e:	a801      	add	r0, sp, #4
    c730:	f7ff fedf 	bl	c4f2 <memset>
	data.blocks = 1U;
    c734:	2201      	movs	r2, #1
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    c736:	23c8      	movs	r3, #200	; 0xc8
	data.blocks = 1U;
    c738:	9203      	str	r2, [sp, #12]
	uint32_t *cxd_be = (uint32_t *)card->card_buffer;
    c73a:	f104 0280 	add.w	r2, r4, #128	; 0x80
	data.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    c73e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	ret = sdhc_request(card->sdhc, &cmd, &data);
    c742:	f854 0b7c 	ldr.w	r0, [r4], #124
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    c746:	930f      	str	r3, [sp, #60]	; 0x3c
	ret = sdhc_request(card->sdhc, &cmd, &data);
    c748:	aa01      	add	r2, sp, #4
    c74a:	a907      	add	r1, sp, #28
	cmd.opcode = opcode;
    c74c:	9707      	str	r7, [sp, #28]
	cmd.response_type = SD_SPI_RSP_TYPE_R1;
    c74e:	960d      	str	r6, [sp, #52]	; 0x34
	data.block_size = 16;
    c750:	9602      	str	r6, [sp, #8]
	ret = sdhc_request(card->sdhc, &cmd, &data);
    c752:	f7ff ffd1 	bl	c6f8 <sdhc_request>
	for (i = 0; i < 4; i++) {
    c756:	19ab      	adds	r3, r5, r6
		cxd[3 - i] = sys_be32_to_cpu(cxd_be[i]);
    c758:	f854 2f04 	ldr.w	r2, [r4, #4]!
    c75c:	ba12      	rev	r2, r2
    c75e:	f843 2d04 	str.w	r2, [r3, #-4]!
	for (i = 0; i < 4; i++) {
    c762:	42ab      	cmp	r3, r5
    c764:	d1f8      	bne.n	c758 <sdmmc_spi_read_cxd+0x44>
}
    c766:	2000      	movs	r0, #0
    c768:	b011      	add	sp, #68	; 0x44
    c76a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c76c <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    c76c:	f7fe b994 	b.w	aa98 <z_impl_k_mutex_unlock>

0000c770 <sdmmc_read_status>:
{
    c770:	b510      	push	{r4, lr}
    c772:	b08a      	sub	sp, #40	; 0x28
    c774:	4604      	mov	r4, r0
	struct sdhc_command cmd = {0};
    c776:	221c      	movs	r2, #28
    c778:	2100      	movs	r1, #0
    c77a:	a802      	add	r0, sp, #8
    c77c:	f7ff feb9 	bl	c4f2 <memset>
	cmd.opcode = SD_SEND_STATUS;
    c780:	230d      	movs	r3, #13
    c782:	9301      	str	r3, [sp, #4]
	if (!card->host_props.is_spi) {
    c784:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    c788:	b913      	cbnz	r3, c790 <sdmmc_read_status+0x20>
		cmd.arg = (card->relative_addr << 16U);
    c78a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c78c:	041b      	lsls	r3, r3, #16
    c78e:	9302      	str	r3, [sp, #8]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R2);
    c790:	2331      	movs	r3, #49	; 0x31
    c792:	9307      	str	r3, [sp, #28]
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    c794:	6820      	ldr	r0, [r4, #0]
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    c796:	23c8      	movs	r3, #200	; 0xc8
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    c798:	2200      	movs	r2, #0
    c79a:	a901      	add	r1, sp, #4
	cmd.timeout_ms = CONFIG_SD_CMD_TIMEOUT;
    c79c:	9309      	str	r3, [sp, #36]	; 0x24
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    c79e:	f7ff ffab 	bl	c6f8 <sdhc_request>
	if (ret) {
    c7a2:	b9c8      	cbnz	r0, c7d8 <sdmmc_read_status+0x68>
	if (card->host_props.is_spi) {
    c7a4:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
		if ((cmd.response[0U] & SDHC_SPI_R2_CARD_LOCKED) ||
    c7a8:	9b03      	ldr	r3, [sp, #12]
	if (card->host_props.is_spi) {
    c7aa:	b162      	cbz	r2, c7c6 <sdmmc_read_status+0x56>
		if ((cmd.response[0U] & SDHC_SPI_R2_CARD_LOCKED) ||
    c7ac:	f413 7f40 	tst.w	r3, #768	; 0x300
    c7b0:	d114      	bne.n	c7dc <sdmmc_read_status+0x6c>
		} else if ((cmd.response[0U] & SDHC_SPI_R2_WP_VIOLATION) ||
    c7b2:	f413 4f60 	tst.w	r3, #57344	; 0xe000
    c7b6:	d114      	bne.n	c7e2 <sdmmc_read_status+0x72>
			return -EIO;
    c7b8:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    c7bc:	bf18      	it	ne
    c7be:	f06f 0004 	mvnne.w	r0, #4
}
    c7c2:	b00a      	add	sp, #40	; 0x28
    c7c4:	bd10      	pop	{r4, pc}
	if ((cmd.response[0U] & SD_R1_RDY_DATA) &&
    c7c6:	05da      	lsls	r2, r3, #23
    c7c8:	d50e      	bpl.n	c7e8 <sdmmc_read_status+0x78>
	    (SD_R1_CURRENT_STATE(cmd.response[0U]) == SDMMC_R1_TRANSFER)) {
    c7ca:	f3c3 2343 	ubfx	r3, r3, #9, #4
	return -EBUSY;
    c7ce:	2b04      	cmp	r3, #4
    c7d0:	bf18      	it	ne
    c7d2:	f06f 000f 	mvnne.w	r0, #15
    c7d6:	e7f4      	b.n	c7c2 <sdmmc_read_status+0x52>
		return SD_RETRY;
    c7d8:	2001      	movs	r0, #1
    c7da:	e7f2      	b.n	c7c2 <sdmmc_read_status+0x52>
			return -EACCES;
    c7dc:	f06f 000c 	mvn.w	r0, #12
    c7e0:	e7ef      	b.n	c7c2 <sdmmc_read_status+0x52>
			return -EINVAL;
    c7e2:	f06f 0015 	mvn.w	r0, #21
    c7e6:	e7ec      	b.n	c7c2 <sdmmc_read_status+0x52>
	return -EBUSY;
    c7e8:	f06f 000f 	mvn.w	r0, #15
    c7ec:	e7e9      	b.n	c7c2 <sdmmc_read_status+0x52>

0000c7ee <sdmmc_read_csd>:
{
    c7ee:	b530      	push	{r4, r5, lr}
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
    c7f0:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
{
    c7f4:	b085      	sub	sp, #20
    c7f6:	4604      	mov	r4, r0
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
    c7f8:	b36b      	cbz	r3, c856 <sdmmc_read_csd+0x68>
		ret = sdmmc_spi_read_cxd(card, SD_SEND_CSD, csd);
    c7fa:	466a      	mov	r2, sp
    c7fc:	2109      	movs	r1, #9
    c7fe:	f7ff ff89 	bl	c714 <sdmmc_spi_read_cxd>
	if (ret) {
    c802:	b928      	cbnz	r0, c810 <sdmmc_read_csd+0x22>
	csd->cmd_class = (uint16_t)((raw_csd[2U] & 0xFFF00000U) >> 20U);
    c804:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
	switch (csd->csd_structure) {
    c808:	0f92      	lsrs	r2, r2, #30
    c80a:	d003      	beq.n	c814 <sdmmc_read_csd+0x26>
    c80c:	2a01      	cmp	r2, #1
    c80e:	d019      	beq.n	c844 <sdmmc_read_csd+0x56>
}
    c810:	b005      	add	sp, #20
    c812:	bd30      	pop	{r4, r5, pc}
		csd->device_size |= (uint32_t)((raw_csd[1U] & 0xC0000000U) >> 30U);
    c814:	9901      	ldr	r1, [sp, #4]
		csd->device_size = (uint32_t)((raw_csd[2U] & 0x3FFU) << 2U);
    c816:	f640 72fc 	movw	r2, #4092	; 0xffc
	csd->read_blk_len = (uint8_t)((raw_csd[2U] & 0xF0000U) >> 16U);
    c81a:	f3c3 4503 	ubfx	r5, r3, #16, #4
		csd->device_size = (uint32_t)((raw_csd[2U] & 0x3FFU) << 2U);
    c81e:	ea02 0383 	and.w	r3, r2, r3, lsl #2
		csd->device_size |= (uint32_t)((raw_csd[1U] & 0xC0000000U) >> 30U);
    c822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
		csd->dev_size_mul = (uint8_t)((raw_csd[1U] & 0x38000U) >> 15U);
    c826:	f3c1 31c2 	ubfx	r1, r1, #15, #3
		tmp_blk_count = ((csd->device_size + 1U) << (csd->dev_size_mul + 2U));
    c82a:	3301      	adds	r3, #1
    c82c:	3102      	adds	r1, #2
		if (tmp_blk_size != SDMMC_DEFAULT_BLOCK_SIZE) {
    c82e:	2d09      	cmp	r5, #9
		tmp_blk_count = ((csd->device_size + 1U) << (csd->dev_size_mul + 2U));
    c830:	fa03 f301 	lsl.w	r3, r3, r1
		if (tmp_blk_size != SDMMC_DEFAULT_BLOCK_SIZE) {
    c834:	d001      	beq.n	c83a <sdmmc_read_csd+0x4c>
			tmp_blk_count = (tmp_blk_count * tmp_blk_size);
    c836:	40ab      	lsls	r3, r5
			tmp_blk_count = (tmp_blk_count / tmp_blk_size);
    c838:	0a5b      	lsrs	r3, r3, #9
			*blk_count = tmp_blk_count;
    c83a:	66a3      	str	r3, [r4, #104]	; 0x68
			*blk_size = tmp_blk_size;
    c83c:	f44f 7300 	mov.w	r3, #512	; 0x200
    c840:	66e3      	str	r3, [r4, #108]	; 0x6c
	if ((uint8_t)((raw_csd[0U] & 0x1000U) >> 12U)) {
    c842:	e7e5      	b.n	c810 <sdmmc_read_csd+0x22>
		csd->device_size |= (uint32_t)((raw_csd[1U] & 0xFFFF0000U) >> 16U);
    c844:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		csd->device_size = (uint32_t)((raw_csd[2U] & 0x3FU) << 16U);
    c848:	041b      	lsls	r3, r3, #16
    c84a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
		csd->device_size |= (uint32_t)((raw_csd[1U] & 0xFFFF0000U) >> 16U);
    c84e:	4313      	orrs	r3, r2
		tmp_blk_count = ((csd->device_size + 1U) * 1024U);
    c850:	3301      	adds	r3, #1
    c852:	029b      	lsls	r3, r3, #10
    c854:	e7f1      	b.n	c83a <sdmmc_read_csd+0x4c>
		return -ENOTSUP;
    c856:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c85a:	e7d9      	b.n	c810 <sdmmc_read_csd+0x22>

0000c85c <card_read_cid>:
{
    c85c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (card->host_props.is_spi && IS_ENABLED(CONFIG_SDHC_SUPPORTS_SPI_MODE)) {
    c85e:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
    c862:	b133      	cbz	r3, c872 <card_read_cid+0x16>
		ret = sdmmc_spi_read_cxd(card, SD_SEND_CID, cid);
    c864:	466a      	mov	r2, sp
    c866:	210a      	movs	r1, #10
    c868:	f7ff ff54 	bl	c714 <sdmmc_spi_read_cxd>
}
    c86c:	b005      	add	sp, #20
    c86e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENOTSUP;
    c872:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c876:	e7f9      	b.n	c86c <card_read_cid+0x10>

0000c878 <card_read_blocks>:
	return 0;
}

/* Reads data from SD card memory card */
int card_read_blocks(struct sd_card *card, uint8_t *rbuf, uint32_t start_block, uint32_t num_blocks)
{
    c878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c87c:	4614      	mov	r4, r2
    c87e:	461e      	mov	r6, r3
	int ret;
	uint32_t rlen;
	uint32_t sector;
	uint8_t *buf_offset;

	if ((start_block + num_blocks) > card->block_count) {
    c880:	441a      	add	r2, r3
    c882:	6e83      	ldr	r3, [r0, #104]	; 0x68
    c884:	429a      	cmp	r2, r3
{
    c886:	b091      	sub	sp, #68	; 0x44
    c888:	4605      	mov	r5, r0
    c88a:	4689      	mov	r9, r1
	if ((start_block + num_blocks) > card->block_count) {
    c88c:	d846      	bhi.n	c91c <card_read_blocks+0xa4>
		return -EINVAL;
	}
	if (card->type == CARD_SDIO) {
    c88e:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
    c892:	2b01      	cmp	r3, #1
    c894:	d045      	beq.n	c922 <card_read_blocks+0xaa>
		LOG_WRN("SDIO does not support MMC commands");
		return -ENOTSUP;
	}
	ret = k_mutex_lock(&card->lock, K_NO_WAIT);
    c896:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    c89a:	2200      	movs	r2, #0
    c89c:	2300      	movs	r3, #0
    c89e:	4640      	mov	r0, r8
    c8a0:	f7fe f880 	bl	a9a4 <z_impl_k_mutex_lock>
	if (ret) {
    c8a4:	4607      	mov	r7, r0
    c8a6:	2800      	cmp	r0, #0
    c8a8:	d13e      	bne.n	c928 <card_read_blocks+0xb0>
	struct sdhc_command cmd = {0};
    c8aa:	4601      	mov	r1, r0
    c8ac:	2210      	movs	r2, #16
    c8ae:	a809      	add	r0, sp, #36	; 0x24
    c8b0:	f7ff fe1f 	bl	c4f2 <memset>
	cmd.opcode = (num_blocks == 1U) ? SD_READ_SINGLE_BLOCK : SD_READ_MULTIPLE_BLOCK;
    c8b4:	2e01      	cmp	r6, #1
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
    c8b6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	struct sdhc_data data = {0};
    c8b8:	9704      	str	r7, [sp, #16]
	cmd.opcode = (num_blocks == 1U) ? SD_READ_SINGLE_BLOCK : SD_READ_MULTIPLE_BLOCK;
    c8ba:	bf0c      	ite	eq
    c8bc:	2311      	moveq	r3, #17
    c8be:	2312      	movne	r3, #18
    c8c0:	9307      	str	r3, [sp, #28]
		cmd.arg = start_block * card->block_size;
    c8c2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
	data.blocks = num_blocks;
    c8c4:	9603      	str	r6, [sp, #12]
	if (!(card->flags & SD_HIGH_CAPACITY_FLAG)) {
    c8c6:	0797      	lsls	r7, r2, #30
		cmd.arg = start_block * card->block_size;
    c8c8:	bf54      	ite	pl
    c8ca:	fb03 f204 	mulpl.w	r2, r3, r4
		cmd.arg = start_block;
    c8ce:	4622      	movmi	r2, r4
    c8d0:	9208      	str	r2, [sp, #32]
	cmd.response_type = (SD_RSP_TYPE_R1 | SD_SPI_RSP_TYPE_R1);
    c8d2:	2211      	movs	r2, #17
    c8d4:	920d      	str	r2, [sp, #52]	; 0x34
	cmd.retries = CONFIG_SD_DATA_RETRIES;
    c8d6:	20c8      	movs	r0, #200	; 0xc8
    c8d8:	2203      	movs	r2, #3
    c8da:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
	data.block_size = card->block_size;
    c8de:	e9cd 4301 	strd	r4, r3, [sp, #4]
	ret = sdhc_request(card->sdhc, &cmd, &data);
    c8e2:	6828      	ldr	r0, [r5, #0]
	data.data = rbuf;
    c8e4:	f8cd 9014 	str.w	r9, [sp, #20]
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
    c8e8:	f242 7310 	movw	r3, #10000	; 0x2710
	ret = sdhc_request(card->sdhc, &cmd, &data);
    c8ec:	aa01      	add	r2, sp, #4
    c8ee:	a907      	add	r1, sp, #28
	data.timeout_ms = CONFIG_SD_DATA_TIMEOUT;
    c8f0:	9306      	str	r3, [sp, #24]
	ret = sdhc_request(card->sdhc, &cmd, &data);
    c8f2:	f7ff ff01 	bl	c6f8 <sdhc_request>
	if (ret) {
    c8f6:	4604      	mov	r4, r0
    c8f8:	b948      	cbnz	r0, c90e <card_read_blocks+0x96>
	ret = sdmmc_wait_ready(card);
    c8fa:	4628      	mov	r0, r5
    c8fc:	f7f8 fe6e 	bl	55dc <sdmmc_wait_ready>
	if (ret) {
    c900:	4604      	mov	r4, r0
		k_mutex_unlock(&card->lock);
    c902:	4640      	mov	r0, r8
	if (ret) {
    c904:	b124      	cbz	r4, c910 <card_read_blocks+0x98>
		k_mutex_unlock(&card->lock);
    c906:	f7ff ff31 	bl	c76c <k_mutex_unlock.isra.0>
		return -ETIMEDOUT;
    c90a:	f06f 0473 	mvn.w	r4, #115	; 0x73
	} else {
		/* Aligned buffers can be used directly */
		ret = card_read(card, rbuf, start_block, num_blocks);
		if (ret) {
			LOG_ERR("Card read failed");
			k_mutex_unlock(&card->lock);
    c90e:	4640      	mov	r0, r8
    c910:	f7ff ff2c 	bl	c76c <k_mutex_unlock.isra.0>
			return ret;
		}
	}
	k_mutex_unlock(&card->lock);
	return 0;
}
    c914:	4620      	mov	r0, r4
    c916:	b011      	add	sp, #68	; 0x44
    c918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    c91c:	f06f 0415 	mvn.w	r4, #21
    c920:	e7f8      	b.n	c914 <card_read_blocks+0x9c>
		return -ENOTSUP;
    c922:	f06f 0485 	mvn.w	r4, #133	; 0x85
    c926:	e7f5      	b.n	c914 <card_read_blocks+0x9c>
		return -EBUSY;
    c928:	f06f 040f 	mvn.w	r4, #15
    c92c:	e7f2      	b.n	c914 <card_read_blocks+0x9c>

0000c92e <sdhc_request>:
	if (!api->request) {
    c92e:	6883      	ldr	r3, [r0, #8]
    c930:	685b      	ldr	r3, [r3, #4]
    c932:	b103      	cbz	r3, c936 <sdhc_request+0x8>
	return api->request(dev, cmd, data);
    c934:	4718      	bx	r3
}
    c936:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c93a:	4770      	bx	lr

0000c93c <sdhc_set_io>:
	if (!api->set_io) {
    c93c:	6883      	ldr	r3, [r0, #8]
    c93e:	689b      	ldr	r3, [r3, #8]
    c940:	b103      	cbz	r3, c944 <sdhc_set_io+0x8>
	return api->set_io(dev, io);
    c942:	4718      	bx	r3
}
    c944:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c948:	4770      	bx	lr

0000c94a <sdmmc_spi_send_ocr>:
{
    c94a:	b510      	push	{r4, lr}
	cmd.opcode = SD_SPI_READ_OCR;
    c94c:	233a      	movs	r3, #58	; 0x3a
{
    c94e:	b08a      	sub	sp, #40	; 0x28
	cmd.arg = arg;
    c950:	e9cd 3101 	strd	r3, r1, [sp, #4]
{
    c954:	4604      	mov	r4, r0
	cmd.response_type = SD_SPI_RSP_TYPE_R3;
    c956:	2340      	movs	r3, #64	; 0x40
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    c958:	6800      	ldr	r0, [r0, #0]
	cmd.response_type = SD_SPI_RSP_TYPE_R3;
    c95a:	9307      	str	r3, [sp, #28]
	ret = sdhc_request(card->sdhc, &cmd, NULL);
    c95c:	2200      	movs	r2, #0
    c95e:	a901      	add	r1, sp, #4
    c960:	f7ff ffe5 	bl	c92e <sdhc_request>
	if (ret) {
    c964:	b928      	cbnz	r0, c972 <sdmmc_spi_send_ocr+0x28>
	card->ocr = cmd.response[1];
    c966:	9b04      	ldr	r3, [sp, #16]
    c968:	6523      	str	r3, [r4, #80]	; 0x50
		return -ENOTSUP;
    c96a:	2b00      	cmp	r3, #0
    c96c:	bf08      	it	eq
    c96e:	f06f 0085 	mvneq.w	r0, #133	; 0x85
}
    c972:	b00a      	add	sp, #40	; 0x28
    c974:	bd10      	pop	{r4, pc}

0000c976 <sdmmc_read_blocks>:
}

int sdmmc_read_blocks(struct sd_card *card, uint8_t *rbuf,
	uint32_t start_block, uint32_t num_blocks)
{
	return card_read_blocks(card, rbuf, start_block, num_blocks);
    c976:	f7ff bf7f 	b.w	c878 <card_read_blocks>

0000c97a <ep_ctx_reset>:
{
    c97a:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    c97c:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    c97e:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    c982:	2300      	movs	r3, #0
    c984:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    c986:	7f83      	ldrb	r3, [r0, #30]
{
    c988:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    c98a:	b113      	cbz	r3, c992 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    c98c:	7a40      	ldrb	r0, [r0, #9]
    c98e:	f001 f87c 	bl	da8a <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    c992:	2301      	movs	r3, #1
    c994:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    c996:	2300      	movs	r3, #0
    c998:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    c99a:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    c99c:	77a3      	strb	r3, [r4, #30]
}
    c99e:	bd10      	pop	{r4, pc}

0000c9a0 <k_mutex_lock.constprop.0.isra.0>:
    c9a0:	f7fe b800 	b.w	a9a4 <z_impl_k_mutex_lock>

0000c9a4 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    c9a4:	f7fe b878 	b.w	aa98 <z_impl_k_mutex_unlock>

0000c9a8 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    c9a8:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    c9aa:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    c9ac:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    c9b0:	b921      	cbnz	r1, c9bc <usb_dc_ep_check_cap+0x14>
    c9b2:	3a00      	subs	r2, #0
    c9b4:	bf18      	it	ne
    c9b6:	2201      	movne	r2, #1
    c9b8:	4250      	negs	r0, r2
    c9ba:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    c9bc:	2a08      	cmp	r2, #8
    c9be:	d806      	bhi.n	c9ce <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    c9c0:	2901      	cmp	r1, #1
    c9c2:	d107      	bne.n	c9d4 <usb_dc_ep_check_cap+0x2c>
    c9c4:	f083 0008 	eor.w	r0, r3, #8
    c9c8:	f340 00c0 	sbfx	r0, r0, #3, #1
    c9cc:	4770      	bx	lr
		return -1;
    c9ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c9d2:	4770      	bx	lr
	return 0;
    c9d4:	2000      	movs	r0, #0
}
    c9d6:	4770      	bx	lr

0000c9d8 <usb_dc_ep_disable>:
{
    c9d8:	b538      	push	{r3, r4, r5, lr}
    c9da:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    c9dc:	f7f8 ffd4 	bl	5988 <endpoint_ctx>
	if (!ep_ctx) {
    c9e0:	4605      	mov	r5, r0
    c9e2:	b160      	cbz	r0, c9fe <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    c9e4:	7a03      	ldrb	r3, [r0, #8]
    c9e6:	b16b      	cbz	r3, ca04 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    c9e8:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    c9ea:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    c9ec:	f7fd fcb8 	bl	a360 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    c9f0:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    c9f2:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    c9f4:	f7ff ffc1 	bl	c97a <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    c9f8:	722c      	strb	r4, [r5, #8]
	return 0;
    c9fa:	4620      	mov	r0, r4
}
    c9fc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    c9fe:	f06f 0015 	mvn.w	r0, #21
    ca02:	e7fb      	b.n	c9fc <usb_dc_ep_disable+0x24>
		return -EALREADY;
    ca04:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ca08:	e7f8      	b.n	c9fc <usb_dc_ep_disable+0x24>

0000ca0a <usb_dc_ep_read>:
{
    ca0a:	b570      	push	{r4, r5, r6, lr}
    ca0c:	4604      	mov	r4, r0
    ca0e:	460e      	mov	r6, r1
    ca10:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    ca12:	f7f9 fc9b 	bl	634c <usb_dc_ep_read_wait>
	if (ret) {
    ca16:	b930      	cbnz	r0, ca26 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    ca18:	b906      	cbnz	r6, ca1c <usb_dc_ep_read+0x12>
    ca1a:	b125      	cbz	r5, ca26 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    ca1c:	4620      	mov	r0, r4
}
    ca1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    ca22:	f7f9 bcdb 	b.w	63dc <usb_dc_ep_read_continue>
}
    ca26:	bd70      	pop	{r4, r5, r6, pc}

0000ca28 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    ca28:	6903      	ldr	r3, [r0, #16]
    ca2a:	b2c9      	uxtb	r1, r1
    ca2c:	220c      	movs	r2, #12
    ca2e:	fb01 3302 	mla	r3, r1, r2, r3
    ca32:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    ca34:	f000 0007 	and.w	r0, r0, #7
    ca38:	4770      	bx	lr

0000ca3a <set_on_state>:
	__asm__ volatile(
    ca3a:	f04f 0320 	mov.w	r3, #32
    ca3e:	f3ef 8211 	mrs	r2, BASEPRI
    ca42:	f383 8812 	msr	BASEPRI_MAX, r3
    ca46:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    ca4a:	6803      	ldr	r3, [r0, #0]
    ca4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ca50:	f043 0302 	orr.w	r3, r3, #2
    ca54:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    ca56:	f382 8811 	msr	BASEPRI, r2
    ca5a:	f3bf 8f6f 	isb	sy
}
    ca5e:	4770      	bx	lr

0000ca60 <stop>:
{
    ca60:	b570      	push	{r4, r5, r6, lr}
    ca62:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    ca64:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    ca66:	f04f 0420 	mov.w	r4, #32
    ca6a:	f3ef 8511 	mrs	r5, BASEPRI
    ca6e:	f384 8812 	msr	BASEPRI_MAX, r4
    ca72:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ca76:	260c      	movs	r6, #12
    ca78:	fb06 3401 	mla	r4, r6, r1, r3
    ca7c:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    ca7e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    ca82:	d008      	beq.n	ca96 <stop+0x36>
    ca84:	42a2      	cmp	r2, r4
    ca86:	d006      	beq.n	ca96 <stop+0x36>
	__asm__ volatile(
    ca88:	f385 8811 	msr	BASEPRI, r5
    ca8c:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    ca90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    ca94:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    ca96:	fb06 3301 	mla	r3, r6, r1, r3
    ca9a:	2201      	movs	r2, #1
    ca9c:	641a      	str	r2, [r3, #64]	; 0x40
    ca9e:	f385 8811 	msr	BASEPRI, r5
    caa2:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    caa6:	6843      	ldr	r3, [r0, #4]
    caa8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    caac:	685b      	ldr	r3, [r3, #4]
    caae:	4798      	blx	r3
	return 0;
    cab0:	2000      	movs	r0, #0
    cab2:	e7ef      	b.n	ca94 <stop+0x34>

0000cab4 <api_stop>:
	return stop(dev, subsys, CTX_API);
    cab4:	2280      	movs	r2, #128	; 0x80
    cab6:	f7ff bfd3 	b.w	ca60 <stop>

0000caba <async_start>:
{
    caba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cabc:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    cabe:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    cac0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    cac2:	f04f 0520 	mov.w	r5, #32
    cac6:	f3ef 8611 	mrs	r6, BASEPRI
    caca:	f385 8812 	msr	BASEPRI_MAX, r5
    cace:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    cad2:	250c      	movs	r5, #12
    cad4:	fb05 4401 	mla	r4, r5, r1, r4
    cad8:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    cada:	f005 0c07 	and.w	ip, r5, #7
    cade:	f1bc 0f01 	cmp.w	ip, #1
    cae2:	d10c      	bne.n	cafe <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    cae4:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    cae6:	f386 8811 	msr	BASEPRI, r6
    caea:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    caee:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    caf2:	6843      	ldr	r3, [r0, #4]
    caf4:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    caf8:	4798      	blx	r3
	return 0;
    cafa:	2000      	movs	r0, #0
}
    cafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    cafe:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    cb02:	42af      	cmp	r7, r5
    cb04:	f386 8811 	msr	BASEPRI, r6
    cb08:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    cb0c:	bf0c      	ite	eq
    cb0e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    cb12:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    cb16:	e7f1      	b.n	cafc <async_start+0x42>

0000cb18 <api_start>:
{
    cb18:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    cb1a:	2480      	movs	r4, #128	; 0x80
    cb1c:	9400      	str	r4, [sp, #0]
    cb1e:	f7ff ffcc 	bl	caba <async_start>
}
    cb22:	b002      	add	sp, #8
    cb24:	bd10      	pop	{r4, pc}

0000cb26 <onoff_started_callback>:
{
    cb26:	b410      	push	{r4}
	return &data->mgr[type];
    cb28:	6900      	ldr	r0, [r0, #16]
    cb2a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    cb2c:	241c      	movs	r4, #28
    cb2e:	fb03 0004 	mla	r0, r3, r4, r0
    cb32:	2100      	movs	r1, #0
}
    cb34:	bc10      	pop	{r4}
	notify(mgr, 0);
    cb36:	4710      	bx	r2

0000cb38 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    cb38:	2000      	movs	r0, #0
    cb3a:	f000 bd63 	b.w	d604 <nrfx_clock_start>

0000cb3e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    cb3e:	2000      	movs	r0, #0
    cb40:	f000 bd9c 	b.w	d67c <nrfx_clock_stop>

0000cb44 <blocking_start_callback>:
{
    cb44:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    cb46:	f7fe b817 	b.w	ab78 <z_impl_k_sem_give>

0000cb4a <atomic_or>:
{
    cb4a:	b510      	push	{r4, lr}
    cb4c:	4603      	mov	r3, r0
}
    cb4e:	f3bf 8f5b 	dmb	ish
    cb52:	e853 0f00 	ldrex	r0, [r3]
    cb56:	ea40 0201 	orr.w	r2, r0, r1
    cb5a:	e843 2400 	strex	r4, r2, [r3]
    cb5e:	2c00      	cmp	r4, #0
    cb60:	d1f7      	bne.n	cb52 <atomic_or+0x8>
    cb62:	f3bf 8f5b 	dmb	ish
    cb66:	bd10      	pop	{r4, pc}

0000cb68 <console_out>:
	if ('\n' == c) {
    cb68:	280a      	cmp	r0, #10
{
    cb6a:	b510      	push	{r4, lr}
    cb6c:	4604      	mov	r4, r0
	if ('\n' == c) {
    cb6e:	d102      	bne.n	cb76 <console_out+0xe>
		uart_poll_out(uart_console_dev, '\r');
    cb70:	200d      	movs	r0, #13
    cb72:	f7f9 fe23 	bl	67bc <uart_poll_out.constprop.0>
	uart_poll_out(uart_console_dev, c);
    cb76:	b2e0      	uxtb	r0, r4
    cb78:	f7f9 fe20 	bl	67bc <uart_poll_out.constprop.0>
}
    cb7c:	4620      	mov	r0, r4
    cb7e:	bd10      	pop	{r4, pc}

0000cb80 <i2c_write_dt.isra.0>:
 * @param buf Memory pool from which the data is transferred.
 * @param num_bytes Number of bytes to write.
 *
 * @return a value from i2c_write()
 */
static inline int i2c_write_dt(const struct i2c_dt_spec *spec,
    cb80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cb82:	4603      	mov	r3, r0
	msg.len = num_bytes;
    cb84:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    cb88:	2202      	movs	r2, #2
			       const uint8_t *buf, uint32_t num_bytes)
{
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
    cb8a:	6800      	ldr	r0, [r0, #0]
    cb8c:	889b      	ldrh	r3, [r3, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    cb8e:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    cb92:	6882      	ldr	r2, [r0, #8]
    cb94:	a901      	add	r1, sp, #4
    cb96:	6894      	ldr	r4, [r2, #8]
    cb98:	2201      	movs	r2, #1
    cb9a:	47a0      	blx	r4
}
    cb9c:	b004      	add	sp, #16
    cb9e:	bd10      	pop	{r4, pc}

0000cba0 <sendCommand.isra.0>:
static void sendCommand(const struct device *dev, uint8_t cmd)
    cba0:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmd_buf[2] = {0};
    cba2:	2300      	movs	r3, #0
    cba4:	f8ad 3004 	strh.w	r3, [sp, #4]
	i2c_write_dt(&config->bus, cmd_buf, 2);
    cba8:	2202      	movs	r2, #2
	cmd_buf[1] = cmd;
    cbaa:	f88d 1005 	strb.w	r1, [sp, #5]
	i2c_write_dt(&config->bus, cmd_buf, 2);
    cbae:	a901      	add	r1, sp, #4
    cbb0:	f7ff ffe6 	bl	cb80 <i2c_write_dt.isra.0>
}
    cbb4:	b003      	add	sp, #12
    cbb6:	f85d fb04 	ldr.w	pc, [sp], #4

0000cbba <setContrast>:
{
	sendCommand(dev, DISP_OFF);
}

static void setContrast(const struct device *dev, uint8_t contrast)
{
    cbba:	b538      	push	{r3, r4, r5, lr}
    cbbc:	4604      	mov	r4, r0
    cbbe:	460d      	mov	r5, r1
	sendCommand(dev, CONTRAST_CTRL_MODE);
    cbc0:	6840      	ldr	r0, [r0, #4]
    cbc2:	2181      	movs	r1, #129	; 0x81
    cbc4:	f7ff ffec 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, contrast);
    cbc8:	6860      	ldr	r0, [r4, #4]
    cbca:	4629      	mov	r1, r5
}
    cbcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sendCommand(dev, contrast);
    cbd0:	f7ff bfe6 	b.w	cba0 <sendCommand.isra.0>

0000cbd4 <displayOff>:
	sendCommand(dev, DISP_OFF);
    cbd4:	6840      	ldr	r0, [r0, #4]
    cbd6:	21ae      	movs	r1, #174	; 0xae
    cbd8:	f7ff bfe2 	b.w	cba0 <sendCommand.isra.0>

0000cbdc <displayOn>:
	sendCommand(dev, DISP_ON);
    cbdc:	6840      	ldr	r0, [r0, #4]
    cbde:	21af      	movs	r1, #175	; 0xaf
    cbe0:	f7ff bfde 	b.w	cba0 <sendCommand.isra.0>

0000cbe4 <setLineAddress>:
	sendCommand(dev, 0x40 | Address);
    cbe4:	6840      	ldr	r0, [r0, #4]
    cbe6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    cbea:	f7ff bfd9 	b.w	cba0 <sendCommand.isra.0>

0000cbee <sh1106_init>:
	}
	i2c_write_dt(&config->bus, temp_buff, 129);
}

static int sh1106_init(const struct device *dev)
{
    cbee:	b538      	push	{r3, r4, r5, lr}
	const sh1106_config_t *config = dev->config;
    cbf0:	6845      	ldr	r5, [r0, #4]
{
    cbf2:	4604      	mov	r4, r0
	if (!device_is_ready(config->bus.bus)) {
    cbf4:	6828      	ldr	r0, [r5, #0]
    cbf6:	f000 ff58 	bl	daaa <z_device_is_ready>
    cbfa:	b918      	cbnz	r0, cc04 <sh1106_init+0x16>
		LOG_ERR("I2C device is not ready\n");
		return -1;
    cbfc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	setLineAddress(dev, 0);
	setPageMode(dev);
	setChargePump(dev);

	return 0;
}
    cc00:	4628      	mov	r0, r5
    cc02:	bd38      	pop	{r3, r4, r5, pc}
	if (i2c_configure(config->bus.bus, config->i2c_cfg)) {
    cc04:	6828      	ldr	r0, [r5, #0]
    cc06:	68a9      	ldr	r1, [r5, #8]
	return api->configure(dev, dev_config);
    cc08:	6883      	ldr	r3, [r0, #8]
    cc0a:	681b      	ldr	r3, [r3, #0]
    cc0c:	4798      	blx	r3
    cc0e:	4605      	mov	r5, r0
    cc10:	2800      	cmp	r0, #0
    cc12:	d1f3      	bne.n	cbfc <sh1106_init+0xe>
	sendCommand(dev, NORM_MODE);
    cc14:	6860      	ldr	r0, [r4, #4]
    cc16:	21a6      	movs	r1, #166	; 0xa6
    cc18:	f7ff ffc2 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, CMD_ROL);        // Rotate 90 degrees
    cc1c:	6860      	ldr	r0, [r4, #4]
    cc1e:	21a1      	movs	r1, #161	; 0xa1
    cc20:	f7ff ffbe 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, CMD_SCAN_COM63); // start scan from COM63 to COM0
    cc24:	6860      	ldr	r0, [r4, #4]
    cc26:	21c8      	movs	r1, #200	; 0xc8
    cc28:	f7ff ffba 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, 0x40 | Address);
    cc2c:	6860      	ldr	r0, [r4, #4]
    cc2e:	2140      	movs	r1, #64	; 0x40
    cc30:	f7ff ffb6 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, 0x20);
    cc34:	6860      	ldr	r0, [r4, #4]
    cc36:	2120      	movs	r1, #32
    cc38:	f7ff ffb2 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, PAGE_ADDRESSING_MODE);
    cc3c:	6860      	ldr	r0, [r4, #4]
    cc3e:	2102      	movs	r1, #2
    cc40:	f7ff ffae 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, 0x8d);
    cc44:	6860      	ldr	r0, [r4, #4]
    cc46:	218d      	movs	r1, #141	; 0x8d
    cc48:	f7ff ffaa 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, 0x14);
    cc4c:	6860      	ldr	r0, [r4, #4]
    cc4e:	2114      	movs	r1, #20
    cc50:	f7ff ffa6 	bl	cba0 <sendCommand.isra.0>
}
    cc54:	e7d4      	b.n	cc00 <sh1106_init+0x12>

0000cc56 <updatePage>:
{
    cc56:	b570      	push	{r4, r5, r6, lr}
    cc58:	460d      	mov	r5, r1
	const sh1106_config_t *config = dev->config;
    cc5a:	6846      	ldr	r6, [r0, #4]
	sendCommand(dev, 0xB0 + (y >> 3));
    cc5c:	f001 011f 	and.w	r1, r1, #31
{
    cc60:	4604      	mov	r4, r0
	sendCommand(dev, 0xB0 + (y >> 3));
    cc62:	3950      	subs	r1, #80	; 0x50
{
    cc64:	b0a2      	sub	sp, #136	; 0x88
	sendCommand(dev, 0xB0 + (y >> 3));
    cc66:	b2c9      	uxtb	r1, r1
    cc68:	4630      	mov	r0, r6
    cc6a:	f7ff ff99 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, (x & 0x0F));
    cc6e:	6860      	ldr	r0, [r4, #4]
    cc70:	2102      	movs	r1, #2
    cc72:	f7ff ff95 	bl	cba0 <sendCommand.isra.0>
	sendCommand(dev, 0x10 + (x >> 4));
    cc76:	6860      	ldr	r0, [r4, #4]
    cc78:	2110      	movs	r1, #16
    cc7a:	f7ff ff91 	bl	cba0 <sendCommand.isra.0>
	uint8_t temp_buff[129] = {0};
    cc7e:	2100      	movs	r1, #0
    cc80:	227d      	movs	r2, #125	; 0x7d
    cc82:	a802      	add	r0, sp, #8
    cc84:	9101      	str	r1, [sp, #4]
    cc86:	f7ff fc34 	bl	c4f2 <memset>
		temp_buff[col + 1] = FRAME_BUFFER[page][col];
    cc8a:	6921      	ldr	r1, [r4, #16]
	temp_buff[0] = TYPE_DATA;
    cc8c:	2340      	movs	r3, #64	; 0x40
		temp_buff[col + 1] = FRAME_BUFFER[page][col];
    cc8e:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
    cc92:	a801      	add	r0, sp, #4
	temp_buff[0] = TYPE_DATA;
    cc94:	f88d 3004 	strb.w	r3, [sp, #4]
	for (uint8_t col = 0; col < 128; col++) {
    cc98:	1e4a      	subs	r2, r1, #1
    cc9a:	f101 037f 	add.w	r3, r1, #127	; 0x7f
    cc9e:	4601      	mov	r1, r0
		temp_buff[col + 1] = FRAME_BUFFER[page][col];
    cca0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
    cca4:	f800 4f01 	strb.w	r4, [r0, #1]!
	for (uint8_t col = 0; col < 128; col++) {
    cca8:	429a      	cmp	r2, r3
    ccaa:	d1f9      	bne.n	cca0 <updatePage+0x4a>
	i2c_write_dt(&config->bus, temp_buff, 129);
    ccac:	2281      	movs	r2, #129	; 0x81
    ccae:	4630      	mov	r0, r6
    ccb0:	f7ff ff66 	bl	cb80 <i2c_write_dt.isra.0>
}
    ccb4:	b022      	add	sp, #136	; 0x88
    ccb6:	bd70      	pop	{r4, r5, r6, pc}

0000ccb8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ccb8:	6843      	ldr	r3, [r0, #4]
    ccba:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    ccbc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    ccc0:	600b      	str	r3, [r1, #0]
}
    ccc2:	2000      	movs	r0, #0
    ccc4:	4770      	bx	lr

0000ccc6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ccc6:	6843      	ldr	r3, [r0, #4]
    ccc8:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    ccca:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    ccce:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    ccd2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    ccd6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    ccda:	2000      	movs	r0, #0
    ccdc:	4770      	bx	lr

0000ccde <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ccde:	6843      	ldr	r3, [r0, #4]
    cce0:	685b      	ldr	r3, [r3, #4]
}
    cce2:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    cce4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    cce8:	4770      	bx	lr

0000ccea <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ccea:	6843      	ldr	r3, [r0, #4]
    ccec:	685b      	ldr	r3, [r3, #4]
}
    ccee:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    ccf0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    ccf4:	4770      	bx	lr

0000ccf6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ccf6:	6843      	ldr	r3, [r0, #4]
    ccf8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    ccfa:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    ccfe:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    cd02:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    cd04:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    cd08:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    cd0c:	2000      	movs	r0, #0
    cd0e:	4770      	bx	lr

0000cd10 <gpio_nrfx_manage_callback>:
{
    cd10:	b510      	push	{r4, lr}
	return port->data;
    cd12:	6903      	ldr	r3, [r0, #16]
	return list->head;
    cd14:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    cd16:	b1f8      	cbz	r0, cd58 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cd18:	4288      	cmp	r0, r1
    cd1a:	d119      	bne.n	cd50 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    cd1c:	689c      	ldr	r4, [r3, #8]
	return node->next;
    cd1e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    cd20:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    cd22:	42a1      	cmp	r1, r4
    cd24:	d100      	bne.n	cd28 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    cd26:	6098      	str	r0, [r3, #8]
	parent->next = child;
    cd28:	2000      	movs	r0, #0
    cd2a:	6008      	str	r0, [r1, #0]
	if (set) {
    cd2c:	b12a      	cbz	r2, cd3a <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    cd2e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    cd30:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    cd32:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    cd34:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    cd36:	b902      	cbnz	r2, cd3a <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    cd38:	6099      	str	r1, [r3, #8]
	return 0;
    cd3a:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    cd3c:	e010      	b.n	cd60 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cd3e:	4281      	cmp	r1, r0
    cd40:	d106      	bne.n	cd50 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    cd42:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    cd44:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    cd46:	6898      	ldr	r0, [r3, #8]
    cd48:	4281      	cmp	r1, r0
    cd4a:	d1ed      	bne.n	cd28 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    cd4c:	609c      	str	r4, [r3, #8]
}
    cd4e:	e7eb      	b.n	cd28 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    cd50:	4604      	mov	r4, r0
    cd52:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cd54:	2800      	cmp	r0, #0
    cd56:	d1f2      	bne.n	cd3e <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    cd58:	2a00      	cmp	r2, #0
    cd5a:	d1e8      	bne.n	cd2e <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    cd5c:	f06f 0015 	mvn.w	r0, #21
}
    cd60:	bd10      	pop	{r4, pc}

0000cd62 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    cd62:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    cd64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    cd68:	2908      	cmp	r1, #8
    cd6a:	6e13      	ldr	r3, [r2, #96]	; 0x60
    cd6c:	6e52      	ldr	r2, [r2, #100]	; 0x64
    cd6e:	bf28      	it	cs
    cd70:	2108      	movcs	r1, #8
    cd72:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    cd74:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    cd76:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    cd78:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    cd7a:	460a      	mov	r2, r1
    cd7c:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    cd7e:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    cd80:	f7ff fbac 	bl	c4dc <memcpy>

	return length;
}
    cd84:	4620      	mov	r0, r4
    cd86:	b002      	add	sp, #8
    cd88:	bd10      	pop	{r4, pc}

0000cd8a <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    cd8a:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
    cd8c:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    cd8e:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    cd90:	d405      	bmi.n	cd9e <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    cd92:	f3c1 0242 	ubfx	r2, r1, #1, #3
    cd96:	2a01      	cmp	r2, #1
    cd98:	d004      	beq.n	cda4 <i2c_nrfx_twi_configure+0x1a>
    cd9a:	2a02      	cmp	r2, #2
    cd9c:	d00a      	beq.n	cdb4 <i2c_nrfx_twi_configure+0x2a>
    cd9e:	f06f 0015 	mvn.w	r0, #21
}
    cda2:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    cda4:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    cda6:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    cdaa:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
    cdae:	6241      	str	r1, [r0, #36]	; 0x24
	return 0;
    cdb0:	2000      	movs	r0, #0
    cdb2:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    cdb4:	681b      	ldr	r3, [r3, #0]
    cdb6:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    cdba:	e7f6      	b.n	cdaa <i2c_nrfx_twi_configure+0x20>

0000cdbc <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    cdbc:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    cdbe:	6843      	ldr	r3, [r0, #4]
    cdc0:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    cdc2:	7a05      	ldrb	r5, [r0, #8]
    cdc4:	6844      	ldr	r4, [r0, #4]
    cdc6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    cdca:	42a3      	cmp	r3, r4
    cdcc:	d302      	bcc.n	cdd4 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    cdce:	f06f 0001 	mvn.w	r0, #1
}
    cdd2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    cdd4:	795c      	ldrb	r4, [r3, #5]
    cdd6:	428c      	cmp	r4, r1
    cdd8:	d001      	beq.n	cdde <pinctrl_lookup_state+0x22>
		(*state)++;
    cdda:	3308      	adds	r3, #8
    cddc:	e7f0      	b.n	cdc0 <pinctrl_lookup_state+0x4>
			return 0;
    cdde:	2000      	movs	r0, #0
    cde0:	e7f7      	b.n	cdd2 <pinctrl_lookup_state+0x16>

0000cde2 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
    cde2:	4603      	mov	r3, r0
    cde4:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    cde6:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    cde8:	7919      	ldrb	r1, [r3, #4]
    cdea:	2301      	movs	r3, #1
    cdec:	fa03 f101 	lsl.w	r1, r3, r1
    cdf0:	6903      	ldr	r3, [r0, #16]
    cdf2:	681b      	ldr	r3, [r3, #0]
    cdf4:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    cdf6:	bf18      	it	ne
    cdf8:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    cdfc:	b112      	cbz	r2, ce04 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
    cdfe:	6883      	ldr	r3, [r0, #8]
    ce00:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    ce02:	4718      	bx	r3
    ce04:	6883      	ldr	r3, [r0, #8]
    ce06:	691b      	ldr	r3, [r3, #16]
    ce08:	e7fb      	b.n	ce02 <gpio_pin_set_dt+0x20>

0000ce0a <spi_transceive>:

extern int z_impl_spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs);

__pinned_func
static inline int spi_transceive(const struct device * dev, const struct spi_config * config, const struct spi_buf_set * tx_bufs, const struct spi_buf_set * rx_bufs)
{
    ce0a:	b410      	push	{r4}
	ret = api->transceive(dev, config, tx_bufs, rx_bufs);
    ce0c:	6884      	ldr	r4, [r0, #8]
    ce0e:	6824      	ldr	r4, [r4, #0]
    ce10:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_SPI_TRANSCEIVE);
	}
#endif
	compiler_barrier();
	return z_impl_spi_transceive(dev, config, tx_bufs, rx_bufs);
}
    ce12:	bc10      	pop	{r4}
    ce14:	4760      	bx	ip

0000ce16 <sdhc_spi_card_busy>:
{
    ce16:	b507      	push	{r0, r1, r2, lr}
	ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg, &response, 1);
    ce18:	6901      	ldr	r1, [r0, #16]
    ce1a:	6840      	ldr	r0, [r0, #4]
    ce1c:	6849      	ldr	r1, [r1, #4]
    ce1e:	6800      	ldr	r0, [r0, #0]
    ce20:	2301      	movs	r3, #1
    ce22:	f10d 0207 	add.w	r2, sp, #7
    ce26:	f7fa fa35 	bl	7294 <sdhc_spi_rx>
	if (ret) {
    ce2a:	b938      	cbnz	r0, ce3c <sdhc_spi_card_busy+0x26>
	if (response == 0xFF) {
    ce2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ce30:	38ff      	subs	r0, #255	; 0xff
    ce32:	bf18      	it	ne
    ce34:	2001      	movne	r0, #1
}
    ce36:	b003      	add	sp, #12
    ce38:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EIO;
    ce3c:	f06f 0004 	mvn.w	r0, #4
    ce40:	e7f9      	b.n	ce36 <sdhc_spi_card_busy+0x20>

0000ce42 <sdhc_spi_get_card_present>:
}
    ce42:	2001      	movs	r0, #1
    ce44:	4770      	bx	lr

0000ce46 <sdhc_spi_init>:

static int sdhc_spi_init(const struct device *dev)
{
    ce46:	b510      	push	{r4, lr}
	const struct sdhc_spi_config *cfg = dev->config;
	struct sdhc_spi_data *data = dev->data;

	if (!device_is_ready(cfg->spi_dev)) {
    ce48:	6843      	ldr	r3, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
    ce4a:	6904      	ldr	r4, [r0, #16]
	if (!device_is_ready(cfg->spi_dev)) {
    ce4c:	6818      	ldr	r0, [r3, #0]
    ce4e:	f000 fe2c 	bl	daaa <z_device_is_ready>
    ce52:	b138      	cbz	r0, ce64 <sdhc_spi_init+0x1e>
		return -ENODEV;
	}
	data->power_mode = SDHC_POWER_OFF;
    ce54:	4623      	mov	r3, r4
    ce56:	2201      	movs	r2, #1
    ce58:	f803 2b08 	strb.w	r2, [r3], #8
	data->spi_cfg = &data->cfg_a;
	data->spi_cfg->frequency = 0;
    ce5c:	2000      	movs	r0, #0
	data->spi_cfg = &data->cfg_a;
    ce5e:	6063      	str	r3, [r4, #4]
	data->spi_cfg->frequency = 0;
    ce60:	60a0      	str	r0, [r4, #8]
	return 0;
}
    ce62:	bd10      	pop	{r4, pc}
		return -ENODEV;
    ce64:	f06f 0012 	mvn.w	r0, #18
    ce68:	e7fb      	b.n	ce62 <sdhc_spi_init+0x1c>

0000ce6a <sdhc_spi_wait_unbusy>:
{
    ce6a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
			return (uint32_t)((t * to_hz + off) / from_hz);
    ce6e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    ce72:	fb82 2505 	smull	r2, r5, r2, r5
    ce76:	0bd4      	lsrs	r4, r2, #15
    ce78:	ea44 4445 	orr.w	r4, r4, r5, lsl #17
			return ((t * to_hz + off) / from_hz);
    ce7c:	f425 45ff 	bic.w	r5, r5, #32640	; 0x7f80
    ce80:	f240 33e7 	movw	r3, #999	; 0x3e7
	const struct sdhc_spi_config *config = dev->config;
    ce84:	6847      	ldr	r7, [r0, #4]
	struct sdhc_spi_data *data = dev->data;
    ce86:	f8d0 8010 	ldr.w	r8, [r0, #16]
    ce8a:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    ce8e:	03e0      	lsls	r0, r4, #15
    ce90:	18c0      	adds	r0, r0, r3
    ce92:	ea45 4554 	orr.w	r5, r5, r4, lsr #17
{
    ce96:	460e      	mov	r6, r1
    ce98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ce9c:	f145 0100 	adc.w	r1, r5, #0
    cea0:	2300      	movs	r3, #0
    cea2:	f7f4 ffc9 	bl	1e38 <__aeabi_uldivmod>
    cea6:	4605      	mov	r5, r0
    cea8:	4689      	mov	r9, r1
	while (timeout_ms > 0) {
    ceaa:	2e00      	cmp	r6, #0
    ceac:	dc04      	bgt.n	ceb8 <sdhc_spi_wait_unbusy+0x4e>
	return -ETIMEDOUT;
    ceae:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
    ceb2:	b003      	add	sp, #12
    ceb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = sdhc_spi_rx(config->spi_dev, data->spi_cfg, &response, 1);
    ceb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cebc:	6838      	ldr	r0, [r7, #0]
    cebe:	2301      	movs	r3, #1
    cec0:	f10d 0207 	add.w	r2, sp, #7
    cec4:	f7fa f9e6 	bl	7294 <sdhc_spi_rx>
		if (ret) {
    cec8:	2800      	cmp	r0, #0
    ceca:	d1f2      	bne.n	ceb2 <sdhc_spi_wait_unbusy+0x48>
		if (response == 0xFF) {
    cecc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ced0:	2bff      	cmp	r3, #255	; 0xff
    ced2:	d0ee      	beq.n	ceb2 <sdhc_spi_wait_unbusy+0x48>
	return z_impl_k_sleep(timeout);
    ced4:	4628      	mov	r0, r5
    ced6:	4649      	mov	r1, r9
    ced8:	f7fe fad2 	bl	b480 <z_impl_k_sleep>
		timeout_ms -= k_ticks_to_ms_floor32(interval_ticks);
    cedc:	1b36      	subs	r6, r6, r4
    cede:	e7e4      	b.n	ceaa <sdhc_spi_wait_unbusy+0x40>

0000cee0 <sdhc_spi_send_cmd>:
{
    cee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct sdhc_spi_data *dev_data = dev->data;
    cee4:	6904      	ldr	r4, [r0, #16]
	const struct sdhc_spi_config *config = dev->config;
    cee6:	6846      	ldr	r6, [r0, #4]
	const struct spi_buf_set buf_set = {
    cee8:	f8cd d008 	str.w	sp, [sp, #8]
    ceec:	2301      	movs	r3, #1
		bufs[0].len = SD_SPI_CMD_SIZE + 3;
    ceee:	2a00      	cmp	r2, #0
{
    cef0:	460d      	mov	r5, r1
	const struct spi_buf_set buf_set = {
    cef2:	9303      	str	r3, [sp, #12]
	memset(dev_data->scratch, 0xFF, sizeof(dev_data->scratch));
    cef4:	f04f 0215 	mov.w	r2, #21
		bufs[0].len = SD_SPI_CMD_SIZE + 3;
    cef8:	bf0c      	ite	eq
    cefa:	2315      	moveq	r3, #21
    cefc:	2309      	movne	r3, #9
	memset(dev_data->scratch, 0xFF, sizeof(dev_data->scratch));
    cefe:	21ff      	movs	r1, #255	; 0xff
{
    cf00:	4681      	mov	r9, r0
			.buf = dev_data->scratch,
    cf02:	f104 0030 	add.w	r0, r4, #48	; 0x30
    cf06:	9301      	str	r3, [sp, #4]
	struct spi_buf bufs[] = {
    cf08:	9000      	str	r0, [sp, #0]
	memset(dev_data->scratch, 0xFF, sizeof(dev_data->scratch));
    cf0a:	f7ff faf2 	bl	c4f2 <memset>
	cmd_buf[0] = (cmd->opcode & SD_SPI_CMD);
    cf0e:	682b      	ldr	r3, [r5, #0]
    cf10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	cmd_buf[0] = ((cmd_buf[0] | SD_SPI_TX) & ~SD_SPI_START);
    cf14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cf18:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	sys_put_be32(cmd->arg, &cmd_buf[1]);
    cf1c:	686b      	ldr	r3, [r5, #4]
	dst[1] = val;
    cf1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	sys_put_be16(val >> 16, dst);
    cf22:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
    cf24:	0e19      	lsrs	r1, r3, #24
	dst[1] = val;
    cf26:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	dst[0] = val >> 8;
    cf2a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    cf2e:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    cf32:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
	cmd_buf[SD_SPI_CMD_BODY_SIZE] = crc7_be(0, cmd_buf, SD_SPI_CMD_BODY_SIZE) | 0x1;
    cf36:	f104 0131 	add.w	r1, r4, #49	; 0x31
    cf3a:	2205      	movs	r2, #5
    cf3c:	2000      	movs	r0, #0
    cf3e:	f7ff f88f 	bl	c060 <crc7_be>
    cf42:	f040 0001 	orr.w	r0, r0, #1
    cf46:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
	err = spi_transceive(config->spi_dev, dev_data->spi_cfg, &buf_set, &buf_set);
    cf4a:	ab02      	add	r3, sp, #8
    cf4c:	6861      	ldr	r1, [r4, #4]
    cf4e:	6830      	ldr	r0, [r6, #0]
    cf50:	461a      	mov	r2, r3
    cf52:	f7ff ff5a 	bl	ce0a <spi_transceive>
	if (err != 0) {
    cf56:	4604      	mov	r4, r0
    cf58:	2800      	cmp	r0, #0
    cf5a:	d147      	bne.n	cfec <sdhc_spi_send_cmd+0x10c>
	struct sdhc_spi_data *dev_data = dev->data;
    cf5c:	f8d9 6010 	ldr.w	r6, [r9, #16]
	uint8_t *end = response + rx_len;
    cf60:	9f01      	ldr	r7, [sp, #4]
	const struct sdhc_spi_config *config = dev->config;
    cf62:	f8d9 a004 	ldr.w	sl, [r9, #4]
	uint8_t *response = dev_data->scratch;
    cf66:	f106 0830 	add.w	r8, r6, #48	; 0x30
	uint8_t *end = response + rx_len;
    cf6a:	4447      	add	r7, r8
	response += 8;
    cf6c:	f106 0238 	add.w	r2, r6, #56	; 0x38
	while (response < end && ((*response & SD_SPI_START) == SD_SPI_START)) {
    cf70:	4297      	cmp	r7, r2
    cf72:	4613      	mov	r3, r2
    cf74:	d81f      	bhi.n	cfb6 <sdhc_spi_send_cmd+0xd6>
	if (response == end) {
    cf76:	d025      	beq.n	cfc4 <sdhc_spi_send_cmd+0xe4>
	cmd->response[0] = *response++;
    cf78:	f813 2b01 	ldrb.w	r2, [r3], #1
    cf7c:	60aa      	str	r2, [r5, #8]
	if (cmd->response[0] != 0) {
    cf7e:	b16a      	cbz	r2, cf9c <sdhc_spi_send_cmd+0xbc>
		if (cmd->response[0] &	(SD_SPI_R1PARAMETER_ERR | SD_SPI_R1ADDRESS_ERR)) {
    cf80:	f012 0f60 	tst.w	r2, #96	; 0x60
    cf84:	f040 8083 	bne.w	d08e <sdhc_spi_send_cmd+0x1ae>
		} else if (cmd->response[0] & (SD_SPI_R1ILLEGAL_CMD_ERR)) {
    cf88:	0750      	lsls	r0, r2, #29
    cf8a:	f100 8083 	bmi.w	d094 <sdhc_spi_send_cmd+0x1b4>
		} else if (cmd->response[0] & (SD_SPI_R1CMD_CRC_ERR)) {
    cf8e:	0711      	lsls	r1, r2, #28
    cf90:	f100 8083 	bmi.w	d09a <sdhc_spi_send_cmd+0x1ba>
		} else if (cmd->response[0] & (SD_SPI_R1ERASE_SEQ_ERR | SD_SPI_R1ERASE_RESET)) {
    cf94:	f012 0f12 	tst.w	r2, #18
    cf98:	f040 8082 	bne.w	d0a0 <sdhc_spi_send_cmd+0x1c0>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
    cf9c:	69a9      	ldr	r1, [r5, #24]
    cf9e:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
    cfa2:	2a30      	cmp	r2, #48	; 0x30
    cfa4:	d064      	beq.n	d070 <sdhc_spi_send_cmd+0x190>
    cfa6:	d829      	bhi.n	cffc <sdhc_spi_send_cmd+0x11c>
    cfa8:	2a10      	cmp	r2, #16
    cfaa:	d01f      	beq.n	cfec <sdhc_spi_send_cmd+0x10c>
    cfac:	2a20      	cmp	r2, #32
    cfae:	d053      	beq.n	d058 <sdhc_spi_send_cmd+0x178>
    cfb0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    cfb4:	e01a      	b.n	cfec <sdhc_spi_send_cmd+0x10c>
	while (response < end && ((*response & SD_SPI_START) == SD_SPI_START)) {
    cfb6:	f993 1000 	ldrsb.w	r1, [r3]
    cfba:	2900      	cmp	r1, #0
    cfbc:	f102 0201 	add.w	r2, r2, #1
    cfc0:	dbd6      	blt.n	cf70 <sdhc_spi_send_cmd+0x90>
    cfc2:	e7d9      	b.n	cf78 <sdhc_spi_send_cmd+0x98>
    cfc4:	2710      	movs	r7, #16
			ret = sdhc_spi_rx(config->spi_dev, dev_data->spi_cfg,
    cfc6:	6871      	ldr	r1, [r6, #4]
    cfc8:	f8da 0000 	ldr.w	r0, [sl]
    cfcc:	2301      	movs	r3, #1
    cfce:	4642      	mov	r2, r8
    cfd0:	f7fa f960 	bl	7294 <sdhc_spi_rx>
			if (ret < 0) {
    cfd4:	2800      	cmp	r0, #0
    cfd6:	db66      	blt.n	d0a6 <sdhc_spi_send_cmd+0x1c6>
			if (*response != 0xff) {
    cfd8:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    cfdc:	2bff      	cmp	r3, #255	; 0xff
    cfde:	d109      	bne.n	cff4 <sdhc_spi_send_cmd+0x114>
		for (i = 0; i < 16; i++) {
    cfe0:	3f01      	subs	r7, #1
    cfe2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    cfe6:	d1ee      	bne.n	cfc6 <sdhc_spi_send_cmd+0xe6>
			return -ETIMEDOUT;
    cfe8:	f06f 0473 	mvn.w	r4, #115	; 0x73
}
    cfec:	4620      	mov	r0, r4
    cfee:	b004      	add	sp, #16
    cff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		end = response + 1;
    cff4:	f106 0731 	add.w	r7, r6, #49	; 0x31
		response = dev_data->scratch;
    cff8:	4643      	mov	r3, r8
    cffa:	e7bd      	b.n	cf78 <sdhc_spi_send_cmd+0x98>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
    cffc:	2a60      	cmp	r2, #96	; 0x60
    cffe:	d037      	beq.n	d070 <sdhc_spi_send_cmd+0x190>
    d000:	d824      	bhi.n	d04c <sdhc_spi_send_cmd+0x16c>
    d002:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    d006:	2940      	cmp	r1, #64	; 0x40
    d008:	d1d2      	bne.n	cfb0 <sdhc_spi_send_cmd+0xd0>
		cmd->response[1] = 0;
    d00a:	2200      	movs	r2, #0
    d00c:	60ea      	str	r2, [r5, #12]
    d00e:	f04f 0904 	mov.w	r9, #4
			cmd->response[1] <<= 8;
    d012:	68ea      	ldr	r2, [r5, #12]
			if (response == end) {
    d014:	429f      	cmp	r7, r3
			cmd->response[1] <<= 8;
    d016:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d01a:	60ea      	str	r2, [r5, #12]
			if (response == end) {
    d01c:	d10b      	bne.n	d036 <sdhc_spi_send_cmd+0x156>
				ret = sdhc_spi_rx(config->spi_dev,
    d01e:	6871      	ldr	r1, [r6, #4]
    d020:	f8da 0000 	ldr.w	r0, [sl]
    d024:	2301      	movs	r3, #1
    d026:	4642      	mov	r2, r8
				end = response + 1;
    d028:	f106 0731 	add.w	r7, r6, #49	; 0x31
				ret = sdhc_spi_rx(config->spi_dev,
    d02c:	f7fa f932 	bl	7294 <sdhc_spi_rx>
				if (ret) {
    d030:	2800      	cmp	r0, #0
    d032:	d138      	bne.n	d0a6 <sdhc_spi_send_cmd+0x1c6>
				response = dev_data->scratch;
    d034:	4643      	mov	r3, r8
			cmd->response[1] |= *response++;
    d036:	f813 1b01 	ldrb.w	r1, [r3], #1
    d03a:	68ea      	ldr	r2, [r5, #12]
		for (i = 0; i < 4; i++) {
    d03c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
			cmd->response[1] |= *response++;
    d040:	430a      	orrs	r2, r1
		for (i = 0; i < 4; i++) {
    d042:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
			cmd->response[1] |= *response++;
    d046:	60ea      	str	r2, [r5, #12]
		for (i = 0; i < 4; i++) {
    d048:	d1e3      	bne.n	d012 <sdhc_spi_send_cmd+0x132>
    d04a:	e7cf      	b.n	cfec <sdhc_spi_send_cmd+0x10c>
	switch ((cmd->response_type & SDHC_SPI_RESPONSE_TYPE_MASK)) {
    d04c:	2a70      	cmp	r2, #112	; 0x70
    d04e:	e7db      	b.n	d008 <sdhc_spi_send_cmd+0x128>
		while (response < end && (*response == 0x0)) {
    d050:	7812      	ldrb	r2, [r2, #0]
    d052:	3301      	adds	r3, #1
    d054:	2a00      	cmp	r2, #0
    d056:	d1c9      	bne.n	cfec <sdhc_spi_send_cmd+0x10c>
    d058:	42bb      	cmp	r3, r7
    d05a:	461a      	mov	r2, r3
    d05c:	d3f8      	bcc.n	d050 <sdhc_spi_send_cmd+0x170>
		if (response == end) {
    d05e:	d1c5      	bne.n	cfec <sdhc_spi_send_cmd+0x10c>
			ret = sdhc_spi_wait_unbusy(dev,
    d060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d064:	f640 31b8 	movw	r1, #3000	; 0xbb8
    d068:	4648      	mov	r0, r9
    d06a:	f7ff fefe 	bl	ce6a <sdhc_spi_wait_unbusy>
    d06e:	e7bd      	b.n	cfec <sdhc_spi_send_cmd+0x10c>
		if (response == end) {
    d070:	42bb      	cmp	r3, r7
    d072:	d108      	bne.n	d086 <sdhc_spi_send_cmd+0x1a6>
			ret = sdhc_spi_rx(config->spi_dev,
    d074:	6871      	ldr	r1, [r6, #4]
    d076:	f8da 0000 	ldr.w	r0, [sl]
    d07a:	2301      	movs	r3, #1
    d07c:	4642      	mov	r2, r8
    d07e:	f7fa f909 	bl	7294 <sdhc_spi_rx>
			if (ret) {
    d082:	b980      	cbnz	r0, d0a6 <sdhc_spi_send_cmd+0x1c6>
			response = dev_data->scratch;
    d084:	4643      	mov	r3, r8
		cmd->response[0] = (*response) << 8;
    d086:	781b      	ldrb	r3, [r3, #0]
    d088:	021b      	lsls	r3, r3, #8
    d08a:	60ab      	str	r3, [r5, #8]
		break;
    d08c:	e7ae      	b.n	cfec <sdhc_spi_send_cmd+0x10c>
			return -EFAULT; /* Bad address */
    d08e:	f06f 040d 	mvn.w	r4, #13
    d092:	e7ab      	b.n	cfec <sdhc_spi_send_cmd+0x10c>
			return -EINVAL; /* Invalid command */
    d094:	f06f 0415 	mvn.w	r4, #21
    d098:	e7a8      	b.n	cfec <sdhc_spi_send_cmd+0x10c>
			return -EILSEQ; /* Illegal byte sequence */
    d09a:	f06f 0489 	mvn.w	r4, #137	; 0x89
    d09e:	e7a5      	b.n	cfec <sdhc_spi_send_cmd+0x10c>
			return -EIO;
    d0a0:	f06f 0404 	mvn.w	r4, #4
    d0a4:	e7a2      	b.n	cfec <sdhc_spi_send_cmd+0x10c>
				ret = sdhc_spi_rx(config->spi_dev,
    d0a6:	4604      	mov	r4, r0
    d0a8:	e7a0      	b.n	cfec <sdhc_spi_send_cmd+0x10c>

0000d0aa <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    d0aa:	6902      	ldr	r2, [r0, #16]
{
    d0ac:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    d0ae:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    d0b2:	e883 0003 	stmia.w	r3, {r0, r1}
}
    d0b6:	2000      	movs	r0, #0
    d0b8:	4770      	bx	lr

0000d0ba <uarte_nrfx_err_check>:
	return config->uarte_regs;
    d0ba:	6843      	ldr	r3, [r0, #4]
    d0bc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    d0be:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    d0c2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    d0c6:	4770      	bx	lr

0000d0c8 <tx_start>:
{
    d0c8:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    d0ca:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    d0cc:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    d0ce:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    d0d2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d0d6:	2200      	movs	r2, #0
    d0d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    d0dc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    d0e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    d0e4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    d0e8:	6862      	ldr	r2, [r4, #4]
    d0ea:	06d2      	lsls	r2, r2, #27
    d0ec:	d508      	bpl.n	d100 <tx_start+0x38>
	return config->uarte_regs;
    d0ee:	6842      	ldr	r2, [r0, #4]
    d0f0:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    d0f2:	2108      	movs	r1, #8
    d0f4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    d0f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    d0fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d100:	2201      	movs	r2, #1
    d102:	609a      	str	r2, [r3, #8]
}
    d104:	bd10      	pop	{r4, pc}

0000d106 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    d106:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    d108:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    d10a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d10c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d110:	b150      	cbz	r0, d128 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    d112:	6992      	ldr	r2, [r2, #24]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d114:	2000      	movs	r0, #0
    d116:	7812      	ldrb	r2, [r2, #0]
    d118:	700a      	strb	r2, [r1, #0]
    d11a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    d11e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d122:	2201      	movs	r2, #1
    d124:	601a      	str	r2, [r3, #0]
	return 0;
    d126:	4770      	bx	lr
		return -1;
    d128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    d12c:	4770      	bx	lr

0000d12e <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d12e:	2a00      	cmp	r2, #0
{
    d130:	b510      	push	{r4, lr}
    d132:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d134:	dd10      	ble.n	d158 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
    d136:	6843      	ldr	r3, [r0, #4]
    d138:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d13a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d13e:	b150      	cbz	r0, d156 <uarte_nrfx_fifo_read+0x28>
	const struct uarte_nrfx_data *data = dev->data;
    d140:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d142:	2000      	movs	r0, #0
    d144:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
    d148:	6992      	ldr	r2, [r2, #24]
    d14a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    d14e:	7812      	ldrb	r2, [r2, #0]
    d150:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d152:	2001      	movs	r0, #1
    d154:	6018      	str	r0, [r3, #0]
}
    d156:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    d158:	2000      	movs	r0, #0
    d15a:	e7fc      	b.n	d156 <uarte_nrfx_fifo_read+0x28>

0000d15c <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    d15c:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    d15e:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    d160:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    d162:	f04f 0020 	mov.w	r0, #32
    d166:	f3ef 8311 	mrs	r3, BASEPRI
    d16a:	f380 8812 	msr	BASEPRI_MAX, r0
    d16e:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    d172:	68c9      	ldr	r1, [r1, #12]
    d174:	2000      	movs	r0, #0
    d176:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    d178:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    d17c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    d180:	f383 8811 	msr	BASEPRI, r3
    d184:	f3bf 8f6f 	isb	sy
}
    d188:	4770      	bx	lr

0000d18a <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    d18a:	6903      	ldr	r3, [r0, #16]
    d18c:	68db      	ldr	r3, [r3, #12]
    d18e:	2201      	movs	r2, #1
    d190:	739a      	strb	r2, [r3, #14]
}
    d192:	4770      	bx	lr

0000d194 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    d194:	6903      	ldr	r3, [r0, #16]
    d196:	68db      	ldr	r3, [r3, #12]
    d198:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    d19a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    d19e:	b962      	cbnz	r2, d1ba <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    d1a0:	6842      	ldr	r2, [r0, #4]
    d1a2:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d1a4:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    d1a8:	b140      	cbz	r0, d1bc <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    d1aa:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    d1ae:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    d1b2:	d003      	beq.n	d1bc <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    d1b4:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    d1b6:	2001      	movs	r0, #1
    d1b8:	4770      	bx	lr
    d1ba:	2000      	movs	r0, #0
}
    d1bc:	4770      	bx	lr

0000d1be <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    d1be:	6843      	ldr	r3, [r0, #4]
    d1c0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d1c2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    d1c6:	3800      	subs	r0, #0
    d1c8:	bf18      	it	ne
    d1ca:	2001      	movne	r0, #1
    d1cc:	4770      	bx	lr

0000d1ce <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    d1ce:	6843      	ldr	r3, [r0, #4]
    d1d0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    d1d2:	2210      	movs	r2, #16
    d1d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d1d8:	4770      	bx	lr

0000d1da <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    d1da:	6843      	ldr	r3, [r0, #4]
    d1dc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    d1de:	2210      	movs	r2, #16
    d1e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    d1e4:	4770      	bx	lr

0000d1e6 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    d1e6:	6843      	ldr	r3, [r0, #4]
    d1e8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    d1ea:	f44f 7200 	mov.w	r2, #512	; 0x200
    d1ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d1f2:	4770      	bx	lr

0000d1f4 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    d1f4:	6843      	ldr	r3, [r0, #4]
    d1f6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    d1f8:	f44f 7200 	mov.w	r2, #512	; 0x200
    d1fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    d200:	4770      	bx	lr

0000d202 <uarte_nrfx_irq_is_pending>:
{
    d202:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    d204:	6843      	ldr	r3, [r0, #4]
    d206:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    d208:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    d20c:	025b      	lsls	r3, r3, #9
{
    d20e:	4604      	mov	r4, r0
		||
    d210:	d405      	bmi.n	d21e <uarte_nrfx_irq_is_pending+0x1c>
    d212:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    d216:	f010 0010 	ands.w	r0, r0, #16
    d21a:	d106      	bne.n	d22a <uarte_nrfx_irq_is_pending+0x28>
}
    d21c:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    d21e:	f7ff ffb9 	bl	d194 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    d222:	2800      	cmp	r0, #0
    d224:	d0f5      	beq.n	d212 <uarte_nrfx_irq_is_pending+0x10>
		||
    d226:	2001      	movs	r0, #1
    d228:	e7f8      	b.n	d21c <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    d22a:	4620      	mov	r0, r4
    d22c:	f7ff ffc7 	bl	d1be <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    d230:	3800      	subs	r0, #0
    d232:	bf18      	it	ne
    d234:	2001      	movne	r0, #1
    d236:	e7f1      	b.n	d21c <uarte_nrfx_irq_is_pending+0x1a>

0000d238 <uarte_nrfx_irq_update>:
}
    d238:	2001      	movs	r0, #1
    d23a:	4770      	bx	lr

0000d23c <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    d23c:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    d23e:	68d8      	ldr	r0, [r3, #12]
    d240:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    d242:	68db      	ldr	r3, [r3, #12]
    d244:	605a      	str	r2, [r3, #4]
}
    d246:	4770      	bx	lr

0000d248 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    d248:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    d24a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d24c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    d250:	b940      	cbnz	r0, d264 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    d252:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    d254:	079b      	lsls	r3, r3, #30
    d256:	d406      	bmi.n	d266 <is_tx_ready.isra.0+0x1e>
    d258:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    d25c:	3800      	subs	r0, #0
    d25e:	bf18      	it	ne
    d260:	2001      	movne	r0, #1
    d262:	4770      	bx	lr
    d264:	2001      	movs	r0, #1
}
    d266:	4770      	bx	lr

0000d268 <uarte_nrfx_fifo_fill>:
{
    d268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    d26a:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    d26c:	68f3      	ldr	r3, [r6, #12]
    d26e:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d270:	f3bf 8f5b 	dmb	ish
    d274:	4294      	cmp	r4, r2
    d276:	bfa8      	it	ge
    d278:	4614      	movge	r4, r2
{
    d27a:	4605      	mov	r5, r0
    d27c:	3310      	adds	r3, #16
    d27e:	2201      	movs	r2, #1
    d280:	e853 0f00 	ldrex	r0, [r3]
    d284:	2800      	cmp	r0, #0
    d286:	d103      	bne.n	d290 <uarte_nrfx_fifo_fill+0x28>
    d288:	e843 2700 	strex	r7, r2, [r3]
    d28c:	2f00      	cmp	r7, #0
    d28e:	d1f7      	bne.n	d280 <uarte_nrfx_fifo_fill+0x18>
    d290:	f3bf 8f5b 	dmb	ish
    d294:	bf0c      	ite	eq
    d296:	4613      	moveq	r3, r2
    d298:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    d29a:	d11f      	bne.n	d2dc <uarte_nrfx_fifo_fill+0x74>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
    d29c:	68f3      	ldr	r3, [r6, #12]
    d29e:	4622      	mov	r2, r4
    d2a0:	6898      	ldr	r0, [r3, #8]
    d2a2:	f7ff f91b 	bl	c4dc <memcpy>
	__asm__ volatile(
    d2a6:	f04f 0320 	mov.w	r3, #32
    d2aa:	f3ef 8711 	mrs	r7, BASEPRI
    d2ae:	f383 8812 	msr	BASEPRI_MAX, r3
    d2b2:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    d2b6:	6868      	ldr	r0, [r5, #4]
    d2b8:	f7ff ffc6 	bl	d248 <is_tx_ready.isra.0>
    d2bc:	68f3      	ldr	r3, [r6, #12]
    d2be:	b938      	cbnz	r0, d2d0 <uarte_nrfx_fifo_fill+0x68>
		data->int_driven->fifo_fill_lock = 0;
    d2c0:	6118      	str	r0, [r3, #16]
		len = 0;
    d2c2:	4604      	mov	r4, r0
	__asm__ volatile(
    d2c4:	f387 8811 	msr	BASEPRI, r7
    d2c8:	f3bf 8f6f 	isb	sy
}
    d2cc:	4620      	mov	r0, r4
    d2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    d2d0:	6899      	ldr	r1, [r3, #8]
    d2d2:	4622      	mov	r2, r4
    d2d4:	4628      	mov	r0, r5
    d2d6:	f7ff fef7 	bl	d0c8 <tx_start>
    d2da:	e7f3      	b.n	d2c4 <uarte_nrfx_fifo_fill+0x5c>
		return 0;
    d2dc:	461c      	mov	r4, r3
    d2de:	e7f5      	b.n	d2cc <uarte_nrfx_fifo_fill+0x64>

0000d2e0 <uarte_nrfx_isr_int>:
{
    d2e0:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
    d2e2:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    d2e4:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    d2e6:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    d2ea:	05c9      	lsls	r1, r1, #23
    d2ec:	d518      	bpl.n	d320 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d2ee:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    d2f2:	b1a9      	cbz	r1, d320 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    d2f4:	f04f 0420 	mov.w	r4, #32
    d2f8:	f3ef 8111 	mrs	r1, BASEPRI
    d2fc:	f384 8812 	msr	BASEPRI_MAX, r4
    d300:	f3bf 8f6f 	isb	sy
    d304:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    d308:	b134      	cbz	r4, d318 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d30a:	2400      	movs	r4, #0
    d30c:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    d310:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d314:	2401      	movs	r4, #1
    d316:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    d318:	f381 8811 	msr	BASEPRI, r1
    d31c:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    d320:	6852      	ldr	r2, [r2, #4]
    d322:	06d2      	lsls	r2, r2, #27
    d324:	d51a      	bpl.n	d35c <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    d326:	f04f 0220 	mov.w	r2, #32
    d32a:	f3ef 8111 	mrs	r1, BASEPRI
    d32e:	f382 8812 	msr	BASEPRI_MAX, r2
    d332:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d336:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    d33a:	b112      	cbz	r2, d342 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    d33c:	2200      	movs	r2, #0
    d33e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    d342:	6902      	ldr	r2, [r0, #16]
    d344:	68d2      	ldr	r2, [r2, #12]
    d346:	b10a      	cbz	r2, d34c <uarte_nrfx_isr_int+0x6c>
    d348:	6912      	ldr	r2, [r2, #16]
    d34a:	b91a      	cbnz	r2, d354 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    d34c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    d350:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    d354:	f381 8811 	msr	BASEPRI, r1
    d358:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
    d35c:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
    d35e:	68d4      	ldr	r4, [r2, #12]
    d360:	b16c      	cbz	r4, d37e <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d362:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    d366:	b161      	cbz	r1, d382 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
    d368:	2100      	movs	r1, #0
    d36a:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
    d36c:	68d4      	ldr	r4, [r2, #12]
    d36e:	7ba4      	ldrb	r4, [r4, #14]
    d370:	b13c      	cbz	r4, d382 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
    d372:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    d376:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    d37a:	68d3      	ldr	r3, [r2, #12]
    d37c:	7399      	strb	r1, [r3, #14]
}
    d37e:	bc10      	pop	{r4}
    d380:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d382:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    d386:	b121      	cbz	r1, d392 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d388:	2100      	movs	r1, #0
    d38a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    d38e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    d392:	68d2      	ldr	r2, [r2, #12]
    d394:	6813      	ldr	r3, [r2, #0]
    d396:	2b00      	cmp	r3, #0
    d398:	d0f1      	beq.n	d37e <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    d39a:	6851      	ldr	r1, [r2, #4]
}
    d39c:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    d39e:	4718      	bx	r3

0000d3a0 <irq_connect0>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
    d3a0:	2200      	movs	r2, #0
    d3a2:	2101      	movs	r1, #1
    d3a4:	2003      	movs	r0, #3
    d3a6:	f7f7 bd23 	b.w	4df0 <z_arm_irq_priority_set>

0000d3aa <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    d3aa:	b510      	push	{r4, lr}
	while (*count) {
    d3ac:	680b      	ldr	r3, [r1, #0]
    d3ae:	b913      	cbnz	r3, d3b6 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    d3b0:	6013      	str	r3, [r2, #0]
	return NULL;
    d3b2:	4618      	mov	r0, r3
    d3b4:	e005      	b.n	d3c2 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    d3b6:	6803      	ldr	r3, [r0, #0]
    d3b8:	685c      	ldr	r4, [r3, #4]
    d3ba:	b11c      	cbz	r4, d3c4 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    d3bc:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    d3be:	6803      	ldr	r3, [r0, #0]
    d3c0:	6818      	ldr	r0, [r3, #0]
}
    d3c2:	bd10      	pop	{r4, pc}
		++(*current);
    d3c4:	3308      	adds	r3, #8
    d3c6:	6003      	str	r3, [r0, #0]
		--(*count);
    d3c8:	680b      	ldr	r3, [r1, #0]
    d3ca:	3b01      	subs	r3, #1
    d3cc:	600b      	str	r3, [r1, #0]
    d3ce:	e7ed      	b.n	d3ac <spi_context_get_next_buf.constprop.0+0x2>

0000d3d0 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    d3d0:	4603      	mov	r3, r0
    d3d2:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    d3d4:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    d3d6:	7919      	ldrb	r1, [r3, #4]
    d3d8:	2301      	movs	r3, #1
    d3da:	fa03 f101 	lsl.w	r1, r3, r1
    d3de:	6903      	ldr	r3, [r0, #16]
    d3e0:	681b      	ldr	r3, [r3, #0]
    d3e2:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    d3e4:	bf18      	it	ne
    d3e6:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    d3ea:	b112      	cbz	r2, d3f2 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    d3ec:	6883      	ldr	r3, [r0, #8]
    d3ee:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    d3f0:	4718      	bx	r3
    d3f2:	6883      	ldr	r3, [r0, #8]
    d3f4:	691b      	ldr	r3, [r3, #16]
    d3f6:	e7fb      	b.n	d3f0 <gpio_pin_set_dt.isra.0+0x20>

0000d3f8 <spi_context_unlock_unconditionally>:
{
    d3f8:	b510      	push	{r4, lr}
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
    d3fa:	6803      	ldr	r3, [r0, #0]
{
    d3fc:	4604      	mov	r4, r0
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
    d3fe:	b14b      	cbz	r3, d414 <spi_context_unlock_unconditionally+0x1c>
    d400:	689a      	ldr	r2, [r3, #8]
    d402:	b13a      	cbz	r2, d414 <spi_context_unlock_unconditionally+0x1c>
			k_busy_wait(ctx->config->cs.delay);
    d404:	6918      	ldr	r0, [r3, #16]
	z_impl_k_busy_wait(usec_to_wait);
    d406:	f000 fded 	bl	dfe4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs.gpio, 0);
    d40a:	6820      	ldr	r0, [r4, #0]
    d40c:	2100      	movs	r1, #0
    d40e:	3008      	adds	r0, #8
    d410:	f7ff ffde 	bl	d3d0 <gpio_pin_set_dt.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
    d414:	69a3      	ldr	r3, [r4, #24]
    d416:	b933      	cbnz	r3, d426 <spi_context_unlock_unconditionally+0x2e>
		ctx->owner = NULL;
    d418:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    d41a:	f104 0010 	add.w	r0, r4, #16
}
    d41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d422:	f7fd bba9 	b.w	ab78 <z_impl_k_sem_give>
    d426:	bd10      	pop	{r4, pc}

0000d428 <spi_nrfx_release>:
{
    d428:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    d42a:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    d42c:	6803      	ldr	r3, [r0, #0]
    d42e:	428b      	cmp	r3, r1
    d430:	d106      	bne.n	d440 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    d432:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    d436:	b934      	cbnz	r4, d446 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    d438:	f7ff ffde 	bl	d3f8 <spi_context_unlock_unconditionally>
	return 0;
    d43c:	4620      	mov	r0, r4
}
    d43e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    d440:	f06f 0015 	mvn.w	r0, #21
    d444:	e7fb      	b.n	d43e <spi_nrfx_release+0x16>
		return -EBUSY;
    d446:	f06f 000f 	mvn.w	r0, #15
    d44a:	e7f8      	b.n	d43e <spi_nrfx_release+0x16>

0000d44c <spi_nrfx_init>:
{
    d44c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
    d450:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    d452:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    d454:	6a26      	ldr	r6, [r4, #32]
	ret = pinctrl_lookup_state(config, id, &state);
    d456:	aa01      	add	r2, sp, #4
    d458:	2100      	movs	r1, #0
    d45a:	4630      	mov	r0, r6
    d45c:	f7ff fcae 	bl	cdbc <pinctrl_lookup_state>
	if (ret < 0) {
    d460:	2800      	cmp	r0, #0
    d462:	db43      	blt.n	d4ec <spi_nrfx_init+0xa0>
	return pinctrl_apply_state_direct(config, state);
    d464:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    d466:	6832      	ldr	r2, [r6, #0]
    d468:	7919      	ldrb	r1, [r3, #4]
    d46a:	6818      	ldr	r0, [r3, #0]
    d46c:	f7f9 fe60 	bl	7130 <pinctrl_configure_pins>
	if (err < 0) {
    d470:	2800      	cmp	r0, #0
    d472:	db3b      	blt.n	d4ec <spi_nrfx_init+0xa0>
	dev_config->irq_connect();
    d474:	69e3      	ldr	r3, [r4, #28]
    d476:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    d478:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    d47a:	2601      	movs	r6, #1
    d47c:	3408      	adds	r4, #8
    d47e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    d482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d486:	f1a4 0208 	sub.w	r2, r4, #8
    d48a:	4293      	cmp	r3, r2
    d48c:	d804      	bhi.n	d498 <spi_nrfx_init+0x4c>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    d48e:	4628      	mov	r0, r5
    d490:	f7ff ffb2 	bl	d3f8 <spi_context_unlock_unconditionally>
	return 0;
    d494:	2000      	movs	r0, #0
	return 0;
    d496:	e029      	b.n	d4ec <spi_nrfx_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
    d498:	f854 0c08 	ldr.w	r0, [r4, #-8]
    d49c:	f000 fb05 	bl	daaa <z_device_is_ready>
    d4a0:	b338      	cbz	r0, d4f2 <spi_nrfx_init+0xa6>
	return gpio_pin_configure(spec->port,
    d4a2:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
    d4a6:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
    d4aa:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
    d4ae:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    d4b2:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    d4b6:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    d4ba:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    d4bc:	bf54      	ite	pl
    d4be:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    d4c2:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    d4c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    d4ca:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    d4ce:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    d4d0:	bf4c      	ite	mi
    d4d2:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    d4d6:	ea27 070e 	bicpl.w	r7, r7, lr
    d4da:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
    d4de:	f8d8 3000 	ldr.w	r3, [r8]
    d4e2:	4798      	blx	r3
		if (ret < 0) {
    d4e4:	2800      	cmp	r0, #0
    d4e6:	f104 0408 	add.w	r4, r4, #8
    d4ea:	dac8      	bge.n	d47e <spi_nrfx_init+0x32>
}
    d4ec:	b002      	add	sp, #8
    d4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
    d4f2:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
    d4f6:	e7f9      	b.n	d4ec <spi_nrfx_init+0xa0>

0000d4f8 <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
    d4f8:	b570      	push	{r4, r5, r6, lr}
	if (ctx->config && spi_cs_is_gpio(ctx->config)) {
    d4fa:	6802      	ldr	r2, [r0, #0]
    d4fc:	4604      	mov	r4, r0
    d4fe:	460e      	mov	r6, r1
    d500:	b16a      	cbz	r2, d51e <finish_transaction.isra.0+0x26>
    d502:	6893      	ldr	r3, [r2, #8]
    d504:	b15b      	cbz	r3, d51e <finish_transaction.isra.0+0x26>
			if (!force_off &&
    d506:	8893      	ldrh	r3, [r2, #4]
    d508:	f413 5580 	ands.w	r5, r3, #4096	; 0x1000
    d50c:	d107      	bne.n	d51e <finish_transaction.isra.0+0x26>
			k_busy_wait(ctx->config->cs.delay);
    d50e:	6910      	ldr	r0, [r2, #16]
	z_impl_k_busy_wait(usec_to_wait);
    d510:	f000 fd68 	bl	dfe4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs.gpio, 0);
    d514:	6820      	ldr	r0, [r4, #0]
    d516:	4629      	mov	r1, r5
    d518:	3008      	adds	r0, #8
    d51a:	f7ff ff59 	bl	d3d0 <gpio_pin_set_dt.isra.0>
	ctx->sync_status = status;
    d51e:	6326      	str	r6, [r4, #48]	; 0x30
	z_impl_k_sem_give(sem);
    d520:	f104 0020 	add.w	r0, r4, #32
    d524:	f7fd fb28 	bl	ab78 <z_impl_k_sem_give>
	dev_data->busy = false;
    d528:	2300      	movs	r3, #0
    d52a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    d52e:	bd70      	pop	{r4, r5, r6, pc}

0000d530 <event_handler>:
{
    d530:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    d532:	7803      	ldrb	r3, [r0, #0]
{
    d534:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    d536:	2b00      	cmp	r3, #0
    d538:	d145      	bne.n	d5c6 <event_handler+0x96>
		if (dev_data->chunk_len == 0) {
    d53a:	6d8d      	ldr	r5, [r1, #88]	; 0x58
    d53c:	b93d      	cbnz	r5, d54e <event_handler+0x1e>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    d53e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    d540:	f06f 0173 	mvn.w	r1, #115	; 0x73
    d544:	6918      	ldr	r0, [r3, #16]
}
    d546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    d54a:	f7ff bfd5 	b.w	d4f8 <finish_transaction.isra.0>
	if (!ctx->tx_len) {
    d54e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    d550:	b193      	cbz	r3, d578 <event_handler+0x48>
	if (len > ctx->tx_len) {
    d552:	429d      	cmp	r5, r3
    d554:	d810      	bhi.n	d578 <event_handler+0x48>
	ctx->tx_len -= len;
    d556:	1b5b      	subs	r3, r3, r5
    d558:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    d55a:	bb43      	cbnz	r3, d5ae <event_handler+0x7e>
		++ctx->current_tx;
    d55c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    d55e:	3308      	adds	r3, #8
    d560:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    d562:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    d564:	3b01      	subs	r3, #1
    d566:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    d568:	f101 0248 	add.w	r2, r1, #72	; 0x48
    d56c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    d570:	3138      	adds	r1, #56	; 0x38
    d572:	f7ff ff1a 	bl	d3aa <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    d576:	6460      	str	r0, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    d578:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d57a:	b19b      	cbz	r3, d5a4 <event_handler+0x74>
	if (len > ctx->rx_len) {
    d57c:	429d      	cmp	r5, r3
    d57e:	d811      	bhi.n	d5a4 <event_handler+0x74>
	ctx->rx_len -= len;
    d580:	1b5b      	subs	r3, r3, r5
    d582:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    d584:	b9cb      	cbnz	r3, d5ba <event_handler+0x8a>
		++ctx->current_rx;
    d586:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d588:	3308      	adds	r3, #8
    d58a:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    d58c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d58e:	3b01      	subs	r3, #1
    d590:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    d592:	f104 0250 	add.w	r2, r4, #80	; 0x50
    d596:	f104 0140 	add.w	r1, r4, #64	; 0x40
    d59a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    d59e:	f7ff ff04 	bl	d3aa <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    d5a2:	64e0      	str	r0, [r4, #76]	; 0x4c
		transfer_next_chunk(dev_data->dev);
    d5a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    d5a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev_data->dev);
    d5aa:	f7fa b9d5 	b.w	7958 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
    d5ae:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    d5b0:	2b00      	cmp	r3, #0
    d5b2:	d0e1      	beq.n	d578 <event_handler+0x48>
		ctx->tx_buf += dfs * len;
    d5b4:	442b      	add	r3, r5
    d5b6:	644b      	str	r3, [r1, #68]	; 0x44
    d5b8:	e7de      	b.n	d578 <event_handler+0x48>
	} else if (ctx->rx_buf) {
    d5ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    d5bc:	2b00      	cmp	r3, #0
    d5be:	d0f1      	beq.n	d5a4 <event_handler+0x74>
		ctx->rx_buf += dfs * len;
    d5c0:	442b      	add	r3, r5
    d5c2:	64e3      	str	r3, [r4, #76]	; 0x4c
    d5c4:	e7ee      	b.n	d5a4 <event_handler+0x74>
}
    d5c6:	bd38      	pop	{r3, r4, r5, pc}

0000d5c8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    d5c8:	4770      	bx	lr

0000d5ca <event_clear>:
	nrf_rtc_event_clear(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
    d5ca:	f100 0350 	add.w	r3, r0, #80	; 0x50
    d5ce:	009b      	lsls	r3, r3, #2
    d5d0:	b29b      	uxth	r3, r3
    d5d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d5d6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    d5da:	2200      	movs	r2, #0
    d5dc:	601a      	str	r2, [r3, #0]
    d5de:	681b      	ldr	r3, [r3, #0]
}
    d5e0:	4770      	bx	lr

0000d5e2 <sys_clock_cycle_get_32>:
{
    d5e2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    d5e4:	f7fa fbca 	bl	7d7c <z_nrf_rtc_timer_read>
}
    d5e8:	bd08      	pop	{r3, pc}

0000d5ea <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    d5ea:	4700      	bx	r0

0000d5ec <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    d5ec:	f000 bcfa 	b.w	dfe4 <z_impl_k_busy_wait>

0000d5f0 <nrfx_gppi_channel_endpoints_setup>:
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    d5f0:	00c0      	lsls	r0, r0, #3
    d5f2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    d5f6:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    d5fa:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    d5fe:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
}

void nrfx_gppi_channel_endpoints_setup(uint8_t  channel, uint32_t eep, uint32_t tep)
{
    nrf_ppi_channel_endpoint_setup(NRF_PPI, (nrf_ppi_channel_t)channel, eep, tep);
}
    d602:	4770      	bx	lr

0000d604 <nrfx_clock_start>:
{
    d604:	b508      	push	{r3, lr}
    switch (domain)
    d606:	b110      	cbz	r0, d60e <nrfx_clock_start+0xa>
    d608:	2801      	cmp	r0, #1
    d60a:	d02c      	beq.n	d666 <nrfx_clock_start+0x62>
}
    d60c:	bd08      	pop	{r3, pc}
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    d60e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    d612:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    d616:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc))
    d61a:	03c8      	lsls	r0, r1, #15
    d61c:	d517      	bpl.n	d64e <nrfx_clock_start+0x4a>
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
    d61e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    d622:	2b01      	cmp	r3, #1
    d624:	d004      	beq.n	d630 <nrfx_clock_start+0x2c>
    d626:	b113      	cbz	r3, d62e <nrfx_clock_start+0x2a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d628:	2000      	movs	r0, #0
    d62a:	f7fa feab 	bl	8384 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    d62e:	2300      	movs	r3, #0
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    d630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    d634:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d638:	2300      	movs	r3, #0
    d63a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    d63e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    d642:	2302      	movs	r3, #2
    d644:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d648:	2301      	movs	r3, #1
    d64a:	6093      	str	r3, [r2, #8]
}
    d64c:	e7de      	b.n	d60c <nrfx_clock_start+0x8>
            return ((p_reg->NRF_LFCLKRUN & NRF_CLOCK_LFCLKRUN_STATUS_Msk)
    d64e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    d652:	07d9      	lsls	r1, r3, #31
    d654:	d5eb      	bpl.n	d62e <nrfx_clock_start+0x2a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d656:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    d65a:	079b      	lsls	r3, r3, #30
    d65c:	d4e4      	bmi.n	d628 <nrfx_clock_start+0x24>
    p_reg->INTENSET = mask;
    d65e:	2302      	movs	r3, #2
    d660:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    d664:	e7d2      	b.n	d60c <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d66a:	2200      	movs	r2, #0
    d66c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d670:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    d674:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d678:	6018      	str	r0, [r3, #0]
}
    d67a:	e7c7      	b.n	d60c <nrfx_clock_start+0x8>

0000d67c <nrfx_clock_stop>:
    clock_stop(domain);
    d67c:	f7fa be82 	b.w	8384 <clock_stop>

0000d680 <nrf_gpio_reconfigure>:
{
    d680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d682:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d684:	a801      	add	r0, sp, #4
{
    d686:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    d68a:	4616      	mov	r6, r2
    d68c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d68e:	f7fa ff31 	bl	84f4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d692:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
    d694:	f1b6 0c00 	subs.w	ip, r6, #0
    d698:	bf18      	it	ne
    d69a:	f04f 0c01 	movne.w	ip, #1
    d69e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
    d6a2:	1e0b      	subs	r3, r1, #0
    d6a4:	bf18      	it	ne
    d6a6:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
    d6a8:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
    d6aa:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
    d6ae:	bf14      	ite	ne
    d6b0:	f04f 0c0c 	movne.w	ip, #12
    d6b4:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
    d6b8:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
    d6ba:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
    d6be:	bf14      	ite	ne
    d6c0:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    d6c4:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
    d6c8:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
    d6ca:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d6ce:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
    d6d2:	bf14      	ite	ne
    d6d4:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    d6d8:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
    d6dc:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    d6e0:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
    d6e4:	b101      	cbz	r1, d6e8 <nrf_gpio_reconfigure+0x68>
    d6e6:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos)  |
    d6e8:	b10e      	cbz	r6, d6ee <nrf_gpio_reconfigure+0x6e>
    d6ea:	7836      	ldrb	r6, [r6, #0]
    d6ec:	0076      	lsls	r6, r6, #1
    d6ee:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)   |
    d6f0:	b10d      	cbz	r5, d6f6 <nrf_gpio_reconfigure+0x76>
    d6f2:	782d      	ldrb	r5, [r5, #0]
    d6f4:	00ad      	lsls	r5, r5, #2
    d6f6:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos)  |
    d6f8:	b10c      	cbz	r4, d6fe <nrf_gpio_reconfigure+0x7e>
    d6fa:	7824      	ldrb	r4, [r4, #0]
    d6fc:	0224      	lsls	r4, r4, #8
    d6fe:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    d700:	b10f      	cbz	r7, d706 <nrf_gpio_reconfigure+0x86>
    d702:	783f      	ldrb	r7, [r7, #0]
    d704:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
    d706:	430c      	orrs	r4, r1
    d708:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    d70a:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    d70e:	b003      	add	sp, #12
    d710:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d712 <nrf_gpio_cfg_sense_set>:
{
    d712:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    d714:	f10d 030f 	add.w	r3, sp, #15
    d718:	9301      	str	r3, [sp, #4]
    d71a:	2300      	movs	r3, #0
{
    d71c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    d720:	9300      	str	r3, [sp, #0]
    d722:	461a      	mov	r2, r3
    d724:	4619      	mov	r1, r3
    d726:	f7ff ffab 	bl	d680 <nrf_gpio_reconfigure>
}
    d72a:	b005      	add	sp, #20
    d72c:	f85d fb04 	ldr.w	pc, [sp], #4

0000d730 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d730:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    d734:	681a      	ldr	r2, [r3, #0]
    d736:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d738:	bf1f      	itttt	ne
    d73a:	2200      	movne	r2, #0
    d73c:	601a      	strne	r2, [r3, #0]
    d73e:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d740:	2001      	movne	r0, #1
    d742:	bf08      	it	eq
    d744:	2000      	moveq	r0, #0
}
    d746:	4770      	bx	lr

0000d748 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    d748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d74c:	f44f 7260 	mov.w	r2, #896	; 0x380
    d750:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d754:	4770      	bx	lr

0000d756 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    d756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d75a:	f44f 7260 	mov.w	r2, #896	; 0x380
    d75e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    d762:	4770      	bx	lr

0000d764 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    d764:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    d766:	f7fb fa79 	bl	8c5c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    d76a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    d76e:	f7fa be8d 	b.w	848c <nrfx_clock_irq_handler>

0000d772 <nrf_gpio_pin_set>:
{
    d772:	b507      	push	{r0, r1, r2, lr}
    d774:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d776:	a801      	add	r0, sp, #4
    d778:	f7fb fac6 	bl	8d08 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    d77c:	9a01      	ldr	r2, [sp, #4]
    d77e:	2301      	movs	r3, #1
    d780:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    d782:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    d786:	b003      	add	sp, #12
    d788:	f85d fb04 	ldr.w	pc, [sp], #4

0000d78c <nrf_gpio_pin_clear>:
{
    d78c:	b507      	push	{r0, r1, r2, lr}
    d78e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    d790:	a801      	add	r0, sp, #4
    d792:	f7fb fab9 	bl	8d08 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d796:	9a01      	ldr	r2, [sp, #4]
    d798:	2301      	movs	r3, #1
    d79a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    d79c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    d7a0:	b003      	add	sp, #12
    d7a2:	f85d fb04 	ldr.w	pc, [sp], #4

0000d7a6 <transfer_byte>:
{
    d7a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return (uint8_t)p_reg->RXD;
    d7a8:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    d7ac:	698a      	ldr	r2, [r1, #24]
    d7ae:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    d7b0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    d7b4:	6a0b      	ldr	r3, [r1, #32]
    d7b6:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    d7b8:	bf3e      	ittt	cc
    d7ba:	694a      	ldrcc	r2, [r1, #20]
    d7bc:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    d7c0:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    d7c2:	6a0b      	ldr	r3, [r1, #32]
    if (p_cb->abort)
    d7c4:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    d7c8:	690c      	ldr	r4, [r1, #16]
    ++p_cb->bytes_transferred;
    d7ca:	1c5a      	adds	r2, r3, #1
    d7cc:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    d7ce:	3302      	adds	r3, #2
    if (p_cb->abort)
    d7d0:	b135      	cbz	r5, d7e0 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    d7d2:	42a3      	cmp	r3, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    d7d4:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    d7d6:	bf38      	it	cc
    d7d8:	610b      	strcc	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    d7da:	429c      	cmp	r4, r3
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    d7dc:	bf88      	it	hi
    d7de:	618b      	strhi	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    d7e0:	690d      	ldr	r5, [r1, #16]
    d7e2:	429d      	cmp	r5, r3
    d7e4:	d905      	bls.n	d7f2 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    d7e6:	68ca      	ldr	r2, [r1, #12]
    p_reg->TXD = data;
    d7e8:	5cd3      	ldrb	r3, [r2, r3]
    d7ea:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    d7ee:	2001      	movs	r0, #1
    d7f0:	e00a      	b.n	d808 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    d7f2:	698c      	ldr	r4, [r1, #24]
    d7f4:	429c      	cmp	r4, r3
    d7f6:	d901      	bls.n	d7fc <transfer_byte+0x56>
    d7f8:	7fcb      	ldrb	r3, [r1, #31]
    d7fa:	e7f6      	b.n	d7ea <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    d7fc:	42aa      	cmp	r2, r5
    d7fe:	d3f6      	bcc.n	d7ee <transfer_byte+0x48>
    d800:	42a2      	cmp	r2, r4
    d802:	bf2c      	ite	cs
    d804:	2000      	movcs	r0, #0
    d806:	2001      	movcc	r0, #1
}
    d808:	b003      	add	sp, #12
    d80a:	bd30      	pop	{r4, r5, pc}

0000d80c <twi_transfer>:
{
    d80c:	b530      	push	{r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d80e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    d812:	b12b      	cbz	r3, d820 <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d814:	2300      	movs	r3, #0
    d816:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    d81a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    d81e:	2301      	movs	r3, #1
    if (p_cb->error)
    d820:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    d824:	b322      	cbz	r2, d870 <twi_transfer+0x64>
    d826:	2200      	movs	r2, #0
    d828:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    d82c:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    d830:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    d834:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
    d838:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    d83c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
    d840:	2b00      	cmp	r3, #0
    d842:	d079      	beq.n	d938 <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    d844:	2200      	movs	r2, #0
    d846:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
    d84a:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    d84e:	2a00      	cmp	r2, #0
    d850:	d137      	bne.n	d8c2 <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    d852:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    d854:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    d856:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    d858:	bf1f      	itttt	ne
    d85a:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    d85c:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    d860:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
    d864:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    d866:	f083 0301 	eor.w	r3, r3, #1
    d86a:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    d86e:	e028      	b.n	d8c2 <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d870:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    d874:	b114      	cbz	r4, d87c <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d876:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    d87a:	e00e      	b.n	d89a <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d87c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    d880:	b36a      	cbz	r2, d8de <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d882:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
    d886:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    d88a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    d88c:	3201      	adds	r2, #1
    d88e:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d890:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    d894:	b145      	cbz	r5, d8a8 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d896:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
    d89a:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d89e:	2201      	movs	r2, #1
    d8a0:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
    d8a2:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
    d8a6:	e7cb      	b.n	d840 <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    d8a8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    d8aa:	42a2      	cmp	r2, r4
    d8ac:	d204      	bcs.n	d8b8 <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    d8ae:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
    d8b0:	5ca2      	ldrb	r2, [r4, r2]
    d8b2:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
    d8b6:	e7c3      	b.n	d840 <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
    d8b8:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    d8bc:	b11a      	cbz	r2, d8c6 <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d8be:	2301      	movs	r3, #1
    d8c0:	61c3      	str	r3, [r0, #28]
                    return false;
    d8c2:	2000      	movs	r0, #0
}
    d8c4:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    d8c6:	6a0a      	ldr	r2, [r1, #32]
    d8c8:	f012 0f40 	tst.w	r2, #64	; 0x40
    d8cc:	f04f 0201 	mov.w	r2, #1
    d8d0:	d003      	beq.n	d8da <twi_transfer+0xce>
    d8d2:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    d8d4:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
    d8d8:	e7f3      	b.n	d8c2 <twi_transfer+0xb6>
    d8da:	6142      	str	r2, [r0, #20]
    d8dc:	e7b0      	b.n	d840 <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d8de:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    d8e2:	2c00      	cmp	r4, #0
    d8e4:	d0ac      	beq.n	d840 <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d8e6:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    d8ea:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d8ee:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    d8f2:	2c00      	cmp	r4, #0
    d8f4:	d1bf      	bne.n	d876 <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    d8f6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    d8f8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    d8fa:	42a2      	cmp	r2, r4
    d8fc:	d2a0      	bcs.n	d840 <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    d8fe:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    d900:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
    d904:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
    d906:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    d908:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    d90a:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    d90c:	1e65      	subs	r5, r4, #1
    d90e:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
    d910:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    d912:	d108      	bne.n	d926 <twi_transfer+0x11a>
    d914:	6a0a      	ldr	r2, [r1, #32]
    d916:	0654      	lsls	r4, r2, #25
    d918:	d402      	bmi.n	d920 <twi_transfer+0x114>
    p_reg->SHORTS = mask;
    d91a:	2202      	movs	r2, #2
    d91c:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d920:	2201      	movs	r2, #1
    d922:	6202      	str	r2, [r0, #32]
    d924:	e78c      	b.n	d840 <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    d926:	42a2      	cmp	r2, r4
    d928:	d1fa      	bne.n	d920 <twi_transfer+0x114>
    d92a:	6a0a      	ldr	r2, [r1, #32]
    d92c:	0652      	lsls	r2, r2, #25
    d92e:	d587      	bpl.n	d840 <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    d930:	2302      	movs	r3, #2
    d932:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    d936:	e7c4      	b.n	d8c2 <twi_transfer+0xb6>
    return true;
    d938:	2001      	movs	r0, #1
    d93a:	e7c3      	b.n	d8c4 <twi_transfer+0xb8>

0000d93c <nrfx_usbd_consumer>:
{
    d93c:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    d93e:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    d940:	429c      	cmp	r4, r3
    d942:	d209      	bcs.n	d958 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    d944:	2500      	movs	r5, #0
    d946:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    d948:	6809      	ldr	r1, [r1, #0]
    d94a:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    d94c:	429a      	cmp	r2, r3
    d94e:	d10c      	bne.n	d96a <nrfx_usbd_consumer+0x2e>
    d950:	1e20      	subs	r0, r4, #0
    d952:	bf18      	it	ne
    d954:	2001      	movne	r0, #1
}
    d956:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    d958:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    d95a:	680d      	ldr	r5, [r1, #0]
    d95c:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    d95e:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    d960:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    d962:	4418      	add	r0, r3
        p_transfer->size = size;
    d964:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    d966:	6008      	str	r0, [r1, #0]
    d968:	e7f0      	b.n	d94c <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    d96a:	2000      	movs	r0, #0
    d96c:	e7f3      	b.n	d956 <nrfx_usbd_consumer+0x1a>

0000d96e <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    d96e:	684b      	ldr	r3, [r1, #4]
    d970:	429a      	cmp	r2, r3
    d972:	bf28      	it	cs
    d974:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    d976:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    d978:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    d97c:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    d97e:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    d980:	1a80      	subs	r0, r0, r2
    d982:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    d984:	4413      	add	r3, r2
}
    d986:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    d988:	600b      	str	r3, [r1, #0]
}
    d98a:	bf18      	it	ne
    d98c:	2001      	movne	r0, #1
    d98e:	4770      	bx	lr

0000d990 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    d990:	684b      	ldr	r3, [r1, #4]
    d992:	429a      	cmp	r2, r3
    d994:	bf28      	it	cs
    d996:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    d998:	b162      	cbz	r2, d9b4 <nrfx_usbd_feeder_ram_zlp+0x24>
    d99a:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    d99c:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    d9a0:	684b      	ldr	r3, [r1, #4]
    d9a2:	1a9b      	subs	r3, r3, r2
    d9a4:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    d9a6:	680b      	ldr	r3, [r1, #0]
}
    d9a8:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    d9aa:	4413      	add	r3, r2
    d9ac:	600b      	str	r3, [r1, #0]
}
    d9ae:	bf18      	it	ne
    d9b0:	2001      	movne	r0, #1
    d9b2:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    d9b4:	4613      	mov	r3, r2
    d9b6:	e7f1      	b.n	d99c <nrfx_usbd_feeder_ram_zlp+0xc>

0000d9b8 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    d9b8:	43c3      	mvns	r3, r0
    d9ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    d9be:	f000 000f 	and.w	r0, r0, #15
}
    d9c2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    d9c6:	4770      	bx	lr

0000d9c8 <ev_started_handler>:
}
    d9c8:	4770      	bx	lr

0000d9ca <nrf_usbd_epin_dma_handler>:
{
    d9ca:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    d9cc:	f7fb ff10 	bl	97f0 <usbd_dma_pending_clear>
{
    d9d0:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    d9d2:	f7fb fe03 	bl	95dc <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    d9d6:	7b83      	ldrb	r3, [r0, #14]
    d9d8:	2b03      	cmp	r3, #3
    d9da:	d10a      	bne.n	d9f2 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    d9dc:	4608      	mov	r0, r1
    d9de:	f7ff ffeb 	bl	d9b8 <ep2bit>
    d9e2:	2301      	movs	r3, #1
    d9e4:	fa03 f000 	lsl.w	r0, r3, r0
    d9e8:	43c0      	mvns	r0, r0
}
    d9ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    d9ee:	f7fb beef 	b.w	97d0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    d9f2:	6803      	ldr	r3, [r0, #0]
    d9f4:	2b00      	cmp	r3, #0
    d9f6:	d0f1      	beq.n	d9dc <nrf_usbd_epin_dma_handler+0x12>
}
    d9f8:	bd08      	pop	{r3, pc}

0000d9fa <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    d9fa:	2087      	movs	r0, #135	; 0x87
    d9fc:	f7ff bfe5 	b.w	d9ca <nrf_usbd_epin_dma_handler>

0000da00 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    da00:	2086      	movs	r0, #134	; 0x86
    da02:	f7ff bfe2 	b.w	d9ca <nrf_usbd_epin_dma_handler>

0000da06 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    da06:	2085      	movs	r0, #133	; 0x85
    da08:	f7ff bfdf 	b.w	d9ca <nrf_usbd_epin_dma_handler>

0000da0c <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    da0c:	2084      	movs	r0, #132	; 0x84
    da0e:	f7ff bfdc 	b.w	d9ca <nrf_usbd_epin_dma_handler>

0000da12 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    da12:	2083      	movs	r0, #131	; 0x83
    da14:	f7ff bfd9 	b.w	d9ca <nrf_usbd_epin_dma_handler>

0000da18 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    da18:	2082      	movs	r0, #130	; 0x82
    da1a:	f7ff bfd6 	b.w	d9ca <nrf_usbd_epin_dma_handler>

0000da1e <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    da1e:	2081      	movs	r0, #129	; 0x81
    da20:	f7ff bfd3 	b.w	d9ca <nrf_usbd_epin_dma_handler>

0000da24 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    da24:	f7fb bef6 	b.w	9814 <nrf_usbd_ep0in_dma_handler>

0000da28 <nrfx_usbd_ep_max_packet_size_set>:
{
    da28:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    da2a:	f7fb fdd7 	bl	95dc <ep_state_access>
    p_state->max_packet_size = size;
    da2e:	8181      	strh	r1, [r0, #12]
}
    da30:	bd08      	pop	{r3, pc}

0000da32 <nrfx_usbd_ep_status_get>:
{
    da32:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    da34:	f7fb fdd2 	bl	95dc <ep_state_access>
	__asm__ volatile(
    da38:	f04f 0220 	mov.w	r2, #32
    da3c:	f3ef 8311 	mrs	r3, BASEPRI
    da40:	f382 8812 	msr	BASEPRI_MAX, r2
    da44:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    da48:	6882      	ldr	r2, [r0, #8]
    da4a:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    da4c:	6802      	ldr	r2, [r0, #0]
    da4e:	b92a      	cbnz	r2, da5c <nrfx_usbd_ep_status_get+0x2a>
    da50:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    da52:	f383 8811 	msr	BASEPRI, r3
    da56:	f3bf 8f6f 	isb	sy
}
    da5a:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    da5c:	2004      	movs	r0, #4
    da5e:	e7f8      	b.n	da52 <nrfx_usbd_ep_status_get+0x20>

0000da60 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    da60:	2007      	movs	r0, #7
    da62:	f7fc ba43 	b.w	9eec <nrf_usbd_epout_dma_handler>

0000da66 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    da66:	2006      	movs	r0, #6
    da68:	f7fc ba40 	b.w	9eec <nrf_usbd_epout_dma_handler>

0000da6c <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    da6c:	2005      	movs	r0, #5
    da6e:	f7fc ba3d 	b.w	9eec <nrf_usbd_epout_dma_handler>

0000da72 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    da72:	2004      	movs	r0, #4
    da74:	f7fc ba3a 	b.w	9eec <nrf_usbd_epout_dma_handler>

0000da78 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    da78:	2003      	movs	r0, #3
    da7a:	f7fc ba37 	b.w	9eec <nrf_usbd_epout_dma_handler>

0000da7e <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    da7e:	2002      	movs	r0, #2
    da80:	f7fc ba34 	b.w	9eec <nrf_usbd_epout_dma_handler>

0000da84 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    da84:	2001      	movs	r0, #1
    da86:	f7fc ba31 	b.w	9eec <nrf_usbd_epout_dma_handler>

0000da8a <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    da8a:	f7fc bb25 	b.w	a0d8 <usbd_ep_abort>

0000da8e <nrf_gpio_pin_set>:
{
    da8e:	b507      	push	{r0, r1, r2, lr}
    da90:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    da92:	a801      	add	r0, sp, #4
    da94:	f7fc fcf4 	bl	a480 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    da98:	9a01      	ldr	r2, [sp, #4]
    da9a:	2301      	movs	r3, #1
    da9c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    da9e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    daa2:	b003      	add	sp, #12
    daa4:	f85d fb04 	ldr.w	pc, [sp], #4

0000daa8 <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
    daa8:	4770      	bx	lr

0000daaa <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    daaa:	b140      	cbz	r0, dabe <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    daac:	68c3      	ldr	r3, [r0, #12]
    daae:	7858      	ldrb	r0, [r3, #1]
    dab0:	f010 0001 	ands.w	r0, r0, #1
    dab4:	bf1e      	ittt	ne
    dab6:	7818      	ldrbne	r0, [r3, #0]
    dab8:	fab0 f080 	clzne	r0, r0
    dabc:	0940      	lsrne	r0, r0, #5
}
    dabe:	4770      	bx	lr

0000dac0 <arch_system_halt>:
	__asm__ volatile(
    dac0:	f04f 0220 	mov.w	r2, #32
    dac4:	f3ef 8311 	mrs	r3, BASEPRI
    dac8:	f382 8812 	msr	BASEPRI_MAX, r2
    dacc:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    dad0:	e7fe      	b.n	dad0 <arch_system_halt+0x10>

0000dad2 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    dad2:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    dad4:	f7ff fff4 	bl	dac0 <arch_system_halt>

0000dad8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dada:	4605      	mov	r5, r0
    dadc:	460e      	mov	r6, r1
    dade:	f04f 0320 	mov.w	r3, #32
    dae2:	f3ef 8711 	mrs	r7, BASEPRI
    dae6:	f383 8812 	msr	BASEPRI_MAX, r3
    daea:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    daee:	f7fd fcfb 	bl	b4e8 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    daf2:	4631      	mov	r1, r6
    daf4:	4604      	mov	r4, r0
    daf6:	4628      	mov	r0, r5
    daf8:	f7ff ffeb 	bl	dad2 <k_sys_fatal_error_handler>
	__asm__ volatile(
    dafc:	f387 8811 	msr	BASEPRI, r7
    db00:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    db04:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    db06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    db0a:	f7f7 bbef 	b.w	52ec <z_impl_k_thread_abort>

0000db0e <z_early_memset>:
	(void) memset(dst, c, n);
    db0e:	f7fe bcf0 	b.w	c4f2 <memset>

0000db12 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    db12:	f7fe bce3 	b.w	c4dc <memcpy>

0000db16 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    db16:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    db1a:	4313      	orrs	r3, r2
    db1c:	f013 0303 	ands.w	r3, r3, #3
    db20:	d10c      	bne.n	db3c <create_free_list+0x26>
	slab->free_list = NULL;
    db22:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    db24:	6881      	ldr	r1, [r0, #8]
    db26:	4299      	cmp	r1, r3
    db28:	d801      	bhi.n	db2e <create_free_list+0x18>
	return 0;
    db2a:	2000      	movs	r0, #0
    db2c:	4770      	bx	lr
		*(char **)p = slab->free_list;
    db2e:	6941      	ldr	r1, [r0, #20]
    db30:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    db32:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    db34:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    db36:	3301      	adds	r3, #1
		p += slab->block_size;
    db38:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    db3a:	e7f3      	b.n	db24 <create_free_list+0xe>
		return -EINVAL;
    db3c:	f06f 0015 	mvn.w	r0, #21
}
    db40:	4770      	bx	lr

0000db42 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    db42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db44:	4604      	mov	r4, r0
    db46:	460d      	mov	r5, r1
	__asm__ volatile(
    db48:	f04f 0320 	mov.w	r3, #32
    db4c:	f3ef 8611 	mrs	r6, BASEPRI
    db50:	f383 8812 	msr	BASEPRI_MAX, r3
    db54:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    db58:	6947      	ldr	r7, [r0, #20]
    db5a:	b977      	cbnz	r7, db7a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    db5c:	f000 f99b 	bl	de96 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    db60:	b158      	cbz	r0, db7a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    db62:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    db64:	6142      	str	r2, [r0, #20]
    db66:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    db68:	f000 f95f 	bl	de2a <z_ready_thread>
			z_reschedule(&slab->lock, key);
    db6c:	4631      	mov	r1, r6
    db6e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    db72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    db76:	f7fd bb67 	b.w	b248 <z_reschedule>
	**(char ***) mem = slab->free_list;
    db7a:	682b      	ldr	r3, [r5, #0]
    db7c:	6962      	ldr	r2, [r4, #20]
    db7e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    db80:	682b      	ldr	r3, [r5, #0]
    db82:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    db84:	69a3      	ldr	r3, [r4, #24]
    db86:	3b01      	subs	r3, #1
    db88:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    db8a:	f386 8811 	msr	BASEPRI, r6
    db8e:	f3bf 8f6f 	isb	sy
}
    db92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000db94 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    db94:	f3ef 8005 	mrs	r0, IPSR
}
    db98:	3800      	subs	r0, #0
    db9a:	bf18      	it	ne
    db9c:	2001      	movne	r0, #1
    db9e:	4770      	bx	lr

0000dba0 <z_impl_k_thread_name_set>:
}
    dba0:	f06f 0057 	mvn.w	r0, #87	; 0x57
    dba4:	4770      	bx	lr

0000dba6 <z_impl_k_thread_start>:
	z_sched_start(thread);
    dba6:	f7fd bb61 	b.w	b26c <z_sched_start>

0000dbaa <z_pm_save_idle_exit>:
{
    dbaa:	b508      	push	{r3, lr}
	pm_system_resume();
    dbac:	f7f5 fd72 	bl	3694 <pm_system_resume>
}
    dbb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    dbb4:	f7ff bd08 	b.w	d5c8 <sys_clock_idle_exit>

0000dbb8 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    dbb8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    dbbc:	428b      	cmp	r3, r1
    dbbe:	d001      	beq.n	dbc4 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    dbc0:	f7fd bafc 	b.w	b1bc <z_set_prio>
}
    dbc4:	2000      	movs	r0, #0
    dbc6:	4770      	bx	lr

0000dbc8 <z_impl_k_mutex_init>:
{
    dbc8:	4603      	mov	r3, r0
	mutex->owner = NULL;
    dbca:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    dbcc:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    dbd0:	e9c3 3300 	strd	r3, r3, [r3]
}
    dbd4:	4770      	bx	lr

0000dbd6 <queue_insert>:
{
    dbd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dbda:	4699      	mov	r9, r3
    dbdc:	4604      	mov	r4, r0
    dbde:	f89d 3020 	ldrb.w	r3, [sp, #32]
    dbe2:	460d      	mov	r5, r1
    dbe4:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    dbe6:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    dbea:	f04f 0220 	mov.w	r2, #32
    dbee:	f3ef 8711 	mrs	r7, BASEPRI
    dbf2:	f382 8812 	msr	BASEPRI_MAX, r2
    dbf6:	f3bf 8f6f 	isb	sy
	if (is_append) {
    dbfa:	b103      	cbz	r3, dbfe <queue_insert+0x28>
	return list->tail;
    dbfc:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    dbfe:	4630      	mov	r0, r6
    dc00:	f000 f949 	bl	de96 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    dc04:	b158      	cbz	r0, dc1e <queue_insert+0x48>
    dc06:	2300      	movs	r3, #0
    dc08:	6783      	str	r3, [r0, #120]	; 0x78
    dc0a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    dc0e:	f000 f90c 	bl	de2a <z_ready_thread>
	z_reschedule(&queue->lock, key);
    dc12:	4630      	mov	r0, r6
    dc14:	4639      	mov	r1, r7
    dc16:	f7fd fb17 	bl	b248 <z_reschedule>
		return 0;
    dc1a:	2000      	movs	r0, #0
    dc1c:	e00c      	b.n	dc38 <queue_insert+0x62>
	if (alloc) {
    dc1e:	f1b9 0f00 	cmp.w	r9, #0
    dc22:	d01c      	beq.n	dc5e <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    dc24:	2108      	movs	r1, #8
    dc26:	f7fd fe31 	bl	b88c <z_thread_aligned_alloc>
		if (anode == NULL) {
    dc2a:	b938      	cbnz	r0, dc3c <queue_insert+0x66>
	__asm__ volatile(
    dc2c:	f387 8811 	msr	BASEPRI, r7
    dc30:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    dc34:	f06f 000b 	mvn.w	r0, #11
}
    dc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    dc3c:	2201      	movs	r2, #1
		anode->data = data;
    dc3e:	f8c0 8004 	str.w	r8, [r0, #4]
    dc42:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    dc44:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    dc46:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    dc4a:	b965      	cbnz	r5, dc66 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    dc4c:	6822      	ldr	r2, [r4, #0]
    dc4e:	430a      	orrs	r2, r1
    dc50:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    dc52:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    dc54:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    dc56:	2a00      	cmp	r2, #0
    dc58:	d1db      	bne.n	dc12 <queue_insert+0x3c>
	list->tail = node;
    dc5a:	6060      	str	r0, [r4, #4]
}
    dc5c:	e7d9      	b.n	dc12 <queue_insert+0x3c>
	node->next_and_flags = flags;
    dc5e:	f8c8 9000 	str.w	r9, [r8]
}
    dc62:	4640      	mov	r0, r8
    dc64:	e7ee      	b.n	dc44 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    dc66:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    dc68:	2a03      	cmp	r2, #3
    dc6a:	d80b      	bhi.n	dc84 <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    dc6c:	6001      	str	r1, [r0, #0]
	return list->tail;
    dc6e:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    dc70:	b911      	cbnz	r1, dc78 <queue_insert+0xa2>
	list->head = node;
    dc72:	e9c4 0000 	strd	r0, r0, [r4]
}
    dc76:	e7cc      	b.n	dc12 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    dc78:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    dc7a:	f002 0203 	and.w	r2, r2, #3
    dc7e:	4302      	orrs	r2, r0
    dc80:	600a      	str	r2, [r1, #0]
    dc82:	e7ea      	b.n	dc5a <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    dc84:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    dc88:	430a      	orrs	r2, r1
    dc8a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    dc8c:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    dc8e:	f002 0203 	and.w	r2, r2, #3
    dc92:	ea40 0302 	orr.w	r3, r0, r2
    dc96:	602b      	str	r3, [r5, #0]
}
    dc98:	e7bb      	b.n	dc12 <queue_insert+0x3c>

0000dc9a <z_queue_node_peek>:
{
    dc9a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    dc9c:	4604      	mov	r4, r0
    dc9e:	b130      	cbz	r0, dcae <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    dca0:	6802      	ldr	r2, [r0, #0]
    dca2:	0793      	lsls	r3, r2, #30
    dca4:	d003      	beq.n	dcae <z_queue_node_peek+0x14>
		ret = anode->data;
    dca6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    dca8:	b109      	cbz	r1, dcae <z_queue_node_peek+0x14>
			k_free(anode);
    dcaa:	f000 f9c1 	bl	e030 <k_free>
}
    dcae:	4620      	mov	r0, r4
    dcb0:	bd10      	pop	{r4, pc}

0000dcb2 <k_queue_append>:
{
    dcb2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    dcb4:	2301      	movs	r3, #1
    dcb6:	9300      	str	r3, [sp, #0]
    dcb8:	2300      	movs	r3, #0
{
    dcba:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    dcbc:	4619      	mov	r1, r3
    dcbe:	f7ff ff8a 	bl	dbd6 <queue_insert>
}
    dcc2:	b003      	add	sp, #12
    dcc4:	f85d fb04 	ldr.w	pc, [sp], #4

0000dcc8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    dcc8:	b13a      	cbz	r2, dcda <z_impl_k_sem_init+0x12>
    dcca:	428a      	cmp	r2, r1
    dccc:	d305      	bcc.n	dcda <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    dcce:	e9c0 1202 	strd	r1, r2, [r0, #8]
    dcd2:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    dcd6:	2000      	movs	r0, #0
    dcd8:	4770      	bx	lr
		return -EINVAL;
    dcda:	f06f 0015 	mvn.w	r0, #21
}
    dcde:	4770      	bx	lr

0000dce0 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    dce0:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    dce2:	2301      	movs	r3, #1
    dce4:	408b      	lsls	r3, r1
    dce6:	ea22 0303 	bic.w	r3, r2, r3
    dcea:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    dcec:	fa22 f001 	lsr.w	r0, r2, r1
}
    dcf0:	f000 0001 	and.w	r0, r0, #1
    dcf4:	4770      	bx	lr

0000dcf6 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    dcf6:	b120      	cbz	r0, dd02 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    dcf8:	2200      	movs	r2, #0
    dcfa:	4611      	mov	r1, r2
    dcfc:	3088      	adds	r0, #136	; 0x88
    dcfe:	f000 b924 	b.w	df4a <z_sched_wake>
}
    dd02:	4770      	bx	lr

0000dd04 <work_timeout>:
{
    dd04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dd06:	4604      	mov	r4, r0
	__asm__ volatile(
    dd08:	f04f 0320 	mov.w	r3, #32
    dd0c:	f3ef 8511 	mrs	r5, BASEPRI
    dd10:	f383 8812 	msr	BASEPRI_MAX, r3
    dd14:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    dd18:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    dd1a:	f1a0 0610 	sub.w	r6, r0, #16
    dd1e:	2103      	movs	r1, #3
    dd20:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    dd22:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    dd24:	f7ff ffdc 	bl	dce0 <flag_test_and_clear>
    dd28:	b128      	cbz	r0, dd36 <work_timeout+0x32>
		queue = dw->queue;
    dd2a:	69a3      	ldr	r3, [r4, #24]
    dd2c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    dd2e:	a901      	add	r1, sp, #4
    dd30:	4630      	mov	r0, r6
    dd32:	f7fd f827 	bl	ad84 <submit_to_queue_locked>
	__asm__ volatile(
    dd36:	f385 8811 	msr	BASEPRI, r5
    dd3a:	f3bf 8f6f 	isb	sy
}
    dd3e:	b002      	add	sp, #8
    dd40:	bd70      	pop	{r4, r5, r6, pc}

0000dd42 <k_work_init>:
{
    dd42:	b538      	push	{r3, r4, r5, lr}
    dd44:	4604      	mov	r4, r0
    dd46:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    dd48:	2210      	movs	r2, #16
    dd4a:	2100      	movs	r1, #0
    dd4c:	f7fe fbd1 	bl	c4f2 <memset>
    dd50:	6065      	str	r5, [r4, #4]
}
    dd52:	bd38      	pop	{r3, r4, r5, pc}

0000dd54 <z_work_submit_to_queue>:
{
    dd54:	b513      	push	{r0, r1, r4, lr}
    dd56:	9001      	str	r0, [sp, #4]
    dd58:	4608      	mov	r0, r1
	__asm__ volatile(
    dd5a:	f04f 0320 	mov.w	r3, #32
    dd5e:	f3ef 8411 	mrs	r4, BASEPRI
    dd62:	f383 8812 	msr	BASEPRI_MAX, r3
    dd66:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    dd6a:	a901      	add	r1, sp, #4
    dd6c:	f7fd f80a 	bl	ad84 <submit_to_queue_locked>
	__asm__ volatile(
    dd70:	f384 8811 	msr	BASEPRI, r4
    dd74:	f3bf 8f6f 	isb	sy
}
    dd78:	b002      	add	sp, #8
    dd7a:	bd10      	pop	{r4, pc}

0000dd7c <k_work_submit_to_queue>:
{
    dd7c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    dd7e:	f7ff ffe9 	bl	dd54 <z_work_submit_to_queue>
	if (ret > 0) {
    dd82:	1e04      	subs	r4, r0, #0
    dd84:	dd09      	ble.n	dd9a <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    dd86:	f04f 0320 	mov.w	r3, #32
    dd8a:	f3ef 8011 	mrs	r0, BASEPRI
    dd8e:	f383 8812 	msr	BASEPRI_MAX, r3
    dd92:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    dd96:	f000 f8b2 	bl	defe <z_reschedule_irqlock>
}
    dd9a:	4620      	mov	r0, r4
    dd9c:	bd10      	pop	{r4, pc}

0000dd9e <k_work_init_delayable>:
{
    dd9e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    dda0:	2230      	movs	r2, #48	; 0x30
{
    dda2:	4604      	mov	r4, r0
    dda4:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    dda6:	2100      	movs	r1, #0
    dda8:	f7fe fba3 	bl	c4f2 <memset>
    ddac:	f44f 7380 	mov.w	r3, #256	; 0x100
    ddb0:	6065      	str	r5, [r4, #4]
    ddb2:	60e3      	str	r3, [r4, #12]
}
    ddb4:	bd38      	pop	{r3, r4, r5, pc}

0000ddb6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    ddb6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    ddba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ddbc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ddbe:	2300      	movs	r3, #0
	node->prev = NULL;
    ddc0:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    ddc4:	4770      	bx	lr

0000ddc6 <unpend_thread_no_timeout>:
{
    ddc6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    ddc8:	f7ff fff5 	bl	ddb6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ddcc:	7b43      	ldrb	r3, [r0, #13]
    ddce:	f023 0302 	bic.w	r3, r3, #2
    ddd2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    ddd4:	2300      	movs	r3, #0
    ddd6:	6083      	str	r3, [r0, #8]
}
    ddd8:	bd08      	pop	{r3, pc}

0000ddda <add_to_waitq_locked>:
{
    ddda:	b538      	push	{r3, r4, r5, lr}
    dddc:	4604      	mov	r4, r0
    ddde:	460d      	mov	r5, r1
	unready_thread(thread);
    dde0:	f7fd f96e 	bl	b0c0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    dde4:	7b63      	ldrb	r3, [r4, #13]
    dde6:	f043 0302 	orr.w	r3, r3, #2
    ddea:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    ddec:	b1e5      	cbz	r5, de28 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    ddee:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    ddf0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ddf2:	429d      	cmp	r5, r3
    ddf4:	d109      	bne.n	de0a <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    ddf6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    ddf8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    ddfc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ddfe:	606c      	str	r4, [r5, #4]
}
    de00:	e012      	b.n	de28 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    de02:	686a      	ldr	r2, [r5, #4]
    de04:	4293      	cmp	r3, r2
    de06:	d0f6      	beq.n	ddf6 <add_to_waitq_locked+0x1c>
    de08:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    de0a:	2b00      	cmp	r3, #0
    de0c:	d0f3      	beq.n	ddf6 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    de0e:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    de12:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    de16:	428a      	cmp	r2, r1
    de18:	d0f3      	beq.n	de02 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    de1a:	4291      	cmp	r1, r2
    de1c:	ddf1      	ble.n	de02 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    de1e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    de20:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    de24:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    de26:	605c      	str	r4, [r3, #4]
}
    de28:	bd38      	pop	{r3, r4, r5, pc}

0000de2a <z_ready_thread>:
{
    de2a:	b510      	push	{r4, lr}
    de2c:	f04f 0320 	mov.w	r3, #32
    de30:	f3ef 8411 	mrs	r4, BASEPRI
    de34:	f383 8812 	msr	BASEPRI_MAX, r3
    de38:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    de3c:	f7fd f90c 	bl	b058 <ready_thread>
	__asm__ volatile(
    de40:	f384 8811 	msr	BASEPRI, r4
    de44:	f3bf 8f6f 	isb	sy
}
    de48:	bd10      	pop	{r4, pc}

0000de4a <z_sched_wake_thread>:
{
    de4a:	b538      	push	{r3, r4, r5, lr}
    de4c:	4604      	mov	r4, r0
	__asm__ volatile(
    de4e:	f04f 0320 	mov.w	r3, #32
    de52:	f3ef 8511 	mrs	r5, BASEPRI
    de56:	f383 8812 	msr	BASEPRI_MAX, r3
    de5a:	f3bf 8f6f 	isb	sy
		if (!killed) {
    de5e:	7b43      	ldrb	r3, [r0, #13]
    de60:	f013 0f28 	tst.w	r3, #40	; 0x28
    de64:	d10b      	bne.n	de7e <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    de66:	6883      	ldr	r3, [r0, #8]
    de68:	b10b      	cbz	r3, de6e <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    de6a:	f7ff ffac 	bl	ddc6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    de6e:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    de70:	b951      	cbnz	r1, de88 <z_sched_wake_thread+0x3e>
    de72:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    de76:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    de78:	4620      	mov	r0, r4
    de7a:	f7fd f8ed 	bl	b058 <ready_thread>
	__asm__ volatile(
    de7e:	f385 8811 	msr	BASEPRI, r5
    de82:	f3bf 8f6f 	isb	sy
}
    de86:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    de88:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    de8c:	e7f3      	b.n	de76 <z_sched_wake_thread+0x2c>

0000de8e <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    de8e:	2101      	movs	r1, #1
    de90:	3818      	subs	r0, #24
    de92:	f7ff bfda 	b.w	de4a <z_sched_wake_thread>

0000de96 <z_unpend_first_thread>:
{
    de96:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    de98:	f04f 0320 	mov.w	r3, #32
    de9c:	f3ef 8511 	mrs	r5, BASEPRI
    dea0:	f383 8812 	msr	BASEPRI_MAX, r3
    dea4:	f3bf 8f6f 	isb	sy
	return list->head == list;
    dea8:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    deaa:	42a0      	cmp	r0, r4
    deac:	d00d      	beq.n	deca <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    deae:	b134      	cbz	r4, debe <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    deb0:	4620      	mov	r0, r4
    deb2:	f7ff ff88 	bl	ddc6 <unpend_thread_no_timeout>
    deb6:	f104 0018 	add.w	r0, r4, #24
    deba:	f000 f869 	bl	df90 <z_abort_timeout>
	__asm__ volatile(
    debe:	f385 8811 	msr	BASEPRI, r5
    dec2:	f3bf 8f6f 	isb	sy
}
    dec6:	4620      	mov	r0, r4
    dec8:	bd38      	pop	{r3, r4, r5, pc}
    deca:	2400      	movs	r4, #0
    decc:	e7f7      	b.n	debe <z_unpend_first_thread+0x28>

0000dece <z_unpend_thread>:
{
    dece:	b510      	push	{r4, lr}
    ded0:	4601      	mov	r1, r0
	__asm__ volatile(
    ded2:	f04f 0320 	mov.w	r3, #32
    ded6:	f3ef 8411 	mrs	r4, BASEPRI
    deda:	f383 8812 	msr	BASEPRI_MAX, r3
    dede:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    dee2:	6883      	ldr	r3, [r0, #8]
    dee4:	b10b      	cbz	r3, deea <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    dee6:	f7ff ff6e 	bl	ddc6 <unpend_thread_no_timeout>
	__asm__ volatile(
    deea:	f384 8811 	msr	BASEPRI, r4
    deee:	f3bf 8f6f 	isb	sy
}
    def2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    def6:	f101 0018 	add.w	r0, r1, #24
    defa:	f000 b849 	b.w	df90 <z_abort_timeout>

0000defe <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    defe:	4603      	mov	r3, r0
    df00:	b920      	cbnz	r0, df0c <z_reschedule_irqlock+0xe>
    df02:	f3ef 8205 	mrs	r2, IPSR
    df06:	b90a      	cbnz	r2, df0c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    df08:	f7f6 bfb2 	b.w	4e70 <arch_swap>
    df0c:	f383 8811 	msr	BASEPRI, r3
    df10:	f3bf 8f6f 	isb	sy
}
    df14:	4770      	bx	lr

0000df16 <z_reschedule_unlocked>:
	__asm__ volatile(
    df16:	f04f 0320 	mov.w	r3, #32
    df1a:	f3ef 8011 	mrs	r0, BASEPRI
    df1e:	f383 8812 	msr	BASEPRI_MAX, r3
    df22:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    df26:	f7ff bfea 	b.w	defe <z_reschedule_irqlock>

0000df2a <z_unpend_all>:
{
    df2a:	b538      	push	{r3, r4, r5, lr}
    df2c:	4605      	mov	r5, r0
	int need_sched = 0;
    df2e:	2000      	movs	r0, #0
	return list->head == list;
    df30:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    df32:	42a5      	cmp	r5, r4
    df34:	d000      	beq.n	df38 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    df36:	b904      	cbnz	r4, df3a <z_unpend_all+0x10>
}
    df38:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    df3a:	4620      	mov	r0, r4
    df3c:	f7ff ffc7 	bl	dece <z_unpend_thread>
		z_ready_thread(thread);
    df40:	4620      	mov	r0, r4
    df42:	f7ff ff72 	bl	de2a <z_ready_thread>
		need_sched = 1;
    df46:	2001      	movs	r0, #1
    df48:	e7f2      	b.n	df30 <z_unpend_all+0x6>

0000df4a <z_sched_wake>:
{
    df4a:	b538      	push	{r3, r4, r5, lr}
    df4c:	f04f 0320 	mov.w	r3, #32
    df50:	f3ef 8511 	mrs	r5, BASEPRI
    df54:	f383 8812 	msr	BASEPRI_MAX, r3
    df58:	f3bf 8f6f 	isb	sy
	return list->head == list;
    df5c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    df5e:	42a0      	cmp	r0, r4
    df60:	d012      	beq.n	df88 <z_sched_wake+0x3e>
		if (thread != NULL) {
    df62:	b19c      	cbz	r4, df8c <z_sched_wake+0x42>
    df64:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
    df66:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    df68:	4620      	mov	r0, r4
    df6a:	f7ff ff2c 	bl	ddc6 <unpend_thread_no_timeout>
    df6e:	f104 0018 	add.w	r0, r4, #24
    df72:	f000 f80d 	bl	df90 <z_abort_timeout>
			ready_thread(thread);
    df76:	4620      	mov	r0, r4
    df78:	f7fd f86e 	bl	b058 <ready_thread>
			ret = true;
    df7c:	2001      	movs	r0, #1
	__asm__ volatile(
    df7e:	f385 8811 	msr	BASEPRI, r5
    df82:	f3bf 8f6f 	isb	sy
}
    df86:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    df88:	2000      	movs	r0, #0
    df8a:	e7f8      	b.n	df7e <z_sched_wake+0x34>
    df8c:	4620      	mov	r0, r4
    df8e:	e7f6      	b.n	df7e <z_sched_wake+0x34>

0000df90 <z_abort_timeout>:
{
    df90:	b510      	push	{r4, lr}
	__asm__ volatile(
    df92:	f04f 0220 	mov.w	r2, #32
    df96:	f3ef 8411 	mrs	r4, BASEPRI
    df9a:	f382 8812 	msr	BASEPRI_MAX, r2
    df9e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    dfa2:	6803      	ldr	r3, [r0, #0]
    dfa4:	b13b      	cbz	r3, dfb6 <z_abort_timeout+0x26>
			remove_timeout(to);
    dfa6:	f7fd fb5b 	bl	b660 <remove_timeout>
			ret = 0;
    dfaa:	2000      	movs	r0, #0
	__asm__ volatile(
    dfac:	f384 8811 	msr	BASEPRI, r4
    dfb0:	f3bf 8f6f 	isb	sy
}
    dfb4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    dfb6:	f06f 0015 	mvn.w	r0, #21
    dfba:	e7f7      	b.n	dfac <z_abort_timeout+0x1c>

0000dfbc <z_get_next_timeout_expiry>:
{
    dfbc:	b510      	push	{r4, lr}
	__asm__ volatile(
    dfbe:	f04f 0320 	mov.w	r3, #32
    dfc2:	f3ef 8411 	mrs	r4, BASEPRI
    dfc6:	f383 8812 	msr	BASEPRI_MAX, r3
    dfca:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    dfce:	f7fd fb27 	bl	b620 <next_timeout>
	__asm__ volatile(
    dfd2:	f384 8811 	msr	BASEPRI, r4
    dfd6:	f3bf 8f6f 	isb	sy
}
    dfda:	bd10      	pop	{r4, pc}

0000dfdc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    dfdc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    dfde:	f7fd fc3b 	bl	b858 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    dfe2:	bd08      	pop	{r3, pc}

0000dfe4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    dfe4:	b108      	cbz	r0, dfea <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    dfe6:	f7f7 ba87 	b.w	54f8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    dfea:	4770      	bx	lr

0000dfec <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    dfec:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    dff0:	bf08      	it	eq
    dff2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    dff6:	b538      	push	{r3, r4, r5, lr}
    dff8:	460c      	mov	r4, r1
    dffa:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    dffc:	d014      	beq.n	e028 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    dffe:	4308      	orrs	r0, r1
    e000:	d103      	bne.n	e00a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    e002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    e006:	f7fd bc27 	b.w	b858 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    e00a:	f06f 0001 	mvn.w	r0, #1
    e00e:	1b40      	subs	r0, r0, r5
    e010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e014:	eb63 0101 	sbc.w	r1, r3, r1
    e018:	2900      	cmp	r1, #0
    e01a:	da04      	bge.n	e026 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    e01c:	f7fd fc1c 	bl	b858 <sys_clock_tick_get>
    e020:	1940      	adds	r0, r0, r5
    e022:	eb41 0104 	adc.w	r1, r1, r4
}
    e026:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    e028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e02c:	4601      	mov	r1, r0
    e02e:	e7fa      	b.n	e026 <sys_clock_timeout_end_calc+0x3a>

0000e030 <k_free>:
	if (ptr != NULL) {
    e030:	b120      	cbz	r0, e03c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    e032:	1f01      	subs	r1, r0, #4
    e034:	f850 0c04 	ldr.w	r0, [r0, #-4]
    e038:	f000 b856 	b.w	e0e8 <k_heap_free>
}
    e03c:	4770      	bx	lr

0000e03e <k_heap_init>:
{
    e03e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    e040:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    e044:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    e048:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    e04a:	f7fd be88 	b.w	bd5e <sys_heap_init>

0000e04e <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    e04e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e052:	b085      	sub	sp, #20
    e054:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    e058:	4607      	mov	r7, r0
    e05a:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e05c:	4650      	mov	r0, sl
    e05e:	4621      	mov	r1, r4
{
    e060:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e062:	f7ff ffc3 	bl	dfec <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e066:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e06a:	bf08      	it	eq
    e06c:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e070:	4605      	mov	r5, r0
    e072:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e074:	bf04      	itt	eq
    e076:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    e07a:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    e07e:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
    e082:	f04f 0320 	mov.w	r3, #32
    e086:	f3ef 8411 	mrs	r4, BASEPRI
    e08a:	f383 8812 	msr	BASEPRI_MAX, r3
    e08e:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e092:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    e096:	464a      	mov	r2, r9
    e098:	4641      	mov	r1, r8
    e09a:	4638      	mov	r0, r7
    e09c:	f7fd fdf8 	bl	bc90 <sys_heap_aligned_alloc>
    e0a0:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    e0a2:	f7fd fbd9 	bl	b858 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    e0a6:	9b03      	ldr	r3, [sp, #12]
    e0a8:	b13b      	cbz	r3, e0ba <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    e0aa:	f384 8811 	msr	BASEPRI, r4
    e0ae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    e0b2:	4618      	mov	r0, r3
    e0b4:	b005      	add	sp, #20
    e0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    e0ba:	1a28      	subs	r0, r5, r0
    e0bc:	eb66 0101 	sbc.w	r1, r6, r1
    e0c0:	2801      	cmp	r0, #1
    e0c2:	f171 0200 	sbcs.w	r2, r1, #0
    e0c6:	dbf0      	blt.n	e0aa <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e0c8:	e9cd 0100 	strd	r0, r1, [sp]
    e0cc:	465a      	mov	r2, fp
    e0ce:	4621      	mov	r1, r4
    e0d0:	4650      	mov	r0, sl
    e0d2:	f7fd f855 	bl	b180 <z_pend_curr>
	__asm__ volatile(
    e0d6:	f04f 0320 	mov.w	r3, #32
    e0da:	f3ef 8411 	mrs	r4, BASEPRI
    e0de:	f383 8812 	msr	BASEPRI_MAX, r3
    e0e2:	f3bf 8f6f 	isb	sy
	return k;
    e0e6:	e7d6      	b.n	e096 <k_heap_aligned_alloc+0x48>

0000e0e8 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    e0e8:	b538      	push	{r3, r4, r5, lr}
    e0ea:	4604      	mov	r4, r0
    e0ec:	f04f 0320 	mov.w	r3, #32
    e0f0:	f3ef 8511 	mrs	r5, BASEPRI
    e0f4:	f383 8812 	msr	BASEPRI_MAX, r3
    e0f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    e0fc:	f7fd fd90 	bl	bc20 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    e100:	f104 000c 	add.w	r0, r4, #12
    e104:	f7ff ff11 	bl	df2a <z_unpend_all>
    e108:	b130      	cbz	r0, e118 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    e10a:	4629      	mov	r1, r5
    e10c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    e110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    e114:	f7fd b898 	b.w	b248 <z_reschedule>
	__asm__ volatile(
    e118:	f385 8811 	msr	BASEPRI, r5
    e11c:	f3bf 8f6f 	isb	sy
}
    e120:	bd38      	pop	{r3, r4, r5, pc}
	...
